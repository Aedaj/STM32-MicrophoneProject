
test_Sd_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d078  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001360c  0800d218  0800d218  0000e218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020824  08020824  00022088  2**0
                  CONTENTS
  4 .ARM          00000008  08020824  08020824  00021824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802082c  0802082c  00022088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802082c  0802082c  0002182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020830  08020830  00021830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08020834  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fb04  20000088  080208bc  00022088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb8c  080208bc  00022b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002251a  00000000  00000000  000220b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004751  00000000  00000000  000445d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00048d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d2  00000000  00000000  0004a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afb6  00000000  00000000  0004b702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000227e6  00000000  00000000  000666b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2b56  00000000  00000000  00088e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0012b9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  0012baac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00132574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003c4b  00000000  00000000  001325de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000d8  00000000  00000000  00136229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d200 	.word	0x0800d200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800d200 	.word	0x0800d200

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <SELECT>:



/* SPI Chip Select */
static void SELECT(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <SELECT+0x14>)
 8000b96:	f003 fe09 	bl	80047ac <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2101      	movs	r1, #1
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <DESELECT+0x14>)
 8000bae:	f003 fdfd 	bl	80047ac <HAL_GPIO_WritePin>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40020400 	.word	0x40020400

08000bbc <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000bc6:	bf00      	nop
 8000bc8:	4808      	ldr	r0, [pc, #32]	@ (8000bec <SPI_TxByte+0x30>)
 8000bca:	f005 fc01 	bl	80063d0 <HAL_SPI_GetState>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d1f9      	bne.n	8000bc8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000bd4:	1df9      	adds	r1, r7, #7
 8000bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <SPI_TxByte+0x30>)
 8000bde:	f005 f904 	bl	8005dea <HAL_SPI_Transmit>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200001a4 	.word	0x200001a4

08000bf0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000bf6:	23ff      	movs	r3, #255	@ 0xff
 8000bf8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000bfe:	bf00      	nop
 8000c00:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <SPI_RxByte+0x38>)
 8000c02:	f005 fbe5 	bl	80063d0 <HAL_SPI_GetState>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d1f9      	bne.n	8000c00 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000c0c:	1dba      	adds	r2, r7, #6
 8000c0e:	1df9      	adds	r1, r7, #7
 8000c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <SPI_RxByte+0x38>)
 8000c1a:	f005 fa29 	bl	8006070 <HAL_SPI_TransmitReceive>

  return data;
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c34:	f7ff ffdc 	bl	8000bf0 <SPI_RxByte>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	701a      	strb	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <SD_ReadyWait+0x34>)
 8000c50:	2232      	movs	r2, #50	@ 0x32
 8000c52:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c54:	f7ff ffcc 	bl	8000bf0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c58:	f7ff ffca 	bl	8000bf0 <SPI_RxByte>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2bff      	cmp	r3, #255	@ 0xff
 8000c64:	d004      	beq.n	8000c70 <SD_ReadyWait+0x28>
 8000c66:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SD_ReadyWait+0x34>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1f3      	bne.n	8000c58 <SD_ReadyWait+0x10>

  return res;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000f7fe 	.word	0x2000f7fe

08000c80 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c86:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000c8a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c8c:	f7ff ff8a 	bl	8000ba4 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	e005      	b.n	8000ca2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c96:	20ff      	movs	r0, #255	@ 0xff
 8000c98:	f7ff ff90 	bl	8000bbc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	2b09      	cmp	r3, #9
 8000ca6:	ddf6      	ble.n	8000c96 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000ca8:	f7ff ff70 	bl	8000b8c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000cac:	2340      	movs	r3, #64	@ 0x40
 8000cae:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cc0:	2395      	movs	r3, #149	@ 0x95
 8000cc2:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	e009      	b.n	8000cde <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cca:	1d3a      	adds	r2, r7, #4
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff72 	bl	8000bbc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	ddf2      	ble.n	8000cca <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000ce4:	e002      	b.n	8000cec <SD_PowerOn+0x6c>
  {
    Count--;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000cec:	f7ff ff80 	bl	8000bf0 <SPI_RxByte>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d002      	beq.n	8000cfc <SD_PowerOn+0x7c>
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f4      	bne.n	8000ce6 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000cfc:	f7ff ff52 	bl	8000ba4 <DESELECT>
  SPI_TxByte(0XFF);
 8000d00:	20ff      	movs	r0, #255	@ 0xff
 8000d02:	f7ff ff5b 	bl	8000bbc <SPI_TxByte>

  PowerFlag = 1;
 8000d06:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <SD_PowerOn+0x94>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000a5 	.word	0x200000a5

08000d18 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <SD_PowerOff+0x14>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	200000a5 	.word	0x200000a5

08000d30 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <SD_CheckPower+0x14>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000a5 	.word	0x200000a5

08000d48 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <SD_RxDataBlock+0x68>)
 8000d54:	220a      	movs	r2, #10
 8000d56:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d58:	f7ff ff4a 	bl	8000bf0 <SPI_RxByte>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2bff      	cmp	r3, #255	@ 0xff
 8000d64:	d104      	bne.n	8000d70 <SD_RxDataBlock+0x28>
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <SD_RxDataBlock+0x68>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f3      	bne.n	8000d58 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d74:	d001      	beq.n	8000d7a <SD_RxDataBlock+0x32>
    return FALSE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e016      	b.n	8000da8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff53 	bl	8000c2c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff4d 	bl	8000c2c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3b02      	subs	r3, #2
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1ed      	bne.n	8000d7a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000d9e:	f7ff ff27 	bl	8000bf0 <SPI_RxByte>
  SPI_RxByte();
 8000da2:	f7ff ff25 	bl	8000bf0 <SPI_RxByte>

  return TRUE;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000f7fd 	.word	0x2000f7fd

08000db4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dc4:	f7ff ff40 	bl	8000c48 <SD_ReadyWait>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2bff      	cmp	r3, #255	@ 0xff
 8000dcc:	d001      	beq.n	8000dd2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e040      	b.n	8000e54 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fef1 	bl	8000bbc <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	2bfd      	cmp	r3, #253	@ 0xfd
 8000dde:	d031      	beq.n	8000e44 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fee5 	bl	8000bbc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fede 	bl	8000bbc <SPI_TxByte>
    } while (--wc);
 8000e00:	7bbb      	ldrb	r3, [r7, #14]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	73bb      	strb	r3, [r7, #14]
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1eb      	bne.n	8000de4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000e0c:	f7ff fef0 	bl	8000bf0 <SPI_RxByte>
    SPI_RxByte();
 8000e10:	f7ff feee 	bl	8000bf0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000e14:	e00b      	b.n	8000e2e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e16:	f7ff feeb 	bl	8000bf0 <SPI_RxByte>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d006      	beq.n	8000e36 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e28:	7b7b      	ldrb	r3, [r7, #13]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	2b40      	cmp	r3, #64	@ 0x40
 8000e32:	d9f0      	bls.n	8000e16 <SD_TxDataBlock+0x62>
 8000e34:	e000      	b.n	8000e38 <SD_TxDataBlock+0x84>
        break;
 8000e36:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e38:	bf00      	nop
 8000e3a:	f7ff fed9 	bl	8000bf0 <SPI_RxByte>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0fa      	beq.n	8000e3a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	d101      	bne.n	8000e52 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e68:	f7ff feee 	bl	8000c48 <SD_ReadyWait>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2bff      	cmp	r3, #255	@ 0xff
 8000e70:	d001      	beq.n	8000e76 <SD_SendCmd+0x1a>
    return 0xFF;
 8000e72:	23ff      	movs	r3, #255	@ 0xff
 8000e74:	e040      	b.n	8000ef8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe9f 	bl	8000bbc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	0e1b      	lsrs	r3, r3, #24
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe99 	bl	8000bbc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe93 	bl	8000bbc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe8d 	bl	8000bbc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe88 	bl	8000bbc <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b40      	cmp	r3, #64	@ 0x40
 8000eb4:	d101      	bne.n	8000eba <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000eb6:	2395      	movs	r3, #149	@ 0x95
 8000eb8:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b48      	cmp	r3, #72	@ 0x48
 8000ebe:	d101      	bne.n	8000ec4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ec0:	2387      	movs	r3, #135	@ 0x87
 8000ec2:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe78 	bl	8000bbc <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ed0:	d101      	bne.n	8000ed6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000ed2:	f7ff fe8d 	bl	8000bf0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000eda:	f7ff fe89 	bl	8000bf0 <SPI_RxByte>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ee2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da05      	bge.n	8000ef6 <SD_SendCmd+0x9a>
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	73bb      	strb	r3, [r7, #14]
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f1      	bne.n	8000eda <SD_SendCmd+0x7e>

  return res;
 8000ef6:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e0d5      	b.n	80010c0 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f14:	4b6c      	ldr	r3, [pc, #432]	@ (80010c8 <SD_disk_initialize+0x1c8>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <SD_disk_initialize+0x2a>
    return Stat;
 8000f22:	4b69      	ldr	r3, [pc, #420]	@ (80010c8 <SD_disk_initialize+0x1c8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	e0ca      	b.n	80010c0 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f2a:	f7ff fea9 	bl	8000c80 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f2e:	f7ff fe2d 	bl	8000b8c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f36:	2100      	movs	r1, #0
 8000f38:	2040      	movs	r0, #64	@ 0x40
 8000f3a:	f7ff ff8f 	bl	8000e5c <SD_SendCmd>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	f040 80a5 	bne.w	8001090 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f46:	4b61      	ldr	r3, [pc, #388]	@ (80010cc <SD_disk_initialize+0x1cc>)
 8000f48:	2264      	movs	r2, #100	@ 0x64
 8000f4a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f4c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f50:	2048      	movs	r0, #72	@ 0x48
 8000f52:	f7ff ff83 	bl	8000e5c <SD_SendCmd>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d158      	bne.n	800100e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e00c      	b.n	8000f7c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f62:	7bfc      	ldrb	r4, [r7, #15]
 8000f64:	f7ff fe44 	bl	8000bf0 <SPI_RxByte>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f104 0310 	add.w	r3, r4, #16
 8000f70:	443b      	add	r3, r7
 8000f72:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d9ef      	bls.n	8000f62 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f82:	7abb      	ldrb	r3, [r7, #10]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	f040 8083 	bne.w	8001090 <SD_disk_initialize+0x190>
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	2baa      	cmp	r3, #170	@ 0xaa
 8000f8e:	d17f      	bne.n	8001090 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f90:	2100      	movs	r1, #0
 8000f92:	2077      	movs	r0, #119	@ 0x77
 8000f94:	f7ff ff62 	bl	8000e5c <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d807      	bhi.n	8000fae <SD_disk_initialize+0xae>
 8000f9e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fa2:	2069      	movs	r0, #105	@ 0x69
 8000fa4:	f7ff ff5a 	bl	8000e5c <SD_SendCmd>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000fae:	4b47      	ldr	r3, [pc, #284]	@ (80010cc <SD_disk_initialize+0x1cc>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1eb      	bne.n	8000f90 <SD_disk_initialize+0x90>
 8000fb8:	e000      	b.n	8000fbc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fba:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fbc:	4b43      	ldr	r3, [pc, #268]	@ (80010cc <SD_disk_initialize+0x1cc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d064      	beq.n	8001090 <SD_disk_initialize+0x190>
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	207a      	movs	r0, #122	@ 0x7a
 8000fca:	f7ff ff47 	bl	8000e5c <SD_SendCmd>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d15d      	bne.n	8001090 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e00c      	b.n	8000ff4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000fda:	7bfc      	ldrb	r4, [r7, #15]
 8000fdc:	f7ff fe08 	bl	8000bf0 <SPI_RxByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f104 0310 	add.w	r3, r4, #16
 8000fe8:	443b      	add	r3, r7
 8000fea:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d9ef      	bls.n	8000fda <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000ffa:	7a3b      	ldrb	r3, [r7, #8]
 8000ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SD_disk_initialize+0x108>
 8001004:	2306      	movs	r3, #6
 8001006:	e000      	b.n	800100a <SD_disk_initialize+0x10a>
 8001008:	2302      	movs	r3, #2
 800100a:	73bb      	strb	r3, [r7, #14]
 800100c:	e040      	b.n	8001090 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800100e:	2100      	movs	r1, #0
 8001010:	2077      	movs	r0, #119	@ 0x77
 8001012:	f7ff ff23 	bl	8000e5c <SD_SendCmd>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d808      	bhi.n	800102e <SD_disk_initialize+0x12e>
 800101c:	2100      	movs	r1, #0
 800101e:	2069      	movs	r0, #105	@ 0x69
 8001020:	f7ff ff1c 	bl	8000e5c <SD_SendCmd>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d801      	bhi.n	800102e <SD_disk_initialize+0x12e>
 800102a:	2302      	movs	r3, #2
 800102c:	e000      	b.n	8001030 <SD_disk_initialize+0x130>
 800102e:	2301      	movs	r3, #1
 8001030:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d10e      	bne.n	8001056 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001038:	2100      	movs	r1, #0
 800103a:	2077      	movs	r0, #119	@ 0x77
 800103c:	f7ff ff0e 	bl	8000e5c <SD_SendCmd>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d80e      	bhi.n	8001064 <SD_disk_initialize+0x164>
 8001046:	2100      	movs	r1, #0
 8001048:	2069      	movs	r0, #105	@ 0x69
 800104a:	f7ff ff07 	bl	8000e5c <SD_SendCmd>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001054:	e00d      	b.n	8001072 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001056:	2100      	movs	r1, #0
 8001058:	2041      	movs	r0, #65	@ 0x41
 800105a:	f7ff feff 	bl	8000e5c <SD_SendCmd>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <SD_disk_initialize+0x1cc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e1      	bne.n	8001032 <SD_disk_initialize+0x132>
 800106e:	e000      	b.n	8001072 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001070:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <SD_disk_initialize+0x1cc>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <SD_disk_initialize+0x18c>
 800107c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001080:	2050      	movs	r0, #80	@ 0x50
 8001082:	f7ff feeb 	bl	8000e5c <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001090:	4a0f      	ldr	r2, [pc, #60]	@ (80010d0 <SD_disk_initialize+0x1d0>)
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001096:	f7ff fd85 	bl	8000ba4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800109a:	f7ff fda9 	bl	8000bf0 <SPI_RxByte>

  if (type)
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <SD_disk_initialize+0x1c8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SD_disk_initialize+0x1c8>)
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e001      	b.n	80010ba <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010b6:	f7ff fe2f 	bl	8000d18 <SD_PowerOff>
  }

  return Stat;
 80010ba:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <SD_disk_initialize+0x1c8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	2000f7fd 	.word	0x2000f7fd
 80010d0:	200000a4 	.word	0x200000a4

080010d4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e002      	b.n	80010ee <SD_disk_status+0x1a>

  return Stat;
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SD_disk_status+0x28>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000

08001100 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <SD_disk_read+0x1c>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <SD_disk_read+0x20>
    return RES_PARERR;
 800111c:	2304      	movs	r3, #4
 800111e:	e051      	b.n	80011c4 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <SD_disk_read+0xcc>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800112e:	2303      	movs	r3, #3
 8001130:	e048      	b.n	80011c4 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001132:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <SD_disk_read+0xd0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	607b      	str	r3, [r7, #4]

  SELECT();
 8001144:	f7ff fd22 	bl	8000b8c <SELECT>

  if (count == 1)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d111      	bne.n	8001172 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	2051      	movs	r0, #81	@ 0x51
 8001152:	f7ff fe83 	bl	8000e5c <SD_SendCmd>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d129      	bne.n	80011b0 <SD_disk_read+0xb0>
 800115c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f7ff fdf1 	bl	8000d48 <SD_RxDataBlock>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d021      	beq.n	80011b0 <SD_disk_read+0xb0>
      count = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	e01e      	b.n	80011b0 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	2052      	movs	r0, #82	@ 0x52
 8001176:	f7ff fe71 	bl	8000e5c <SD_SendCmd>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d117      	bne.n	80011b0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff fddf 	bl	8000d48 <SD_RxDataBlock>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00a      	beq.n	80011a6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001196:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ed      	bne.n	8001180 <SD_disk_read+0x80>
 80011a4:	e000      	b.n	80011a8 <SD_disk_read+0xa8>
          break;
 80011a6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80011a8:	2100      	movs	r1, #0
 80011aa:	204c      	movs	r0, #76	@ 0x4c
 80011ac:	f7ff fe56 	bl	8000e5c <SD_SendCmd>
    }
  }

  DESELECT();
 80011b0:	f7ff fcf8 	bl	8000ba4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011b4:	f7ff fd1c 	bl	8000bf0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	200000a4 	.word	0x200000a4

080011d4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <SD_disk_write+0x1c>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <SD_disk_write+0x20>
    return RES_PARERR;
 80011f0:	2304      	movs	r3, #4
 80011f2:	e06b      	b.n	80012cc <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80011f4:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <SD_disk_write+0x100>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001202:	2303      	movs	r3, #3
 8001204:	e062      	b.n	80012cc <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <SD_disk_write+0x100>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001214:	2302      	movs	r3, #2
 8001216:	e059      	b.n	80012cc <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <SD_disk_write+0x104>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	607b      	str	r3, [r7, #4]

  SELECT();
 800122a:	f7ff fcaf 	bl	8000b8c <SELECT>

  if (count == 1)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d110      	bne.n	8001256 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	2058      	movs	r0, #88	@ 0x58
 8001238:	f7ff fe10 	bl	8000e5c <SD_SendCmd>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d13a      	bne.n	80012b8 <SD_disk_write+0xe4>
 8001242:	21fe      	movs	r1, #254	@ 0xfe
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7ff fdb5 	bl	8000db4 <SD_TxDataBlock>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d033      	beq.n	80012b8 <SD_disk_write+0xe4>
      count = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	e030      	b.n	80012b8 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <SD_disk_write+0x104>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001262:	2100      	movs	r1, #0
 8001264:	2077      	movs	r0, #119	@ 0x77
 8001266:	f7ff fdf9 	bl	8000e5c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	2057      	movs	r0, #87	@ 0x57
 800126e:	f7ff fdf5 	bl	8000e5c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	2059      	movs	r0, #89	@ 0x59
 8001276:	f7ff fdf1 	bl	8000e5c <SD_SendCmd>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d11b      	bne.n	80012b8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001280:	21fc      	movs	r1, #252	@ 0xfc
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f7ff fd96 	bl	8000db4 <SD_TxDataBlock>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001294:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ee      	bne.n	8001280 <SD_disk_write+0xac>
 80012a2:	e000      	b.n	80012a6 <SD_disk_write+0xd2>
          break;
 80012a4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80012a6:	21fd      	movs	r1, #253	@ 0xfd
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fd83 	bl	8000db4 <SD_TxDataBlock>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <SD_disk_write+0xe4>
      {
        count = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012b8:	f7ff fc74 	bl	8000ba4 <DESELECT>
  SPI_RxByte();
 80012bc:	f7ff fc98 	bl	8000bf0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	200000a4 	.word	0x200000a4

080012dc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08b      	sub	sp, #44	@ 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	603a      	str	r2, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	460b      	mov	r3, r1
 80012ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80012f6:	2304      	movs	r3, #4
 80012f8:	e119      	b.n	800152e <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d129      	bne.n	800135a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d017      	beq.n	800133e <SD_disk_ioctl+0x62>
 800130e:	2b02      	cmp	r3, #2
 8001310:	dc1f      	bgt.n	8001352 <SD_disk_ioctl+0x76>
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <SD_disk_ioctl+0x40>
 8001316:	2b01      	cmp	r3, #1
 8001318:	d00b      	beq.n	8001332 <SD_disk_ioctl+0x56>
 800131a:	e01a      	b.n	8001352 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800131c:	f7ff fd08 	bl	8000d30 <SD_CheckPower>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001326:	f7ff fcf7 	bl	8000d18 <SD_PowerOff>
      res = RES_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001330:	e0fb      	b.n	800152a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001332:	f7ff fca5 	bl	8000c80 <SD_PowerOn>
      res = RES_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800133c:	e0f5      	b.n	800152a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	1c5c      	adds	r4, r3, #1
 8001342:	f7ff fcf5 	bl	8000d30 <SD_CheckPower>
 8001346:	4603      	mov	r3, r0
 8001348:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001350:	e0eb      	b.n	800152a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001352:	2304      	movs	r3, #4
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001358:	e0e7      	b.n	800152a <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800135a:	4b77      	ldr	r3, [pc, #476]	@ (8001538 <SD_disk_ioctl+0x25c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001368:	2303      	movs	r3, #3
 800136a:	e0e0      	b.n	800152e <SD_disk_ioctl+0x252>

    SELECT();
 800136c:	f7ff fc0e 	bl	8000b8c <SELECT>

    switch (ctrl)
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	2b0d      	cmp	r3, #13
 8001374:	f200 80ca 	bhi.w	800150c <SD_disk_ioctl+0x230>
 8001378:	a201      	add	r2, pc, #4	@ (adr r2, 8001380 <SD_disk_ioctl+0xa4>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001477 	.word	0x08001477
 8001384:	080013b9 	.word	0x080013b9
 8001388:	08001467 	.word	0x08001467
 800138c:	0800150d 	.word	0x0800150d
 8001390:	0800150d 	.word	0x0800150d
 8001394:	0800150d 	.word	0x0800150d
 8001398:	0800150d 	.word	0x0800150d
 800139c:	0800150d 	.word	0x0800150d
 80013a0:	0800150d 	.word	0x0800150d
 80013a4:	0800150d 	.word	0x0800150d
 80013a8:	0800150d 	.word	0x0800150d
 80013ac:	08001489 	.word	0x08001489
 80013b0:	080014ad 	.word	0x080014ad
 80013b4:	080014d1 	.word	0x080014d1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013b8:	2100      	movs	r1, #0
 80013ba:	2049      	movs	r0, #73	@ 0x49
 80013bc:	f7ff fd4e 	bl	8000e5c <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f040 80a6 	bne.w	8001514 <SD_disk_ioctl+0x238>
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2110      	movs	r1, #16
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcba 	bl	8000d48 <SD_RxDataBlock>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 809c 	beq.w	8001514 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10d      	bne.n	8001402 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013e6:	7d7b      	ldrb	r3, [r7, #21]
 80013e8:	461a      	mov	r2, r3
 80013ea:	7d3b      	ldrb	r3, [r7, #20]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80013f8:	8bfb      	ldrh	r3, [r7, #30]
 80013fa:	029a      	lsls	r2, r3, #10
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e02d      	b.n	800145e <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001402:	7c7b      	ldrb	r3, [r7, #17]
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	b2da      	uxtb	r2, r3
 800140a:	7dbb      	ldrb	r3, [r7, #22]
 800140c:	09db      	lsrs	r3, r3, #7
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b2da      	uxtb	r2, r3
 8001414:	7d7b      	ldrb	r3, [r7, #21]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0306 	and.w	r3, r3, #6
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3302      	adds	r3, #2
 8001426:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800142a:	7d3b      	ldrb	r3, [r7, #20]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b29a      	uxth	r2, r3
 800143c:	7cbb      	ldrb	r3, [r7, #18]
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	b29b      	uxth	r3, r3
 8001442:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001450:	8bfa      	ldrh	r2, [r7, #30]
 8001452:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001456:	3b09      	subs	r3, #9
 8001458:	409a      	lsls	r2, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001464:	e056      	b.n	8001514 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001474:	e055      	b.n	8001522 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001476:	f7ff fbe7 	bl	8000c48 <SD_ReadyWait>
 800147a:	4603      	mov	r3, r0
 800147c:	2bff      	cmp	r3, #255	@ 0xff
 800147e:	d14b      	bne.n	8001518 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001486:	e047      	b.n	8001518 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001488:	2100      	movs	r1, #0
 800148a:	2049      	movs	r0, #73	@ 0x49
 800148c:	f7ff fce6 	bl	8000e5c <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d142      	bne.n	800151c <SD_disk_ioctl+0x240>
 8001496:	2110      	movs	r1, #16
 8001498:	6a38      	ldr	r0, [r7, #32]
 800149a:	f7ff fc55 	bl	8000d48 <SD_RxDataBlock>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d03b      	beq.n	800151c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014aa:	e037      	b.n	800151c <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014ac:	2100      	movs	r1, #0
 80014ae:	204a      	movs	r0, #74	@ 0x4a
 80014b0:	f7ff fcd4 	bl	8000e5c <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d132      	bne.n	8001520 <SD_disk_ioctl+0x244>
 80014ba:	2110      	movs	r1, #16
 80014bc:	6a38      	ldr	r0, [r7, #32]
 80014be:	f7ff fc43 	bl	8000d48 <SD_RxDataBlock>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d02b      	beq.n	8001520 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014ce:	e027      	b.n	8001520 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014d0:	2100      	movs	r1, #0
 80014d2:	207a      	movs	r0, #122	@ 0x7a
 80014d4:	f7ff fcc2 	bl	8000e5c <SD_SendCmd>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014e4:	e00b      	b.n	80014fe <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80014e6:	6a3c      	ldr	r4, [r7, #32]
 80014e8:	1c63      	adds	r3, r4, #1
 80014ea:	623b      	str	r3, [r7, #32]
 80014ec:	f7ff fb80 	bl	8000bf0 <SPI_RxByte>
 80014f0:	4603      	mov	r3, r0
 80014f2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80014f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014f8:	3301      	adds	r3, #1
 80014fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9ef      	bls.n	80014e6 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 800150c:	2304      	movs	r3, #4
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001512:	e006      	b.n	8001522 <SD_disk_ioctl+0x246>
      break;
 8001514:	bf00      	nop
 8001516:	e004      	b.n	8001522 <SD_disk_ioctl+0x246>
      break;
 8001518:	bf00      	nop
 800151a:	e002      	b.n	8001522 <SD_disk_ioctl+0x246>
      break;
 800151c:	bf00      	nop
 800151e:	e000      	b.n	8001522 <SD_disk_ioctl+0x246>
      break;
 8001520:	bf00      	nop
    }

    DESELECT();
 8001522:	f7ff fb3f 	bl	8000ba4 <DESELECT>
    SPI_RxByte();
 8001526:	f7ff fb63 	bl	8000bf0 <SPI_RxByte>
  }

  return res;
 800152a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800152e:	4618      	mov	r0, r3
 8001530:	372c      	adds	r7, #44	@ 0x2c
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000

0800153c <lcd_send_cmd>:
#include "lcd.h"
#include "main.h"
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

void lcd_send_cmd (char cmd)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

	uint8_t i2c_frame_data[4];

	i2c_frame_data[0] = (cmd & 0xF0) | 0x0c;
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	f023 030f 	bic.w	r3, r3, #15
 800154e:	b25b      	sxtb	r3, r3
 8001550:	f043 030c 	orr.w	r3, r3, #12
 8001554:	b25b      	sxtb	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	733b      	strb	r3, [r7, #12]
	i2c_frame_data[1] = i2c_frame_data[0] & 0xFB;
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	b2db      	uxtb	r3, r3
 8001562:	737b      	strb	r3, [r7, #13]

	i2c_frame_data[2] = ((cmd << 4) & 0xF0) | 0x0c;
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	b25b      	sxtb	r3, r3
 800156a:	f043 030c 	orr.w	r3, r3, #12
 800156e:	b25b      	sxtb	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[3] = i2c_frame_data[2] & 0xFB;
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	b2db      	uxtb	r3, r3
 800157c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, i2c_frame_data, sizeof(i2c_frame_data), TIMEOUT);
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2304      	movs	r3, #4
 800158a:	214e      	movs	r1, #78	@ 0x4e
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <lcd_send_cmd+0x64>)
 800158e:	f003 fa83 	bl	8004a98 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f001 fef2 	bl	800337c <HAL_Delay>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000150 	.word	0x20000150

080015a4 <lcd_send_data>:



void lcd_send_data (char data)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t i2c_frame_data[4];
	data_u = (data&0xf0);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f023 030f 	bic.w	r3, r3, #15
 80015b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[0] = data_u|0x0D;  //en=1, rs=0
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	f043 030d 	orr.w	r3, r3, #13
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	723b      	strb	r3, [r7, #8]
	i2c_frame_data[1] = data_u|0x09;  //en=0, rs=0
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	f043 0309 	orr.w	r3, r3, #9
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	727b      	strb	r3, [r7, #9]
	i2c_frame_data[2] = data_l|0x0D;  //en=1, rs=0
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	f043 030d 	orr.w	r3, r3, #13
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	72bb      	strb	r3, [r7, #10]
	i2c_frame_data[3] = data_l|0x09;  //en=0, rs=0
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	f043 0309 	orr.w	r3, r3, #9
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, i2c_frame_data, sizeof(i2c_frame_data), TIMEOUT);
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2304      	movs	r3, #4
 80015f0:	214e      	movs	r1, #78	@ 0x4e
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <lcd_send_data+0x64>)
 80015f4:	f003 fa50 	bl	8004a98 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f001 febf 	bl	800337c <HAL_Delay>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000150 	.word	0x20000150

0800160c <lcd_clear>:

void lcd_clear (void)  // clear display
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff ff93 	bl	800153c <lcd_send_cmd>
	HAL_Delay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f001 feb0 	bl	800337c <HAL_Delay>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <lcd_init>:

void lcd_init ()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    // 4-bit mode initialisation

	HAL_Delay(50); // wait >40ms
 8001624:	2032      	movs	r0, #50	@ 0x32
 8001626:	f001 fea9 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x30);
 800162a:	2030      	movs	r0, #48	@ 0x30
 800162c:	f7ff ff86 	bl	800153c <lcd_send_cmd>
	HAL_Delay(5); // wait >4.1ms
 8001630:	2005      	movs	r0, #5
 8001632:	f001 fea3 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001636:	2030      	movs	r0, #48	@ 0x30
 8001638:	f7ff ff80 	bl	800153c <lcd_send_cmd>
	HAL_Delay(1); // wait >100us
 800163c:	2001      	movs	r0, #1
 800163e:	f001 fe9d 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001642:	2030      	movs	r0, #48	@ 0x30
 8001644:	f7ff ff7a 	bl	800153c <lcd_send_cmd>
	HAL_Delay(10);
 8001648:	200a      	movs	r0, #10
 800164a:	f001 fe97 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 800164e:	2020      	movs	r0, #32
 8001650:	f7ff ff74 	bl	800153c <lcd_send_cmd>
	HAL_Delay(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f001 fe91 	bl	800337c <HAL_Delay>

	 // display initialisation

	lcd_send_cmd(0x28); // function set DL=0 (4bit), N=1 (2 line display), F=0 (5x8 chars)
 800165a:	2028      	movs	r0, #40	@ 0x28
 800165c:	f7ff ff6e 	bl	800153c <lcd_send_cmd>
	HAL_Delay(10);
 8001660:	200a      	movs	r0, #10
 8001662:	f001 fe8b 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x08); // display off d,c,b=0
 8001666:	2008      	movs	r0, #8
 8001668:	f7ff ff68 	bl	800153c <lcd_send_cmd>
	HAL_Delay(10);
 800166c:	200a      	movs	r0, #10
 800166e:	f001 fe85 	bl	800337c <HAL_Delay>
	lcd_clear();
 8001672:	f7ff ffcb 	bl	800160c <lcd_clear>
	HAL_Delay(10);
 8001676:	200a      	movs	r0, #10
 8001678:	f001 fe80 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x06); // entry mode set, I/D=1 (inc cursor), S=0 (no shift
 800167c:	2006      	movs	r0, #6
 800167e:	f7ff ff5d 	bl	800153c <lcd_send_cmd>
	HAL_Delay(10);
 8001682:	200a      	movs	r0, #10
 8001684:	f001 fe7a 	bl	800337c <HAL_Delay>
	lcd_send_cmd(0x0C); // display on d=1, c,b=0
 8001688:	200c      	movs	r0, #12
 800168a:	f7ff ff57 	bl	800153c <lcd_send_cmd>
	HAL_Delay(10);
 800168e:	200a      	movs	r0, #10
 8001690:	f001 fe74 	bl	800337c <HAL_Delay>

	HAL_Delay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f001 fe71 	bl	800337c <HAL_Delay>

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	while (*str) {
 80016a6:	e007      	b.n	80016b8 <lcd_send_string+0x1a>
		lcd_send_data((uint8_t)(*str));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff79 	bl	80015a4 <lcd_send_data>
		str++;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3301      	adds	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
	while (*str) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f3      	bne.n	80016a8 <lcd_send_string+0xa>
	}
	HAL_Delay(1);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f001 fe5b 	bl	800337c <HAL_Delay>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <lcd_set_line_cursor>:

// line_num should be 0 for the 1st line, and 1 for the second line
void lcd_set_line_cursor (int line_num)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	switch (line_num) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <lcd_set_line_cursor+0x16>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d004      	beq.n	80016ec <lcd_set_line_cursor+0x1e>
		case 1:
			lcd_send_cmd(0xC0);
			break;
		default:
	}
}
 80016e2:	e007      	b.n	80016f4 <lcd_set_line_cursor+0x26>
			lcd_send_cmd(0x80);
 80016e4:	2080      	movs	r0, #128	@ 0x80
 80016e6:	f7ff ff29 	bl	800153c <lcd_send_cmd>
			break;
 80016ea:	e003      	b.n	80016f4 <lcd_set_line_cursor+0x26>
			lcd_send_cmd(0xC0);
 80016ec:	20c0      	movs	r0, #192	@ 0xc0
 80016ee:	f7ff ff25 	bl	800153c <lcd_send_cmd>
			break;
 80016f2:	bf00      	nop
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char* string)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    uint8_t len = strlen(string);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fd6b 	bl	80001e0 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, (uint8_t*) string, len, HAL_MAX_DELAY);
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	b29a      	uxth	r2, r3
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4803      	ldr	r0, [pc, #12]	@ (8001728 <send_uart+0x2c>)
 800171a:	f005 fe75 	bl	8007408 <HAL_UART_Transmit>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000028c 	.word	0x2000028c

0800172c <bufclear>:

void bufclear(char *buffer)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 1024; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e007      	b.n	800174a <bufclear+0x1e>
    {
        buffer[i] = '\0';
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 1024; i++)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001750:	dbf3      	blt.n	800173a <bufclear+0xe>
    }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <amplitude_threshold>:

// return 1 if the buffer contains amplitudes above the threshold, 0 otherwise
int amplitude_threshold(uint16_t *buffer, uint32_t buffer_len, uint16_t threshold)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < buffer_len; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e00c      	b.n	800178e <amplitude_threshold+0x2e>
		if (buffer[i] > threshold) {
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	88fa      	ldrh	r2, [r7, #6]
 8001780:	429a      	cmp	r2, r3
 8001782:	d201      	bcs.n	8001788 <amplitude_threshold+0x28>
			return 1;
 8001784:	2301      	movs	r3, #1
 8001786:	e007      	b.n	8001798 <amplitude_threshold+0x38>
	for (int i = 0; i < buffer_len; i++) {
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d8ee      	bhi.n	8001774 <amplitude_threshold+0x14>
		}
	}
	return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <apply_high_pass_filter>:

// transform "input" buffer audio data using high-pass filter into "output" buffer
void apply_high_pass_filter(uint16_t* input, uint16_t* output) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	f5ad 4d00 	sub.w	sp, sp, #32768	@ 0x8000
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	f843 0c0c 	str.w	r0, [r3, #-12]
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	f843 1c10 	str.w	r1, [r3, #-16]
    float32_t temp_input[ADC_BUF_LEN/2];
    float32_t temp_output[ADC_BUF_LEN/2];

    for (uint32_t i = 0; i < ADC_BUF_LEN/2; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 80017c4:	f102 020c 	add.w	r2, r2, #12
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e029      	b.n	8001820 <apply_high_pass_filter+0x7c>
        temp_input[i] = (float32_t)input[i];
 80017cc:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80017d0:	f103 030c 	add.w	r3, r3, #12
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	f107 0210 	add.w	r2, r7, #16
 80017dc:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 80017e0:	4413      	add	r3, r2
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ec:	f507 4380 	add.w	r3, r7, #16384	@ 0x4000
 80017f0:	f103 0310 	add.w	r3, r3, #16
 80017f4:	461a      	mov	r2, r3
 80017f6:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80017fa:	f103 030c 	add.w	r3, r3, #12
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b08      	subs	r3, #8
 8001806:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < ADC_BUF_LEN/2; i++) {
 800180a:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800180e:	f103 030c 	add.w	r3, r3, #12
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 800181a:	f102 020c 	add.w	r2, r2, #12
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001824:	f103 030c 	add.w	r3, r3, #12
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800182e:	d3cd      	bcc.n	80017cc <apply_high_pass_filter+0x28>
    }

    arm_fir_f32(&fir_filter, temp_input, temp_output, ADC_BUF_LEN/2);
 8001830:	f107 0210 	add.w	r2, r7, #16
 8001834:	3a08      	subs	r2, #8
 8001836:	f507 4180 	add.w	r1, r7, #16384	@ 0x4000
 800183a:	f101 0110 	add.w	r1, r1, #16
 800183e:	3908      	subs	r1, #8
 8001840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001844:	4820      	ldr	r0, [pc, #128]	@ (80018c8 <apply_high_pass_filter+0x124>)
 8001846:	f00a fad9 	bl	800bdfc <arm_fir_f32>

    for (uint32_t i = 0; i < ADC_BUF_LEN/2; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8001850:	f102 0208 	add.w	r2, r2, #8
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e028      	b.n	80018aa <apply_high_pass_filter+0x106>
        output[i] = (uint16_t)temp_output[i];
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	461a      	mov	r2, r3
 800185e:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001862:	f103 0308 	add.w	r3, r3, #8
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b08      	subs	r3, #8
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001876:	f103 0308 	add.w	r3, r3, #8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	f107 0210 	add.w	r2, r7, #16
 8001882:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8001886:	4413      	add	r3, r2
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	ee17 2a90 	vmov	r2, s15
 8001890:	b292      	uxth	r2, r2
 8001892:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < ADC_BUF_LEN/2; i++) {
 8001894:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001898:	f103 0308 	add.w	r3, r3, #8
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 80018a4:	f102 0208 	add.w	r2, r2, #8
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80018ae:	f103 0308 	add.w	r3, r3, #8
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018b8:	d3ce      	bcc.n	8001858 <apply_high_pass_filter+0xb4>
    }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	f507 4700 	add.w	r7, r7, #32768	@ 0x8000
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000b7d8 	.word	0x2000b7d8

080018cc <robot_effect>:

// apply 3 delays onto audio data from "input", result in "output"
void robot_effect(uint16_t* input, uint16_t* output) {
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < ADC_BUF_LEN/2; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e052      	b.n	8001982 <robot_effect+0xb6>
      if (i < 200) {
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2bc7      	cmp	r3, #199	@ 0xc7
 80018e0:	d80a      	bhi.n	80018f8 <robot_effect+0x2c>
        output[i] = input[i];
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	441a      	add	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	6839      	ldr	r1, [r7, #0]
 80018f0:	440b      	add	r3, r1
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	e041      	b.n	800197c <robot_effect+0xb0>
      } else if (i < 400) {
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80018fe:	d219      	bcs.n	8001934 <robot_effect+0x68>
        output[i] = (input[i] + input[i - 200]) / 2 ;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001912:	3bc8      	subs	r3, #200	@ 0xc8
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	440b      	add	r3, r1
 800191e:	0fda      	lsrs	r2, r3, #31
 8001920:	4413      	add	r3, r2
 8001922:	105b      	asrs	r3, r3, #1
 8001924:	4619      	mov	r1, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	b28a      	uxth	r2, r1
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	e023      	b.n	800197c <robot_effect+0xb0>
      } else {
        output[i] = (input[i] + input[i - 200] + input[i - 400]) / 3 ;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001946:	3bc8      	subs	r3, #200	@ 0xc8
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	18ca      	adds	r2, r1, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001958:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	440b      	add	r3, r1
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	4413      	add	r3, r2
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <robot_effect+0xcc>)
 8001968:	fb82 1203 	smull	r1, r2, r2, r3
 800196c:	17db      	asrs	r3, r3, #31
 800196e:	1ad1      	subs	r1, r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	b28a      	uxth	r2, r1
 800197a:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < ADC_BUF_LEN/2; i++) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001988:	d3a8      	bcc.n	80018dc <robot_effect+0x10>
      }
    }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	55555556 	.word	0x55555556

0800199c <apply_FFT>:

// do a fast fourier transform on "input", returns dominant frequent value
uint32_t apply_FFT(uint16_t* input) {
 800199c:	b580      	push	{r7, lr}
 800199e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	f843 0c1c 	str.w	r0, [r3, #-28]
    float32_t temp_output[FFT_SIZE];
    float32_t current_block[FFT_SIZE];
    uint32_t max_value = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019b2:	f102 021c 	add.w	r2, r2, #28
 80019b6:	6013      	str	r3, [r2, #0]
    uint32_t max_index = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019be:	f102 0218 	add.w	r2, r2, #24
 80019c2:	6013      	str	r3, [r2, #0]

    // Convert ADC input to float32 and copy to current_block
    for (uint32_t i = 4; i < FFT_SIZE; i++) {
 80019c4:	2304      	movs	r3, #4
 80019c6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019ca:	f102 0214 	add.w	r2, r2, #20
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e027      	b.n	8001a22 <apply_FFT+0x86>
        current_block[i] = (float32_t)input[i];
 80019d2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019d6:	f103 0314 	add.w	r3, r3, #20
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	f107 0220 	add.w	r2, r7, #32
 80019e2:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 80019e6:	4413      	add	r3, r2
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	461a      	mov	r2, r3
 80019f8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80019fc:	f103 0314 	add.w	r3, r3, #20
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b18      	subs	r3, #24
 8001a08:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 4; i < FFT_SIZE; i++) {
 8001a0c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a10:	f103 0314 	add.w	r3, r3, #20
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a1c:	f102 0214 	add.w	r2, r2, #20
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a26:	f103 0314 	add.w	r3, r3, #20
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a30:	d3cf      	bcc.n	80019d2 <apply_FFT+0x36>
    }

    // Perform FFT
    arm_rfft_fast_f32(&S, current_block, temp_output, 0);
 8001a32:	f607 0208 	addw	r2, r7, #2056	@ 0x808
 8001a36:	f107 0120 	add.w	r1, r7, #32
 8001a3a:	3918      	subs	r1, #24
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	485a      	ldr	r0, [pc, #360]	@ (8001ba8 <apply_FFT+0x20c>)
 8001a40:	f009 fdee 	bl	800b620 <arm_rfft_fast_f32>

    // Calculate magnitudes and find the max value
    for (uint32_t i = 1; i < FFT_SIZE / 2; i++) { // Ignoring the DC component at index 0
 8001a44:	2301      	movs	r3, #1
 8001a46:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a4a:	f102 0210 	add.w	r2, r2, #16
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e081      	b.n	8001b56 <apply_FFT+0x1ba>
        float32_t magnitude = sqrtf(temp_output[2 * i] * temp_output[2 * i] + temp_output[2 * i + 1] * temp_output[2 * i + 1]);;
 8001a52:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a56:	f103 0310 	add.w	r3, r3, #16
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a62:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	ed93 7a00 	vldr	s14, [r3]
 8001a6e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a72:	f103 0310 	add.w	r3, r3, #16
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a7e:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a92:	f103 0310 	add.w	r3, r3, #16
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001aa0:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ab0:	f103 0310 	add.w	r3, r3, #16
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001abe:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad6:	f00b fb71 	bl	800d1bc <sqrtf>
 8001ada:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ade:	f103 0308 	add.w	r3, r3, #8
 8001ae2:	ed83 0a00 	vstr	s0, [r3]
        if (magnitude > max_value) {
 8001ae6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001aea:	f103 031c 	add.w	r3, r3, #28
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001afc:	f103 0308 	add.w	r3, r3, #8
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	dd18      	ble.n	8001b40 <apply_FFT+0x1a4>
            max_value = magnitude;
 8001b0e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b12:	f103 0308 	add.w	r3, r3, #8
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b26:	f102 021c 	add.w	r2, r2, #28
 8001b2a:	6013      	str	r3, [r2, #0]
            max_index = i;
 8001b2c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b30:	f103 0310 	add.w	r3, r3, #16
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b3a:	f102 0218 	add.w	r2, r2, #24
 8001b3e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 1; i < FFT_SIZE / 2; i++) { // Ignoring the DC component at index 0
 8001b40:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b44:	f103 0310 	add.w	r3, r3, #16
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b50:	f102 0210 	add.w	r2, r2, #16
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b5a:	f103 0310 	add.w	r3, r3, #16
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2bff      	cmp	r3, #255	@ 0xff
 8001b62:	f67f af76 	bls.w	8001a52 <apply_FFT+0xb6>
        }
    }

    // Calculate the dominant frequency in Hz
    float32_t frequency_resolution = (float32_t)SAMPLING_RATE / FFT_SIZE;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <apply_FFT+0x210>)
 8001b68:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b6c:	f102 020c 	add.w	r2, r2, #12
 8001b70:	6013      	str	r3, [r2, #0]
    return (uint32_t)(max_index * frequency_resolution);
 8001b72:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b76:	f103 0318 	add.w	r3, r3, #24
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b84:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b88:	f103 030c 	add.w	r3, r3, #12
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b98:	ee17 3a90 	vmov	r3, s15
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000f7e4 	.word	0x2000f7e4
 8001bac:	420e0a00 	.word	0x420e0a00

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb6:	f001 fb6f 	bl	8003298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bba:	f000 f8f7 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bbe:	f000 fb23 	bl	8002208 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bc2:	f000 fb01 	bl	80021c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bc6:	f000 fad5 	bl	8002174 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001bca:	f000 f9d7 	bl	8001f7c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001bce:	f005 ffd7 	bl	8007b80 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001bd2:	f000 fa09 	bl	8001fe8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001bd6:	f000 f951 	bl	8001e7c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001bda:	f000 f9a1 	bl	8001f20 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001bde:	f000 fa51 	bl	8002084 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000); // Short delay to allow the SD card to settle
 8001be2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be6:	f001 fbc9 	bl	800337c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim3); // start 1Hz timer
 8001bea:	4855      	ldr	r0, [pc, #340]	@ (8001d40 <main+0x190>)
 8001bec:	f004 fd2a 	bl	8006644 <HAL_TIM_Base_Start_IT>

  // check that LCD device is ready
  HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c1, 0x4E, 2, 5000);
 8001bf0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	214e      	movs	r1, #78	@ 0x4e
 8001bf8:	4852      	ldr	r0, [pc, #328]	@ (8001d44 <main+0x194>)
 8001bfa:	f003 f84b 	bl	8004c94 <HAL_I2C_IsDeviceReady>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if (res != HAL_OK) {
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <main+0x5e>
	  send_uart("Failed to connect to LCD device\n");
 8001c08:	484f      	ldr	r0, [pc, #316]	@ (8001d48 <main+0x198>)
 8001c0a:	f7ff fd77 	bl	80016fc <send_uart>
  }

  // initialise LCD device
  lcd_init();
 8001c0e:	f7ff fd07 	bl	8001620 <lcd_init>
  lcd_clear();
 8001c12:	f7ff fcfb 	bl	800160c <lcd_clear>

  /* Mount SD card */
  fresult = f_mount(&fs, "", 1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	494c      	ldr	r1, [pc, #304]	@ (8001d4c <main+0x19c>)
 8001c1a:	484d      	ldr	r0, [pc, #308]	@ (8001d50 <main+0x1a0>)
 8001c1c:	f008 fad6 	bl	800a1cc <f_mount>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <main+0x1a4>)
 8001c26:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) {
 8001c28:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <main+0x1a4>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <main+0x88>
      send_uart("ERROR!!! in mounting SD CARD...\n\n");
 8001c30:	4849      	ldr	r0, [pc, #292]	@ (8001d58 <main+0x1a8>)
 8001c32:	f7ff fd63 	bl	80016fc <send_uart>
 8001c36:	e002      	b.n	8001c3e <main+0x8e>
  }
  else
      send_uart("SD CARD mounted successfully...\n\n");
 8001c38:	4848      	ldr	r0, [pc, #288]	@ (8001d5c <main+0x1ac>)
 8001c3a:	f7ff fd5f 	bl	80016fc <send_uart>

  /* Check free space */
  f_getfree("", &fre_clust, &pfs);
 8001c3e:	4a48      	ldr	r2, [pc, #288]	@ (8001d60 <main+0x1b0>)
 8001c40:	4948      	ldr	r1, [pc, #288]	@ (8001d64 <main+0x1b4>)
 8001c42:	4842      	ldr	r0, [pc, #264]	@ (8001d4c <main+0x19c>)
 8001c44:	f009 f969 	bl	800af1a <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c48:	4b45      	ldr	r3, [pc, #276]	@ (8001d60 <main+0x1b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	3b02      	subs	r3, #2
 8001c50:	4a43      	ldr	r2, [pc, #268]	@ (8001d60 <main+0x1b0>)
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	8952      	ldrh	r2, [r2, #10]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fd84 	bl	8000768 <__aeabi_ui2d>
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	4b40      	ldr	r3, [pc, #256]	@ (8001d68 <main+0x1b8>)
 8001c66:	f7fe fb13 	bl	8000290 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe fdf3 	bl	800085c <__aeabi_d2uiz>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a3c      	ldr	r2, [pc, #240]	@ (8001d6c <main+0x1bc>)
 8001c7a:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card total size:\t%lu\n", total);
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <main+0x1bc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	493b      	ldr	r1, [pc, #236]	@ (8001d70 <main+0x1c0>)
 8001c84:	483b      	ldr	r0, [pc, #236]	@ (8001d74 <main+0x1c4>)
 8001c86:	f00a fdf9 	bl	800c87c <siprintf>
  send_uart(buffer);
 8001c8a:	483a      	ldr	r0, [pc, #232]	@ (8001d74 <main+0x1c4>)
 8001c8c:	f7ff fd36 	bl	80016fc <send_uart>
  bufclear(buffer);
 8001c90:	4838      	ldr	r0, [pc, #224]	@ (8001d74 <main+0x1c4>)
 8001c92:	f7ff fd4b 	bl	800172c <bufclear>

  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001c96:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <main+0x1b0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	895b      	ldrh	r3, [r3, #10]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <main+0x1b4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fd5e 	bl	8000768 <__aeabi_ui2d>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <main+0x1b8>)
 8001cb2:	f7fe faed 	bl	8000290 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe fdcd 	bl	800085c <__aeabi_d2uiz>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001d78 <main+0x1c8>)
 8001cc6:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD card free space:\t%lu\n", free_space);
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d78 <main+0x1c8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	492b      	ldr	r1, [pc, #172]	@ (8001d7c <main+0x1cc>)
 8001cd0:	4828      	ldr	r0, [pc, #160]	@ (8001d74 <main+0x1c4>)
 8001cd2:	f00a fdd3 	bl	800c87c <siprintf>
  send_uart(buffer);
 8001cd6:	4827      	ldr	r0, [pc, #156]	@ (8001d74 <main+0x1c4>)
 8001cd8:	f7ff fd10 	bl	80016fc <send_uart>
  bufclear(buffer);
 8001cdc:	4825      	ldr	r0, [pc, #148]	@ (8001d74 <main+0x1c4>)
 8001cde:	f7ff fd25 	bl	800172c <bufclear>

  // create raw and process audio .wav files on the SD card
  int ret = create_new_wavfile(&wav_header_raw, wav_path_raw, 1);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4926      	ldr	r1, [pc, #152]	@ (8001d80 <main+0x1d0>)
 8001ce6:	4827      	ldr	r0, [pc, #156]	@ (8001d84 <main+0x1d4>)
 8001ce8:	f000 ffd6 	bl	8002c98 <create_new_wavfile>
 8001cec:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da02      	bge.n	8001cfa <main+0x14a>
	  send_uart("Failed to create new .wav file\n");
 8001cf4:	4824      	ldr	r0, [pc, #144]	@ (8001d88 <main+0x1d8>)
 8001cf6:	f7ff fd01 	bl	80016fc <send_uart>
  }
  ret = create_new_wavfile(&wav_header_mod, wav_path_mod, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4923      	ldr	r1, [pc, #140]	@ (8001d8c <main+0x1dc>)
 8001cfe:	4824      	ldr	r0, [pc, #144]	@ (8001d90 <main+0x1e0>)
 8001d00:	f000 ffca 	bl	8002c98 <create_new_wavfile>
 8001d04:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da02      	bge.n	8001d12 <main+0x162>
	  send_uart("Failed to create new .wav file\n");
 8001d0c:	481e      	ldr	r0, [pc, #120]	@ (8001d88 <main+0x1d8>)
 8001d0e:	f7ff fcf5 	bl	80016fc <send_uart>
  }

  // start ADC DMA continuous conversion
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, ADC_BUF_LEN);
 8001d12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d16:	491f      	ldr	r1, [pc, #124]	@ (8001d94 <main+0x1e4>)
 8001d18:	481f      	ldr	r0, [pc, #124]	@ (8001d98 <main+0x1e8>)
 8001d1a:	f001 fb97 	bl	800344c <HAL_ADC_Start_DMA>

  // initialise FFT/high-pass instances
  arm_fir_init_f32(&fir_filter, FILTER_TAP_NUM, fir_coeffs, fir_state, ADC_BUF_LEN/2);
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <main+0x1ec>)
 8001d26:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <main+0x1f0>)
 8001d28:	2105      	movs	r1, #5
 8001d2a:	481e      	ldr	r0, [pc, #120]	@ (8001da4 <main+0x1f4>)
 8001d2c:	f00a f856 	bl	800bddc <arm_fir_init_f32>
  arm_rfft_fast_init_f32(&S, FFT_SIZE);
 8001d30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d34:	481c      	ldr	r0, [pc, #112]	@ (8001da8 <main+0x1f8>)
 8001d36:	f009 fb8f 	bl	800b458 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <main+0x18a>
 8001d3e:	bf00      	nop
 8001d40:	200001fc 	.word	0x200001fc
 8001d44:	20000150 	.word	0x20000150
 8001d48:	0800d218 	.word	0x0800d218
 8001d4c:	0800d23c 	.word	0x0800d23c
 8001d50:	200002d4 	.word	0x200002d4
 8001d54:	2000130c 	.word	0x2000130c
 8001d58:	0800d240 	.word	0x0800d240
 8001d5c:	0800d264 	.word	0x0800d264
 8001d60:	20001710 	.word	0x20001710
 8001d64:	20001714 	.word	0x20001714
 8001d68:	3fe00000 	.word	0x3fe00000
 8001d6c:	20001718 	.word	0x20001718
 8001d70:	0800d288 	.word	0x0800d288
 8001d74:	20001310 	.word	0x20001310
 8001d78:	2000171c 	.word	0x2000171c
 8001d7c:	0800d2a4 	.word	0x0800d2a4
 8001d80:	20001778 	.word	0x20001778
 8001d84:	20001720 	.word	0x20001720
 8001d88:	0800d2c0 	.word	0x0800d2c0
 8001d8c:	20001794 	.word	0x20001794
 8001d90:	2000174c 	.word	0x2000174c
 8001d94:	200017b4 	.word	0x200017b4
 8001d98:	200000a8 	.word	0x200000a8
 8001d9c:	200077c8 	.word	0x200077c8
 8001da0:	20000004 	.word	0x20000004
 8001da4:	2000b7d8 	.word	0x2000b7d8
 8001da8:	2000f7e4 	.word	0x2000f7e4

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	@ 0x50
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	2230      	movs	r2, #48	@ 0x30
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00a fd7e 	bl	800c8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <SystemClock_Config+0xc8>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <SystemClock_Config+0xc8>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <SystemClock_Config+0xc8>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <SystemClock_Config+0xcc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <SystemClock_Config+0xcc>)
 8001df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <SystemClock_Config+0xcc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e10:	2310      	movs	r3, #16
 8001e12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e14:	2302      	movs	r3, #2
 8001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e20:	2348      	movs	r3, #72	@ 0x48
 8001e22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fab9 	bl	80053a8 <HAL_RCC_OscConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e3c:	f000 fbee 	bl	800261c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e40:	230f      	movs	r3, #15
 8001e42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e44:	2302      	movs	r3, #2
 8001e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fd1b 	bl	8005898 <HAL_RCC_ClockConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e68:	f000 fbd8 	bl	800261c <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3750      	adds	r7, #80	@ 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000

08001e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001e90:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <MX_ADC1_Init+0x9c>)
 8001e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001e96:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eae:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb6:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ebc:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001ebe:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <MX_ADC1_Init+0xa0>)
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001edc:	480d      	ldr	r0, [pc, #52]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001ede:	f001 fa71 	bl	80033c4 <HAL_ADC_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f000 fb98 	bl	800261c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_ADC1_Init+0x98>)
 8001efe:	f001 fb9f 	bl	8003640 <HAL_ADC_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f08:	f000 fb88 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200000a8 	.word	0x200000a8
 8001f18:	40012000 	.word	0x40012000
 8001f1c:	0f000001 	.word	0x0f000001

08001f20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f26:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <MX_I2C1_Init+0x54>)
 8001f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <MX_I2C1_Init+0x58>)
 8001f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 156;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f38:	229c      	movs	r2, #156	@ 0x9c
 8001f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_I2C1_Init+0x50>)
 8001f5e:	f002 fc57 	bl	8004810 <HAL_I2C_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f68:	f000 fb58 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000150 	.word	0x20000150
 8001f74:	40005400 	.word	0x40005400
 8001f78:	000186a0 	.word	0x000186a0

08001f7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001f82:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <MX_SPI2_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001f88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fc8:	220a      	movs	r2, #10
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_SPI2_Init+0x64>)
 8001fce:	f003 fe83 	bl	8005cd8 <HAL_SPI_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fd8:	f000 fb20 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200001a4 	.word	0x200001a4
 8001fe4:	40003800 	.word	0x40003800

08001fe8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_TIM3_Init+0x94>)
 8002006:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <MX_TIM3_Init+0x98>)
 8002008:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_TIM3_Init+0x94>)
 800200c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002010:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_TIM3_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <MX_TIM3_Init+0x94>)
 800201a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800201e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_TIM3_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_TIM3_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800202c:	4813      	ldr	r0, [pc, #76]	@ (800207c <MX_TIM3_Init+0x94>)
 800202e:	f004 fab9 	bl	80065a4 <HAL_TIM_Base_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002038:	f000 faf0 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <MX_TIM3_Init+0x94>)
 800204a:	f004 fd69 	bl	8006b20 <HAL_TIM_ConfigClockSource>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002054:	f000 fae2 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_TIM3_Init+0x94>)
 8002066:	f005 f8fd 	bl	8007264 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002070:	f000 fad4 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200001fc 	.word	0x200001fc
 8002080:	40000400 	.word	0x40000400

08002084 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	@ 0x38
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	615a      	str	r2, [r3, #20]
 80020b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002170 <MX_TIM5_Init+0xec>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 38399;
 80020ba:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020bc:	f249 52ff 	movw	r2, #38399	@ 0x95ff
 80020c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 14999;
 80020c8:	4b28      	ldr	r3, [pc, #160]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020ca:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80020ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d0:	4b26      	ldr	r3, [pc, #152]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b25      	ldr	r3, [pc, #148]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020dc:	4823      	ldr	r0, [pc, #140]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020de:	f004 fa61 	bl	80065a4 <HAL_TIM_Base_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80020e8:	f000 fa98 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020f6:	4619      	mov	r1, r3
 80020f8:	481c      	ldr	r0, [pc, #112]	@ (800216c <MX_TIM5_Init+0xe8>)
 80020fa:	f004 fd11 	bl	8006b20 <HAL_TIM_ConfigClockSource>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002104:	f000 fa8a 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002108:	4818      	ldr	r0, [pc, #96]	@ (800216c <MX_TIM5_Init+0xe8>)
 800210a:	f004 fafd 	bl	8006708 <HAL_TIM_PWM_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002114:	f000 fa82 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002120:	f107 0320 	add.w	r3, r7, #32
 8002124:	4619      	mov	r1, r3
 8002126:	4811      	ldr	r0, [pc, #68]	@ (800216c <MX_TIM5_Init+0xe8>)
 8002128:	f005 f89c 	bl	8007264 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002132:	f000 fa73 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	@ 0x60
 8002138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 12499;
 800213a:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 800213e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2204      	movs	r2, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	@ (800216c <MX_TIM5_Init+0xe8>)
 8002150:	f004 fc24 	bl	800699c <HAL_TIM_PWM_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 800215a:	f000 fa5f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800215e:	4803      	ldr	r0, [pc, #12]	@ (800216c <MX_TIM5_Init+0xe8>)
 8002160:	f000 fbf0 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	@ 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000244 	.word	0x20000244
 8002170:	40000c00 	.word	0x40000c00

08002174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <MX_USART2_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <MX_USART2_UART_Init+0x4c>)
 80021ac:	f005 f8dc 	bl	8007368 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f000 fa31 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000028c 	.word	0x2000028c
 80021c4:	40004400 	.word	0x40004400

080021c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <MX_DMA_Init+0x3c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <MX_DMA_Init+0x3c>)
 80021d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <MX_DMA_Init+0x3c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2102      	movs	r1, #2
 80021ee:	2038      	movs	r0, #56	@ 0x38
 80021f0:	f001 fdb1 	bl	8003d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021f4:	2038      	movs	r0, #56	@ 0x38
 80021f6:	f001 fdca 	bl	8003d8e <HAL_NVIC_EnableIRQ>

}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	@ 0x28
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a3a      	ldr	r2, [pc, #232]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b38      	ldr	r3, [pc, #224]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a33      	ldr	r2, [pc, #204]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <MX_GPIO_Init+0x108>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <MX_GPIO_Init+0x108>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a2c      	ldr	r2, [pc, #176]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <MX_GPIO_Init+0x108>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <MX_GPIO_Init+0x108>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2120      	movs	r1, #32
 8002292:	4820      	ldr	r0, [pc, #128]	@ (8002314 <MX_GPIO_Init+0x10c>)
 8002294:	f002 fa8a 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	2101      	movs	r1, #1
 800229c:	481e      	ldr	r0, [pc, #120]	@ (8002318 <MX_GPIO_Init+0x110>)
 800229e:	f002 fa85 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4818      	ldr	r0, [pc, #96]	@ (800231c <MX_GPIO_Init+0x114>)
 80022ba:	f002 f8f3 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022be:	2320      	movs	r3, #32
 80022c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c2:	2301      	movs	r3, #1
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	480f      	ldr	r0, [pc, #60]	@ (8002314 <MX_GPIO_Init+0x10c>)
 80022d6:	f002 f8e5 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80022da:	2301      	movs	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4809      	ldr	r0, [pc, #36]	@ (8002318 <MX_GPIO_Init+0x110>)
 80022f2:	f002 f8d7 	bl	80044a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2101      	movs	r1, #1
 80022fa:	2028      	movs	r0, #40	@ 0x28
 80022fc:	f001 fd2b 	bl	8003d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002300:	2028      	movs	r0, #40	@ 0x28
 8002302:	f001 fd44 	bl	8003d8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	@ 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800

08002320 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	// high-pass on raw audio data as a baseline
    apply_high_pass_filter(&adc_buffer[0], filtered_adc_buf1);
 8002328:	492e      	ldr	r1, [pc, #184]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 800232a:	482f      	ldr	r0, [pc, #188]	@ (80023e8 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 800232c:	f7ff fa3a 	bl	80017a4 <apply_high_pass_filter>

    // display baseline audio data if it exceeds the audio threshold (sound is detected)
    if (amplitude_threshold(filtered_adc_buf1, ADC_BUF_LEN/2, 1850) == 1) {
 8002330:	f240 723a 	movw	r2, #1850	@ 0x73a
 8002334:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002338:	482a      	ldr	r0, [pc, #168]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 800233a:	f7ff fa11 	bl	8001760 <amplitude_threshold>
 800233e:	4603      	mov	r3, r0
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_ADC_ConvHalfCpltCallback+0x32>
    	HAL_UART_Transmit(&huart2, (uint8_t*) filtered_adc_buf1, (ADC_BUF_LEN/2)*sizeof(uint16_t), 25);
 8002344:	2319      	movs	r3, #25
 8002346:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800234a:	4926      	ldr	r1, [pc, #152]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 800234c:	4827      	ldr	r0, [pc, #156]	@ (80023ec <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 800234e:	f005 f85b 	bl	8007408 <HAL_UART_Transmit>
	}

    // if we're in privacy mode, add robot effect and then high-pass it again
    if (privacy_mode) {
 8002352:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <HAL_ADC_ConvHalfCpltCallback+0x58>
        robot_effect(filtered_adc_buf1, robot_buffer);
 800235a:	4926      	ldr	r1, [pc, #152]	@ (80023f4 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 800235c:	4821      	ldr	r0, [pc, #132]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 800235e:	f7ff fab5 	bl	80018cc <robot_effect>
        apply_high_pass_filter(robot_buffer, filtered_adc_buf1); // Apply HPF again after robot effect
 8002362:	4920      	ldr	r1, [pc, #128]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 8002364:	4823      	ldr	r0, [pc, #140]	@ (80023f4 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8002366:	f7ff fa1d 	bl	80017a4 <apply_high_pass_filter>
        dominant_filtered_frequency = apply_FFT(filtered_adc_buf1); // keep track of dominant frequency for LCD screen
 800236a:	481e      	ldr	r0, [pc, #120]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 800236c:	f7ff fb16 	bl	800199c <apply_FFT>
 8002370:	4603      	mov	r3, r0
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e005      	b.n	8002384 <HAL_ADC_ConvHalfCpltCallback+0x64>

	// normal mode just keep track of dominant frequency for LCD screen, no further processing needed
    } else {
        dominant_filtered_frequency = apply_FFT(filtered_adc_buf1);
 8002378:	481a      	ldr	r0, [pc, #104]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 800237a:	f7ff fb0f 	bl	800199c <apply_FFT>
 800237e:	4603      	mov	r3, r0
 8002380:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8002382:	6013      	str	r3, [r2, #0]
    }
    // get dominant frequency of raw audio data (before even the initial high-pass) for comparison.
    dominant_unfiltered_frequency = apply_FFT(adc_buffer);
 8002384:	4818      	ldr	r0, [pc, #96]	@ (80023e8 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8002386:	f7ff fb09 	bl	800199c <apply_FFT>
 800238a:	4603      	mov	r3, r0
 800238c:	4a1b      	ldr	r2, [pc, #108]	@ (80023fc <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 800238e:	6013      	str	r3, [r2, #0]

    // update current max dominant frequencies (for LCD screen, since it's only updated every second)
    if (dominant_unfiltered_frequency > max_dominant_unfiltered_frequency) {
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d903      	bls.n	80023a4 <HAL_ADC_ConvHalfCpltCallback+0x84>
      max_dominant_unfiltered_frequency = dominant_unfiltered_frequency;
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a17      	ldr	r2, [pc, #92]	@ (8002400 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 80023a2:	6013      	str	r3, [r2, #0]
    }
    if (dominant_filtered_frequency > max_dominant_filtered_frequency) {
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <HAL_ADC_ConvHalfCpltCallback+0xe4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d903      	bls.n	80023b8 <HAL_ADC_ConvHalfCpltCallback+0x98>
      max_dominant_filtered_frequency = dominant_filtered_frequency;
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a13      	ldr	r2, [pc, #76]	@ (8002404 <HAL_ADC_ConvHalfCpltCallback+0xe4>)
 80023b6:	6013      	str	r3, [r2, #0]
    }
    // update both raw and modified .wav files on the SD card
    if (write_only_mod == 0) {
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_ADC_ConvHalfCpltCallback+0xe8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <HAL_ADC_ConvHalfCpltCallback+0xae>
    	update_wavfile(wav_path_raw, &wav_header_raw, adc_buffer, (ADC_BUF_LEN/2)*sizeof(uint16_t));
 80023c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c4:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 80023c6:	4911      	ldr	r1, [pc, #68]	@ (800240c <HAL_ADC_ConvHalfCpltCallback+0xec>)
 80023c8:	4811      	ldr	r0, [pc, #68]	@ (8002410 <HAL_ADC_ConvHalfCpltCallback+0xf0>)
 80023ca:	f000 fdf1 	bl	8002fb0 <update_wavfile>
    }
    update_wavfile(wav_path_mod, &wav_header_mod, filtered_adc_buf1, (ADC_BUF_LEN/2)*sizeof(uint16_t));
 80023ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 80023d4:	490f      	ldr	r1, [pc, #60]	@ (8002414 <HAL_ADC_ConvHalfCpltCallback+0xf4>)
 80023d6:	4810      	ldr	r0, [pc, #64]	@ (8002418 <HAL_ADC_ConvHalfCpltCallback+0xf8>)
 80023d8:	f000 fdea 	bl	8002fb0 <update_wavfile>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000b7e4 	.word	0x2000b7e4
 80023e8:	200017b4 	.word	0x200017b4
 80023ec:	2000028c 	.word	0x2000028c
 80023f0:	200077b4 	.word	0x200077b4
 80023f4:	200057b4 	.word	0x200057b4
 80023f8:	200077c4 	.word	0x200077c4
 80023fc:	200077c0 	.word	0x200077c0
 8002400:	200077b8 	.word	0x200077b8
 8002404:	200077bc 	.word	0x200077bc
 8002408:	200017b0 	.word	0x200017b0
 800240c:	20001720 	.word	0x20001720
 8002410:	20001778 	.word	0x20001778
 8002414:	2000174c 	.word	0x2000174c
 8002418:	20001794 	.word	0x20001794

0800241c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	// high-pass on raw audio data as a baseline
    apply_high_pass_filter(&adc_buffer[ADC_BUF_LEN/2], filtered_adc_buf2);
 8002424:	492e      	ldr	r1, [pc, #184]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002426:	482f      	ldr	r0, [pc, #188]	@ (80024e4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002428:	f7ff f9bc 	bl	80017a4 <apply_high_pass_filter>

    // display baseline audio data if it exceeds the audio threshold (sound is detected)
    if (amplitude_threshold(filtered_adc_buf2, ADC_BUF_LEN/2, 1850) == 1) {
 800242c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8002430:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002434:	482a      	ldr	r0, [pc, #168]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002436:	f7ff f993 	bl	8001760 <amplitude_threshold>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d106      	bne.n	800244e <HAL_ADC_ConvCpltCallback+0x32>
    	HAL_UART_Transmit(&huart2, (uint8_t*) filtered_adc_buf2, (ADC_BUF_LEN/2)*sizeof(uint16_t), 25);
 8002440:	2319      	movs	r3, #25
 8002442:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002446:	4926      	ldr	r1, [pc, #152]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002448:	4827      	ldr	r0, [pc, #156]	@ (80024e8 <HAL_ADC_ConvCpltCallback+0xcc>)
 800244a:	f004 ffdd 	bl	8007408 <HAL_UART_Transmit>
    }

    // if we're in privacy mode, add robot effect and then high-pass it again
    if (privacy_mode) {
 800244e:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <HAL_ADC_ConvCpltCallback+0xd0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00e      	beq.n	8002474 <HAL_ADC_ConvCpltCallback+0x58>
        robot_effect(filtered_adc_buf2, robot_buffer);
 8002456:	4926      	ldr	r1, [pc, #152]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002458:	4821      	ldr	r0, [pc, #132]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 800245a:	f7ff fa37 	bl	80018cc <robot_effect>
        apply_high_pass_filter(robot_buffer, filtered_adc_buf2); // Apply HPF again after robot effect
 800245e:	4920      	ldr	r1, [pc, #128]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002460:	4823      	ldr	r0, [pc, #140]	@ (80024f0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002462:	f7ff f99f 	bl	80017a4 <apply_high_pass_filter>
        dominant_filtered_frequency = apply_FFT(filtered_adc_buf2); // keep track of dominant frequency for LCD screen
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002468:	f7ff fa98 	bl	800199c <apply_FFT>
 800246c:	4603      	mov	r3, r0
 800246e:	4a21      	ldr	r2, [pc, #132]	@ (80024f4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e005      	b.n	8002480 <HAL_ADC_ConvCpltCallback+0x64>

	// normal mode just keep track of dominant frequency for LCD screen, no further processing needed
    } else {
        dominant_filtered_frequency = apply_FFT(filtered_adc_buf2);
 8002474:	481a      	ldr	r0, [pc, #104]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8002476:	f7ff fa91 	bl	800199c <apply_FFT>
 800247a:	4603      	mov	r3, r0
 800247c:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_ADC_ConvCpltCallback+0xd8>)
 800247e:	6013      	str	r3, [r2, #0]
    }
    // get dominant frequency of raw audio data (before even the initial high-pass) for comparison.
    dominant_unfiltered_frequency = apply_FFT(&adc_buffer[ADC_BUF_LEN/2]);
 8002480:	4818      	ldr	r0, [pc, #96]	@ (80024e4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002482:	f7ff fa8b 	bl	800199c <apply_FFT>
 8002486:	4603      	mov	r3, r0
 8002488:	4a1b      	ldr	r2, [pc, #108]	@ (80024f8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800248a:	6013      	str	r3, [r2, #0]

    // update current max dominant frequencies (for LCD screen, since it's only updated every second)
    if (dominant_unfiltered_frequency > max_dominant_unfiltered_frequency) {
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_ADC_ConvCpltCallback+0xe0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d903      	bls.n	80024a0 <HAL_ADC_ConvCpltCallback+0x84>
      max_dominant_unfiltered_frequency = dominant_unfiltered_frequency;
 8002498:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_ADC_ConvCpltCallback+0xe0>)
 800249e:	6013      	str	r3, [r2, #0]
    }
    if (dominant_filtered_frequency > max_dominant_filtered_frequency) {
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_ADC_ConvCpltCallback+0xd8>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <HAL_ADC_ConvCpltCallback+0xe4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d903      	bls.n	80024b4 <HAL_ADC_ConvCpltCallback+0x98>
      max_dominant_filtered_frequency = dominant_filtered_frequency;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_ADC_ConvCpltCallback+0xd8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a13      	ldr	r2, [pc, #76]	@ (8002500 <HAL_ADC_ConvCpltCallback+0xe4>)
 80024b2:	6013      	str	r3, [r2, #0]
    }
    // update both raw and modified .wav files on the SD card
    if (write_only_mod == 0) {
 80024b4:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <HAL_ADC_ConvCpltCallback+0xe8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_ADC_ConvCpltCallback+0xae>
    	update_wavfile(wav_path_raw, &wav_header_raw, &adc_buffer[ADC_BUF_LEN/2], (ADC_BUF_LEN/2)*sizeof(uint16_t));
 80024bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024c0:	4a08      	ldr	r2, [pc, #32]	@ (80024e4 <HAL_ADC_ConvCpltCallback+0xc8>)
 80024c2:	4911      	ldr	r1, [pc, #68]	@ (8002508 <HAL_ADC_ConvCpltCallback+0xec>)
 80024c4:	4811      	ldr	r0, [pc, #68]	@ (800250c <HAL_ADC_ConvCpltCallback+0xf0>)
 80024c6:	f000 fd73 	bl	8002fb0 <update_wavfile>
    }
    update_wavfile(wav_path_mod, &wav_header_mod, filtered_adc_buf2, (ADC_BUF_LEN/2)*sizeof(uint16_t));
 80024ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ce:	4a04      	ldr	r2, [pc, #16]	@ (80024e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 80024d0:	490f      	ldr	r1, [pc, #60]	@ (8002510 <HAL_ADC_ConvCpltCallback+0xf4>)
 80024d2:	4810      	ldr	r0, [pc, #64]	@ (8002514 <HAL_ADC_ConvCpltCallback+0xf8>)
 80024d4:	f000 fd6c 	bl	8002fb0 <update_wavfile>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2000d7e4 	.word	0x2000d7e4
 80024e4:	200037b4 	.word	0x200037b4
 80024e8:	2000028c 	.word	0x2000028c
 80024ec:	200077b4 	.word	0x200077b4
 80024f0:	200057b4 	.word	0x200057b4
 80024f4:	200077c4 	.word	0x200077c4
 80024f8:	200077c0 	.word	0x200077c0
 80024fc:	200077b8 	.word	0x200077b8
 8002500:	200077bc 	.word	0x200077bc
 8002504:	200017b0 	.word	0x200017b0
 8002508:	20001720 	.word	0x20001720
 800250c:	20001778 	.word	0x20001778
 8002510:	2000174c 	.word	0x2000174c
 8002514:	20001794 	.word	0x20001794

08002518 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
	// if the blue push-button is pressed, toggle the privacy mode
    if (GPIO_Pin == B1_Pin) {
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002528:	d114      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x3c>
        privacy_mode = !privacy_mode;
 800252a:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_GPIO_EXTI_Callback+0x44>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_GPIO_EXTI_Callback+0x44>)
 800253c:	601a      	str	r2, [r3, #0]
        if (privacy_mode) {
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <HAL_GPIO_EXTI_Callback+0x44>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_EXTI_Callback+0x36>
            send_uart("Privacy Mode Enabled\n");
 8002546:	4806      	ldr	r0, [pc, #24]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x48>)
 8002548:	f7ff f8d8 	bl	80016fc <send_uart>
        } else {
            send_uart("Privacy Mode Disabled\n");
        }
    }
}
 800254c:	e002      	b.n	8002554 <HAL_GPIO_EXTI_Callback+0x3c>
            send_uart("Privacy Mode Disabled\n");
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002550:	f7ff f8d4 	bl	80016fc <send_uart>
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200077b4 	.word	0x200077b4
 8002560:	0800d2e0 	.word	0x0800d2e0
 8002564:	0800d2f8 	.word	0x0800d2f8

08002568 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	// if the 1Hz timer period has ellapsed (1 second has passed):
	// update the LCD screen with the dominant frequencies of the original and modified audio signal
	// and display the current mode
	if(htim->Instance == htim3.Instance) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d13d      	bne.n	80025f8 <HAL_TIM_PeriodElapsedCallback+0x90>
		char line_buf[17];
		lcd_clear();
 800257c:	f7ff f846 	bl	800160c <lcd_clear>
		HAL_Delay(10);
 8002580:	200a      	movs	r0, #10
 8002582:	f000 fefb 	bl	800337c <HAL_Delay>
		lcd_set_line_cursor(0);
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff f8a1 	bl	80016ce <lcd_set_line_cursor>
		sprintf(line_buf, "OG: %lu MOD: %lu", max_dominant_unfiltered_frequency, max_dominant_filtered_frequency);
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f107 000c 	add.w	r0, r7, #12
 8002598:	491c      	ldr	r1, [pc, #112]	@ (800260c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800259a:	f00a f96f 	bl	800c87c <siprintf>
		HAL_Delay(10);
 800259e:	200a      	movs	r0, #10
 80025a0:	f000 feec 	bl	800337c <HAL_Delay>
		lcd_send_string(line_buf);
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f878 	bl	800169e <lcd_send_string>
		HAL_Delay(10);
 80025ae:	200a      	movs	r0, #10
 80025b0:	f000 fee4 	bl	800337c <HAL_Delay>
		if (privacy_mode) {
 80025b4:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_TIM_PeriodElapsedCallback+0x62>
			sprintf(line_buf, "Privacy Mode ON");
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	4914      	ldr	r1, [pc, #80]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00a f95a 	bl	800c87c <siprintf>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		} else {
			sprintf(line_buf, "Privacy Mode OFF");
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	4912      	ldr	r1, [pc, #72]	@ (8002618 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00a f953 	bl	800c87c <siprintf>
		}
		lcd_set_line_cursor(1);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7ff f879 	bl	80016ce <lcd_set_line_cursor>
		HAL_Delay(10);
 80025dc:	200a      	movs	r0, #10
 80025de:	f000 fecd 	bl	800337c <HAL_Delay>
		lcd_send_string(line_buf);
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f859 	bl	800169e <lcd_send_string>

		max_dominant_filtered_frequency = 0;
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
		max_dominant_unfiltered_frequency = 0;
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
	}
}
 80025f8:	bf00      	nop
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200001fc 	.word	0x200001fc
 8002604:	200077b8 	.word	0x200077b8
 8002608:	200077bc 	.word	0x200077bc
 800260c:	0800d310 	.word	0x0800d310
 8002610:	200077b4 	.word	0x200077b4
 8002614:	0800d324 	.word	0x0800d324
 8002618:	0800d334 	.word	0x0800d334

0800261c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002620:	b672      	cpsid	i
}
 8002622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <Error_Handler+0x8>

08002628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <HAL_MspInit+0x4c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <HAL_MspInit+0x4c>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263c:	6453      	str	r3, [r2, #68]	@ 0x44
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <HAL_MspInit+0x4c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_MspInit+0x4c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_MspInit+0x4c>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_MspInit+0x4c>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002666:	2005      	movs	r0, #5
 8002668:	f001 fb6a 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2f      	ldr	r2, [pc, #188]	@ (8002754 <HAL_ADC_MspInit+0xdc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d157      	bne.n	800274a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b2e      	ldr	r3, [pc, #184]	@ (8002758 <HAL_ADC_MspInit+0xe0>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002758 <HAL_ADC_MspInit+0xe0>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_ADC_MspInit+0xe0>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <HAL_ADC_MspInit+0xe0>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a26      	ldr	r2, [pc, #152]	@ (8002758 <HAL_ADC_MspInit+0xe0>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_ADC_MspInit+0xe0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d2:	2301      	movs	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d6:	2303      	movs	r3, #3
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	481d      	ldr	r0, [pc, #116]	@ (800275c <HAL_ADC_MspInit+0xe4>)
 80026e6:	f001 fedd 	bl	80044a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 80026ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002764 <HAL_ADC_MspInit+0xec>)
 80026ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026fc:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002702:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 8002704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 800270c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002712:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 8002714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800271a:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 800271c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002720:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002722:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002728:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800272e:	480c      	ldr	r0, [pc, #48]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 8002730:	f001 fb48 	bl	8003dc4 <HAL_DMA_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800273a:	f7ff ff6f 	bl	800261c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a07      	ldr	r2, [pc, #28]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 8002742:	639a      	str	r2, [r3, #56]	@ 0x38
 8002744:	4a06      	ldr	r2, [pc, #24]	@ (8002760 <HAL_ADC_MspInit+0xe8>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	@ 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012000 	.word	0x40012000
 8002758:	40023800 	.word	0x40023800
 800275c:	40020000 	.word	0x40020000
 8002760:	200000f0 	.word	0x200000f0
 8002764:	40026410 	.word	0x40026410

08002768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <HAL_I2C_MspInit+0x84>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d12b      	bne.n	80027e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_I2C_MspInit+0x88>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_I2C_MspInit+0x88>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <HAL_I2C_MspInit+0x88>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a6:	23c0      	movs	r3, #192	@ 0xc0
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027aa:	2312      	movs	r3, #18
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b6:	2304      	movs	r3, #4
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <HAL_I2C_MspInit+0x8c>)
 80027c2:	f001 fe6f 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_I2C_MspInit+0x88>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	4a08      	ldr	r2, [pc, #32]	@ (80027f0 <HAL_I2C_MspInit+0x88>)
 80027d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_I2C_MspInit+0x88>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	@ 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40005400 	.word	0x40005400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020400 	.word	0x40020400

080027f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a28      	ldr	r2, [pc, #160]	@ (80028b8 <HAL_SPI_MspInit+0xc0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d14a      	bne.n	80028b0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a26      	ldr	r2, [pc, #152]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b24      	ldr	r3, [pc, #144]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_SPI_MspInit+0xc4>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800286e:	230c      	movs	r3, #12
 8002870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800287e:	2305      	movs	r3, #5
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	480d      	ldr	r0, [pc, #52]	@ (80028c0 <HAL_SPI_MspInit+0xc8>)
 800288a:	f001 fe0b 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028a0:	2305      	movs	r3, #5
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	@ (80028c4 <HAL_SPI_MspInit+0xcc>)
 80028ac:	f001 fdfa 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	@ 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40003800 	.word	0x40003800
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020400 	.word	0x40020400

080028c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <HAL_TIM_Base_MspInit+0x70>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d116      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_TIM_Base_MspInit+0x74>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	4a16      	ldr	r2, [pc, #88]	@ (800293c <HAL_TIM_Base_MspInit+0x74>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <HAL_TIM_Base_MspInit+0x74>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2102      	movs	r1, #2
 80028fa:	201d      	movs	r0, #29
 80028fc:	f001 fa2b 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002900:	201d      	movs	r0, #29
 8002902:	f001 fa44 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002906:	e012      	b.n	800292e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0c      	ldr	r2, [pc, #48]	@ (8002940 <HAL_TIM_Base_MspInit+0x78>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10d      	bne.n	800292e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <HAL_TIM_Base_MspInit+0x74>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_TIM_Base_MspInit+0x74>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_TIM_Base_MspInit+0x74>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40000400 	.word	0x40000400
 800293c:	40023800 	.word	0x40023800
 8002940:	40000c00 	.word	0x40000c00

08002944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <HAL_TIM_MspPostInit+0x68>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d11d      	bne.n	80029a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <HAL_TIM_MspPostInit+0x6c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a10      	ldr	r2, [pc, #64]	@ (80029b0 <HAL_TIM_MspPostInit+0x6c>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <HAL_TIM_MspPostInit+0x6c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002982:	2302      	movs	r3, #2
 8002984:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002992:	2302      	movs	r3, #2
 8002994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4619      	mov	r1, r3
 800299c:	4805      	ldr	r0, [pc, #20]	@ (80029b4 <HAL_TIM_MspPostInit+0x70>)
 800299e:	f001 fd81 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80029a2:	bf00      	nop
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020000 	.word	0x40020000

080029b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	@ 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_UART_MspInit+0x84>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d12b      	bne.n	8002a32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_UART_MspInit+0x88>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_UART_MspInit+0x88>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_UART_MspInit+0x88>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_UART_MspInit+0x88>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	4a10      	ldr	r2, [pc, #64]	@ (8002a40 <HAL_UART_MspInit+0x88>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <HAL_UART_MspInit+0x88>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a12:	230c      	movs	r3, #12
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a22:	2307      	movs	r3, #7
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <HAL_UART_MspInit+0x8c>)
 8002a2e:	f001 fd39 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40004400 	.word	0x40004400
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020000 	.word	0x40020000

08002a48 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	if (Timer1 > 0 ){
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <SDTimer_Handler+0x40>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <SDTimer_Handler+0x1c>
		Timer1--;
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <SDTimer_Handler+0x40>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <SDTimer_Handler+0x40>)
 8002a62:	701a      	strb	r2, [r3, #0]
	}
	if (Timer2 >0){
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <SDTimer_Handler+0x44>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <SDTimer_Handler+0x34>
		Timer2--;
 8002a6e:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <SDTimer_Handler+0x44>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <SDTimer_Handler+0x44>)
 8002a7a:	701a      	strb	r2, [r3, #0]
	}
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000f7fd 	.word	0x2000f7fd
 8002a8c:	2000f7fe 	.word	0x2000f7fe

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <NMI_Handler+0x4>

08002a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <SysTick_Handler+0x30>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <SysTick_Handler+0x30>)
 8002af4:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >=10)
 8002af6:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <SysTick_Handler+0x30>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	d904      	bls.n	8002b0a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <SysTick_Handler+0x30>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002b06:	f7ff ff9f 	bl	8002a48 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f000 fc17 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000f7fc 	.word	0x2000f7fc

08002b18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <TIM3_IRQHandler+0x10>)
 8002b1e:	f003 fe4c 	bl	80067ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200001fc 	.word	0x200001fc

08002b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b34:	f001 fe54 	bl	80047e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b40:	4802      	ldr	r0, [pc, #8]	@ (8002b4c <DMA2_Stream0_IRQHandler+0x10>)
 8002b42:	f001 fa45 	bl	8003fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200000f0 	.word	0x200000f0

08002b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b58:	4a14      	ldr	r2, [pc, #80]	@ (8002bac <_sbrk+0x5c>)
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <_sbrk+0x60>)
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b64:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <_sbrk+0x64>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <_sbrk+0x68>)
 8002b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d207      	bcs.n	8002b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b80:	f009 fea4 	bl	800c8cc <__errno>
 8002b84:	4603      	mov	r3, r0
 8002b86:	220c      	movs	r2, #12
 8002b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	e009      	b.n	8002ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b90:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <_sbrk+0x64>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <_sbrk+0x64>)
 8002ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20020000 	.word	0x20020000
 8002bb0:	00000400 	.word	0x00000400
 8002bb4:	2000f800 	.word	0x2000f800
 8002bb8:	2000fb90 	.word	0x2000fb90

08002bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <SystemInit+0x20>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <SystemInit+0x20>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <init_wav_header>:
#define SUBCHUNK1_SIZE 16



void init_wav_header(wav_header_t *wav_header)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	// Init RIFF Header
	// big-endian format
	wav_header->ChunkID[0] = 'R';
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2252      	movs	r2, #82	@ 0x52
 8002bec:	701a      	strb	r2, [r3, #0]
	wav_header->ChunkID[1] = 'I';
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2249      	movs	r2, #73	@ 0x49
 8002bf2:	705a      	strb	r2, [r3, #1]
	wav_header->ChunkID[2] = 'F';
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2246      	movs	r2, #70	@ 0x46
 8002bf8:	709a      	strb	r2, [r3, #2]
	wav_header->ChunkID[3] = 'F';
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2246      	movs	r2, #70	@ 0x46
 8002bfe:	70da      	strb	r2, [r3, #3]

	wav_header->ChunkSize = 4 + (8 + SUBCHUNK1_SIZE) + (8 + 0); // subchunk2size is 0 as a placeholder
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	@ 0x24
 8002c04:	605a      	str	r2, [r3, #4]

	// big-endian format
	wav_header->Format[0] = 'W';
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2257      	movs	r2, #87	@ 0x57
 8002c0a:	721a      	strb	r2, [r3, #8]
	wav_header->Format[1] = 'A';
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2241      	movs	r2, #65	@ 0x41
 8002c10:	725a      	strb	r2, [r3, #9]
	wav_header->Format[2] = 'V';
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2256      	movs	r2, #86	@ 0x56
 8002c16:	729a      	strb	r2, [r3, #10]
	wav_header->Format[3] = 'E';
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2245      	movs	r2, #69	@ 0x45
 8002c1c:	72da      	strb	r2, [r3, #11]

	// Init "fmt " Subchunk
	// big-endian format
	wav_header->Subchunk1ID[0] = 'f';
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2266      	movs	r2, #102	@ 0x66
 8002c22:	731a      	strb	r2, [r3, #12]
	wav_header->Subchunk1ID[1] = 'm';
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	226d      	movs	r2, #109	@ 0x6d
 8002c28:	735a      	strb	r2, [r3, #13]
	wav_header->Subchunk1ID[2] = 't';
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2274      	movs	r2, #116	@ 0x74
 8002c2e:	739a      	strb	r2, [r3, #14]
	wav_header->Subchunk1ID[3] = ' ';
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	73da      	strb	r2, [r3, #15]

	wav_header->Subchunk1Size = SUBCHUNK1_SIZE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	611a      	str	r2, [r3, #16]

	wav_header->AudioFormat = AUDIO_FORMAT; // 1: PCM, other values indicate some kind of compression
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	829a      	strh	r2, [r3, #20]
	wav_header->NumChannels = NUM_CHANNELS; // 1: Mono, 2: Stereo, etc.
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	82da      	strh	r2, [r3, #22]
	wav_header->SampleRate = SAMPLE_RATE; // 18.2KHz
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f244 7205 	movw	r2, #18181	@ 0x4705
 8002c4e:	619a      	str	r2, [r3, #24]
	wav_header->BitsPerSample = BITS_PER_SAMPLE; // 12 bits per sample, but we're using 16 for block alignment
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2210      	movs	r2, #16
 8002c54:	845a      	strh	r2, [r3, #34]	@ 0x22
	wav_header->ByteRate = SAMPLE_RATE * NUM_CHANNELS * (BITS_PER_SAMPLE/8);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f648 620a 	movw	r2, #36362	@ 0x8e0a
 8002c5c:	61da      	str	r2, [r3, #28]
	wav_header->BlockAlign = NUM_CHANNELS * (BITS_PER_SAMPLE/8);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	841a      	strh	r2, [r3, #32]

	// Init "data" Subchunk
	// big-endian format
	wav_header->Subchunk2ID[0] = 'd';
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2264      	movs	r2, #100	@ 0x64
 8002c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	wav_header->Subchunk2ID[1] = 'a';
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2261      	movs	r2, #97	@ 0x61
 8002c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	wav_header->Subchunk2ID[2] = 't';
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2274      	movs	r2, #116	@ 0x74
 8002c78:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	wav_header->Subchunk2ID[3] = 'a';
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2261      	movs	r2, #97	@ 0x61
 8002c80:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

	wav_header->Subchunk2Size = 0; // Placeholder
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <create_new_wavfile>:


// return 0 if successful, -1 if generic failure, -2 if failure with a partial write
int create_new_wavfile(wav_header_t *wav_h, char *path, int is_raw)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ca6:	f843 0c44 	str.w	r0, [r3, #-68]
 8002caa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cae:	f843 1c48 	str.w	r1, [r3, #-72]
 8002cb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cb6:	f843 2c4c 	str.w	r2, [r3, #-76]
	init_wav_header(wav_h);
 8002cba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cbe:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8002cc2:	f7ff ff8d 	bl	8002be0 <init_wav_header>

	// save the wav_header to the SD card
	FRESULT fresult;
	FIL fp;
	UINT bw;
	char *format = (is_raw == 1) ? "raw-%i.wav" : "mod-%i.wav";
 8002cc6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <create_new_wavfile+0x3e>
 8002cd2:	4bb5      	ldr	r3, [pc, #724]	@ (8002fa8 <create_new_wavfile+0x310>)
 8002cd4:	e000      	b.n	8002cd8 <create_new_wavfile+0x40>
 8002cd6:	4bb5      	ldr	r3, [pc, #724]	@ (8002fac <create_new_wavfile+0x314>)
 8002cd8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002cdc:	f102 0208 	add.w	r2, r2, #8
 8002ce0:	6013      	str	r3, [r2, #0]
	sprintf(path, format, 0);
 8002ce2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 8002cec:	f101 0108 	add.w	r1, r1, #8
 8002cf0:	6809      	ldr	r1, [r1, #0]
 8002cf2:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8002cf6:	f009 fdc1 	bl	800c87c <siprintf>
	int i = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002d00:	f102 020c 	add.w	r2, r2, #12
 8002d04:	6013      	str	r3, [r2, #0]
	while ((fresult = f_stat(path, 0)) == FR_OK) { // while the filename exists, do:
 8002d06:	e01a      	b.n	8002d3e <create_new_wavfile+0xa6>
		i++;
 8002d08:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002d0c:	f103 030c 	add.w	r3, r3, #12
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002d18:	f102 020c 	add.w	r2, r2, #12
 8002d1c:	6013      	str	r3, [r2, #0]
		sprintf(path, format, i); // increment the filename
 8002d1e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d22:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002d26:	f102 020c 	add.w	r2, r2, #12
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 8002d30:	f101 0108 	add.w	r1, r1, #8
 8002d34:	6809      	ldr	r1, [r1, #0]
 8002d36:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8002d3a:	f009 fd9f 	bl	800c87c <siprintf>
	while ((fresult = f_stat(path, 0)) == FR_OK) { // while the filename exists, do:
 8002d3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d42:	2100      	movs	r1, #0
 8002d44:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8002d48:	f008 f8ae 	bl	800aea8 <f_stat>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002d52:	f102 0207 	add.w	r2, r2, #7
 8002d56:	7013      	strb	r3, [r2, #0]
 8002d58:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002d5c:	f103 0307 	add.w	r3, r3, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0d0      	beq.n	8002d08 <create_new_wavfile+0x70>
	}

	// open the file
	fresult = f_open(&fp, path, FA_CREATE_ALWAYS | FA_WRITE);
 8002d66:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d70:	3b1c      	subs	r3, #28
 8002d72:	220a      	movs	r2, #10
 8002d74:	f851 1c48 	ldr.w	r1, [r1, #-72]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f007 fa6d 	bl	800a258 <f_open>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002d84:	f102 0207 	add.w	r2, r2, #7
 8002d88:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002d8a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002d8e:	f103 0307 	add.w	r3, r3, #7
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <create_new_wavfile+0x112>
		f_close(&fp);
 8002d98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d9c:	3b1c      	subs	r3, #28
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f007 fe34 	bl	800aa0c <f_close>
		return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	e0f8      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	// start from the beginning
	fresult = f_lseek(&fp, 0);
 8002daa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dae:	3b1c      	subs	r3, #28
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f007 fe54 	bl	800aa60 <f_lseek>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002dbe:	f102 0207 	add.w	r2, r2, #7
 8002dc2:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002dc4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002dc8:	f103 0307 	add.w	r3, r3, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <create_new_wavfile+0x14c>
		f_close(&fp);
 8002dd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dd6:	3b1c      	subs	r3, #28
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f007 fe17 	bl	800aa0c <f_close>
		return -1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	e0db      	b.n	8002f9c <create_new_wavfile+0x304>
	}

	// write each field individually, as if we just write the struct, the strings won't be properly written (it will write the pointer values instead of the strings)

	fresult = f_write(&fp, wav_h->ChunkID, 4, &bw);
 8002de4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002de8:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002df4:	381c      	subs	r0, #28
 8002df6:	2204      	movs	r2, #4
 8002df8:	f007 fbf6 	bl	800a5e8 <f_write>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002e02:	f102 0207 	add.w	r2, r2, #7
 8002e06:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002e08:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002e0c:	f103 0307 	add.w	r3, r3, #7
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <create_new_wavfile+0x184>
		return -1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e0bf      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_write(&fp, &(wav_h->ChunkSize), 4, &bw);
 8002e1c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e20:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002e24:	1d19      	adds	r1, r3, #4
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002e2e:	381c      	subs	r0, #28
 8002e30:	2204      	movs	r2, #4
 8002e32:	f007 fbd9 	bl	800a5e8 <f_write>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002e3c:	f102 0207 	add.w	r2, r2, #7
 8002e40:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002e42:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002e46:	f103 0307 	add.w	r3, r3, #7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <create_new_wavfile+0x1be>
		return -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	e0a2      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_write(&fp, wav_h->Format, 4, &bw);
 8002e56:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002e5e:	f103 0108 	add.w	r1, r3, #8
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002e6a:	381c      	subs	r0, #28
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	f007 fbbb 	bl	800a5e8 <f_write>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002e78:	f102 0207 	add.w	r2, r2, #7
 8002e7c:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002e7e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002e82:	f103 0307 	add.w	r3, r3, #7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <create_new_wavfile+0x1fa>
		return -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	e084      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_write(&fp, wav_h->Subchunk1ID, 4, &bw);
 8002e92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002e9a:	f103 010c 	add.w	r1, r3, #12
 8002e9e:	f107 0310 	add.w	r3, r7, #16
 8002ea2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002ea6:	381c      	subs	r0, #28
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	f007 fb9d 	bl	800a5e8 <f_write>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002eb4:	f102 0207 	add.w	r2, r2, #7
 8002eb8:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002eba:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002ebe:	f103 0307 	add.w	r3, r3, #7
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <create_new_wavfile+0x236>
		return -1;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	e066      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_write(&fp, &(wav_h->Subchunk1Size), 20, &bw);
 8002ece:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ed2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002ed6:	f103 0110 	add.w	r1, r3, #16
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002ee2:	381c      	subs	r0, #28
 8002ee4:	2214      	movs	r2, #20
 8002ee6:	f007 fb7f 	bl	800a5e8 <f_write>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002ef0:	f102 0207 	add.w	r2, r2, #7
 8002ef4:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002ef6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002efa:	f103 0307 	add.w	r3, r3, #7
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <create_new_wavfile+0x272>
		return -1;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	e048      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_write(&fp, wav_h->Subchunk2ID, 4, &bw);
 8002f0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002f0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002f12:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002f1e:	381c      	subs	r0, #28
 8002f20:	2204      	movs	r2, #4
 8002f22:	f007 fb61 	bl	800a5e8 <f_write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002f2c:	f102 0207 	add.w	r2, r2, #7
 8002f30:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002f32:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002f36:	f103 0307 	add.w	r3, r3, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <create_new_wavfile+0x2ae>
		return -1;
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	e02a      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_write(&fp, &(wav_h->Subchunk2Size), 4, &bw);
 8002f46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002f4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002f4e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002f5a:	381c      	subs	r0, #28
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	f007 fb43 	bl	800a5e8 <f_write>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002f68:	f102 0207 	add.w	r2, r2, #7
 8002f6c:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8002f6e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002f72:	f103 0307 	add.w	r3, r3, #7
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <create_new_wavfile+0x2ea>
		return -1;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e00c      	b.n	8002f9c <create_new_wavfile+0x304>
	}
	fresult = f_close(&fp);
 8002f82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f86:	3b1c      	subs	r3, #28
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f007 fd3f 	bl	800aa0c <f_close>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002f94:	f102 0207 	add.w	r2, r2, #7
 8002f98:	7013      	strb	r3, [r2, #0]
	return 0;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	0800d348 	.word	0x0800d348
 8002fac:	0800d354 	.word	0x0800d354

08002fb0 <update_wavfile>:


int update_wavfile(char *path, wav_header_t *wav_header, uint16_t *buffer, uint32_t buffer_size)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002fbe:	f844 0c3c 	str.w	r0, [r4, #-60]
 8002fc2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002fc6:	f840 1c40 	str.w	r1, [r0, #-64]
 8002fca:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002fce:	f841 2c44 	str.w	r2, [r1, #-68]
 8002fd2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002fd6:	f842 3c48 	str.w	r3, [r2, #-72]
	// update wav header metadata (size fields)
	wav_header->Subchunk2Size += buffer_size * NUM_CHANNELS * (BITS_PER_SAMPLE/8);
 8002fda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fde:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fe8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	441a      	add	r2, r3
 8002ff0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ff4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28
	wav_header->ChunkSize = 4 + (8 + wav_header->Subchunk1Size) + (8 + wav_header->Subchunk2Size);
 8002ffa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ffe:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003008:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	4413      	add	r3, r2
 8003010:	f103 0214 	add.w	r2, r3, #20
 8003014:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003018:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800301c:	605a      	str	r2, [r3, #4]

	UINT bw;
	FIL fp;

	// open existing file
	FRESULT fresult = f_open(&fp, path, FA_OPEN_ALWAYS | FA_WRITE);
 800301e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003022:	4619      	mov	r1, r3
 8003024:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003028:	3b18      	subs	r3, #24
 800302a:	2212      	movs	r2, #18
 800302c:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8003030:	4618      	mov	r0, r3
 8003032:	f007 f911 	bl	800a258 <f_open>
 8003036:	4603      	mov	r3, r0
 8003038:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800303c:	f102 0207 	add.w	r2, r2, #7
 8003040:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8003042:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003046:	f103 0307 	add.w	r3, r3, #7
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <update_wavfile+0xb2>
		f_close(&fp);
 8003050:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003054:	3b18      	subs	r3, #24
 8003056:	4618      	mov	r0, r3
 8003058:	f007 fcd8 	bl	800aa0c <f_close>
		return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	e0e9      	b.n	8003236 <update_wavfile+0x286>
	}
	// Seek to the ChunkSize field in the .wav file
	fresult = f_lseek(&fp, 4);
 8003062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003066:	3b18      	subs	r3, #24
 8003068:	2104      	movs	r1, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f007 fcf8 	bl	800aa60 <f_lseek>
 8003070:	4603      	mov	r3, r0
 8003072:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8003076:	f102 0207 	add.w	r2, r2, #7
 800307a:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 800307c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003080:	f103 0307 	add.w	r3, r3, #7
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <update_wavfile+0xec>
		f_close(&fp);
 800308a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800308e:	3b18      	subs	r3, #24
 8003090:	4618      	mov	r0, r3
 8003092:	f007 fcbb 	bl	800aa0c <f_close>
		return -1;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	e0cc      	b.n	8003236 <update_wavfile+0x286>
	}
	// update the overall chunk size
	fresult = f_write(&fp, &wav_header->ChunkSize, 4, &bw);
 800309c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030a0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80030a4:	1d19      	adds	r1, r3, #4
 80030a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80030aa:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80030ae:	3818      	subs	r0, #24
 80030b0:	2204      	movs	r2, #4
 80030b2:	f007 fa99 	bl	800a5e8 <f_write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80030bc:	f102 0207 	add.w	r2, r2, #7
 80030c0:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 80030c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80030c6:	f103 0307 	add.w	r3, r3, #7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <update_wavfile+0x142>
		f_close(&fp);
 80030d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030d4:	3b18      	subs	r3, #24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f007 fc98 	bl	800aa0c <f_close>
		if (bw != sizeof(wav_header->ChunkSize)) {
 80030dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d002      	beq.n	80030ec <update_wavfile+0x13c>
			return -2;
 80030e6:	f06f 0301 	mvn.w	r3, #1
 80030ea:	e0a4      	b.n	8003236 <update_wavfile+0x286>
		}
		return -1;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	e0a1      	b.n	8003236 <update_wavfile+0x286>
	}
	fresult = f_lseek(&fp, 40); // offset for Subchunk2Size field
 80030f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030f6:	3b18      	subs	r3, #24
 80030f8:	2128      	movs	r1, #40	@ 0x28
 80030fa:	4618      	mov	r0, r3
 80030fc:	f007 fcb0 	bl	800aa60 <f_lseek>
 8003100:	4603      	mov	r3, r0
 8003102:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8003106:	f102 0207 	add.w	r2, r2, #7
 800310a:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 800310c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003110:	f103 0307 	add.w	r3, r3, #7
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <update_wavfile+0x17c>
		f_close(&fp);
 800311a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800311e:	3b18      	subs	r3, #24
 8003120:	4618      	mov	r0, r3
 8003122:	f007 fc73 	bl	800aa0c <f_close>
		return -1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	e084      	b.n	8003236 <update_wavfile+0x286>
	}
	// update the subchunk2size (subchunk2 is the chunk housing the audio data
	fresult = f_write(&fp, &wav_header->Subchunk2Size, 4, &bw);
 800312c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003130:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003134:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8003138:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800313c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003140:	3818      	subs	r0, #24
 8003142:	2204      	movs	r2, #4
 8003144:	f007 fa50 	bl	800a5e8 <f_write>
 8003148:	4603      	mov	r3, r0
 800314a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800314e:	f102 0207 	add.w	r2, r2, #7
 8003152:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 8003154:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003158:	f103 0307 	add.w	r3, r3, #7
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <update_wavfile+0x1d4>
		f_close(&fp);
 8003162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003166:	3b18      	subs	r3, #24
 8003168:	4618      	mov	r0, r3
 800316a:	f007 fc4f 	bl	800aa0c <f_close>
		if (bw != sizeof(wav_header->Subchunk2Size)) {
 800316e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d002      	beq.n	800317e <update_wavfile+0x1ce>
			return -2;
 8003178:	f06f 0301 	mvn.w	r3, #1
 800317c:	e05b      	b.n	8003236 <update_wavfile+0x286>
		}
		return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e058      	b.n	8003236 <update_wavfile+0x286>
	}
	// begin writing the audio signal data to the data chunk
	fresult = f_lseek(&fp, f_size(&fp));
 8003184:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003188:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800318c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003190:	3b18      	subs	r3, #24
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f007 fc63 	bl	800aa60 <f_lseek>
 800319a:	4603      	mov	r3, r0
 800319c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80031a0:	f102 0207 	add.w	r2, r2, #7
 80031a4:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 80031a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80031aa:	f103 0307 	add.w	r3, r3, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <update_wavfile+0x216>
		f_close(&fp);
 80031b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031b8:	3b18      	subs	r3, #24
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 fc26 	bl	800aa0c <f_close>
		return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	e037      	b.n	8003236 <update_wavfile+0x286>
	}
	fresult = f_write(&fp, buffer, buffer_size, &bw);
 80031c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80031ca:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80031ce:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80031d2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80031d6:	3818      	subs	r0, #24
 80031d8:	f852 2c48 	ldr.w	r2, [r2, #-72]
 80031dc:	f851 1c44 	ldr.w	r1, [r1, #-68]
 80031e0:	f007 fa02 	bl	800a5e8 <f_write>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80031ea:	f102 0207 	add.w	r2, r2, #7
 80031ee:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK) {
 80031f0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80031f4:	f103 0307 	add.w	r3, r3, #7
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <update_wavfile+0x278>
		f_close(&fp);
 80031fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003202:	3b18      	subs	r3, #24
 8003204:	4618      	mov	r0, r3
 8003206:	f007 fc01 	bl	800aa0c <f_close>
		if (bw != buffer_size) {
 800320a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003214:	f852 2c48 	ldr.w	r2, [r2, #-72]
 8003218:	429a      	cmp	r2, r3
 800321a:	d002      	beq.n	8003222 <update_wavfile+0x272>
			return -2;
 800321c:	f06f 0301 	mvn.w	r3, #1
 8003220:	e009      	b.n	8003236 <update_wavfile+0x286>
		}
		return -1;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e006      	b.n	8003236 <update_wavfile+0x286>
	}
	f_close(&fp);
 8003228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800322c:	3b18      	subs	r3, #24
 800322e:	4618      	mov	r0, r3
 8003230:	f007 fbec 	bl	800aa0c <f_close>
	return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}
	...

08003244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    		 /* set stack pointer */
 8003244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800327c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003248:	f7ff fcb8 	bl	8002bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800324c:	480c      	ldr	r0, [pc, #48]	@ (8003280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800324e:	490d      	ldr	r1, [pc, #52]	@ (8003284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003250:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003264:	4c0a      	ldr	r4, [pc, #40]	@ (8003290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003272:	f009 fb31 	bl	800c8d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003276:	f7fe fc9b 	bl	8001bb0 <main>
  bx  lr
 800327a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800327c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003284:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003288:	08020834 	.word	0x08020834
  ldr r2, =_sbss
 800328c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003290:	2000fb8c 	.word	0x2000fb8c

08003294 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC_IRQHandler>
	...

08003298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800329c:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <HAL_Init+0x40>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	@ (80032d8 <HAL_Init+0x40>)
 80032a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <HAL_Init+0x40>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <HAL_Init+0x40>)
 80032ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b4:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <HAL_Init+0x40>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <HAL_Init+0x40>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f000 fd3d 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f000 f808 	bl	80032dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032cc:	f7ff f9ac 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00

080032dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <HAL_InitTick+0x54>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_InitTick+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fd55 	bl	8003daa <HAL_SYSTICK_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00e      	b.n	8003328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d80a      	bhi.n	8003326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f000 fd1d 	bl	8003d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4a06      	ldr	r2, [pc, #24]	@ (8003338 <HAL_InitTick+0x5c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000018 	.word	0x20000018
 8003334:	20000020 	.word	0x20000020
 8003338:	2000001c 	.word	0x2000001c

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	@ (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000020 	.word	0x20000020
 8003360:	2000f804 	.word	0x2000f804

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	2000f804 	.word	0x2000f804

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d005      	beq.n	80033a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_Delay+0x44>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a2:	bf00      	nop
 80033a4:	f7ff ffde 	bl	8003364 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d8f7      	bhi.n	80033a4 <HAL_Delay+0x28>
  {
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000020 	.word	0x20000020

080033c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e033      	b.n	8003442 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff f948 	bl	8002678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800340a:	f023 0302 	bic.w	r3, r3, #2
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa44 	bl	80038a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	@ 0x40
 8003432:	e001      	b.n	8003438 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Start_DMA+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e0ce      	b.n	8003608 <HAL_ADC_Start_DMA+0x1bc>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d018      	beq.n	80034b2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003490:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <HAL_ADC_Start_DMA+0x1c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5f      	ldr	r2, [pc, #380]	@ (8003614 <HAL_ADC_Start_DMA+0x1c8>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9a      	lsrs	r2, r3, #18
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80034a4:	e002      	b.n	80034ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f9      	bne.n	80034a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c0:	d107      	bne.n	80034d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 8086 	bne.w	80035ee <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800350c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003520:	d106      	bne.n	8003530 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f023 0206 	bic.w	r2, r3, #6
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
 800352e:	e002      	b.n	8003536 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353e:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <HAL_ADC_Start_DMA+0x1cc>)
 8003540:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003546:	4a35      	ldr	r2, [pc, #212]	@ (800361c <HAL_ADC_Start_DMA+0x1d0>)
 8003548:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	4a34      	ldr	r2, [pc, #208]	@ (8003620 <HAL_ADC_Start_DMA+0x1d4>)
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	4a33      	ldr	r2, [pc, #204]	@ (8003624 <HAL_ADC_Start_DMA+0x1d8>)
 8003558:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003562:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003572:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003582:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	4619      	mov	r1, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f000 fcc4 	bl	8003f20 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d129      	bne.n	8003606 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	e020      	b.n	8003606 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_ADC_Start_DMA+0x1dc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d11b      	bne.n	8003606 <HAL_ADC_Start_DMA+0x1ba>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d114      	bne.n	8003606 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e00b      	b.n	8003606 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000018 	.word	0x20000018
 8003614:	431bde83 	.word	0x431bde83
 8003618:	40012300 	.word	0x40012300
 800361c:	08003a9d 	.word	0x08003a9d
 8003620:	08003b57 	.word	0x08003b57
 8003624:	08003b73 	.word	0x08003b73
 8003628:	40012000 	.word	0x40012000

0800362c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e113      	b.n	8003884 <HAL_ADC_ConfigChannel+0x244>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b09      	cmp	r3, #9
 800366a:	d925      	bls.n	80036b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	3b1e      	subs	r3, #30
 8003682:	2207      	movs	r2, #7
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43da      	mvns	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	400a      	ands	r2, r1
 8003690:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68d9      	ldr	r1, [r3, #12]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	4603      	mov	r3, r0
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4403      	add	r3, r0
 80036aa:	3b1e      	subs	r3, #30
 80036ac:	409a      	lsls	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e022      	b.n	80036fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6919      	ldr	r1, [r3, #16]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	2207      	movs	r2, #7
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	400a      	ands	r2, r1
 80036da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6919      	ldr	r1, [r3, #16]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4403      	add	r3, r0
 80036f4:	409a      	lsls	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b06      	cmp	r3, #6
 8003704:	d824      	bhi.n	8003750 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	3b05      	subs	r3, #5
 8003718:	221f      	movs	r2, #31
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43da      	mvns	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	400a      	ands	r2, r1
 8003726:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	4618      	mov	r0, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	3b05      	subs	r3, #5
 8003742:	fa00 f203 	lsl.w	r2, r0, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	635a      	str	r2, [r3, #52]	@ 0x34
 800374e:	e04c      	b.n	80037ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d824      	bhi.n	80037a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	3b23      	subs	r3, #35	@ 0x23
 800376a:	221f      	movs	r2, #31
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43da      	mvns	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	400a      	ands	r2, r1
 8003778:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	4618      	mov	r0, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	3b23      	subs	r3, #35	@ 0x23
 8003794:	fa00 f203 	lsl.w	r2, r0, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
 80037a0:	e023      	b.n	80037ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	3b41      	subs	r3, #65	@ 0x41
 80037b4:	221f      	movs	r2, #31
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	400a      	ands	r2, r1
 80037c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	3b41      	subs	r3, #65	@ 0x41
 80037de:	fa00 f203 	lsl.w	r2, r0, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ea:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <HAL_ADC_ConfigChannel+0x250>)
 80037ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a28      	ldr	r2, [pc, #160]	@ (8003894 <HAL_ADC_ConfigChannel+0x254>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10f      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x1d8>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d10b      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1d      	ldr	r2, [pc, #116]	@ (8003894 <HAL_ADC_ConfigChannel+0x254>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d12b      	bne.n	800387a <HAL_ADC_ConfigChannel+0x23a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1c      	ldr	r2, [pc, #112]	@ (8003898 <HAL_ADC_ConfigChannel+0x258>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x1f4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b11      	cmp	r3, #17
 8003832:	d122      	bne.n	800387a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a11      	ldr	r2, [pc, #68]	@ (8003898 <HAL_ADC_ConfigChannel+0x258>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d111      	bne.n	800387a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003856:	4b11      	ldr	r3, [pc, #68]	@ (800389c <HAL_ADC_ConfigChannel+0x25c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a11      	ldr	r2, [pc, #68]	@ (80038a0 <HAL_ADC_ConfigChannel+0x260>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	0c9a      	lsrs	r2, r3, #18
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800386c:	e002      	b.n	8003874 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3b01      	subs	r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f9      	bne.n	800386e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40012300 	.word	0x40012300
 8003894:	40012000 	.word	0x40012000
 8003898:	10000012 	.word	0x10000012
 800389c:	20000018 	.word	0x20000018
 80038a0:	431bde83 	.word	0x431bde83

080038a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ac:	4b79      	ldr	r3, [pc, #484]	@ (8003a94 <ADC_Init+0x1f0>)
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	021a      	lsls	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80038fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800391e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	4a58      	ldr	r2, [pc, #352]	@ (8003a98 <ADC_Init+0x1f4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800394a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6899      	ldr	r1, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800396c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	e00f      	b.n	80039a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0202 	bic.w	r2, r2, #2
 80039b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6899      	ldr	r1, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7e1b      	ldrb	r3, [r3, #24]
 80039bc:	005a      	lsls	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80039ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	3b01      	subs	r3, #1
 80039fc:	035a      	lsls	r2, r3, #13
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	e007      	b.n	8003a18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	051a      	lsls	r2, r3, #20
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a5a:	025a      	lsls	r2, r3, #9
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	029a      	lsls	r2, r3, #10
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40012300 	.word	0x40012300
 8003a98:	0f000001 	.word	0x0f000001

08003a9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13c      	bne.n	8003b30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d12b      	bne.n	8003b28 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d127      	bne.n	8003b28 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d119      	bne.n	8003b28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0220 	bic.w	r2, r2, #32
 8003b02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7fe fc77 	bl	800241c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b2e:	e00e      	b.n	8003b4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fd75 	bl	800362c <HAL_ADC_ErrorCallback>
}
 8003b42:	e004      	b.n	8003b4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7fe fbdb 	bl	8002320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fd4a 	bl	800362c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	60d3      	str	r3, [r2, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <__NVIC_GetPriorityGrouping+0x18>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0307 	and.w	r3, r3, #7
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db0b      	blt.n	8003c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4907      	ldr	r1, [pc, #28]	@ (8003c3c <__NVIC_EnableIRQ+0x38>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	@ (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	@ (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	@ 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
         );
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	@ 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00f      	b.n	8003d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <SysTick_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f7ff ff8e 	bl	8003c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <SysTick_Config+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2a:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <SysTick_Config+0x40>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff29 	bl	8003ba0 <__NVIC_SetPriorityGrouping>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff3e 	bl	8003be8 <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff8e 	bl	8003c94 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5d 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff31 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffa2 	bl	8003cfc <SysTick_Config>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff fac8 	bl	8003364 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e099      	b.n	8003f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e00:	e00f      	b.n	8003e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e02:	f7ff faaf 	bl	8003364 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d908      	bls.n	8003e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e078      	b.n	8003f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e8      	bne.n	8003e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4b38      	ldr	r3, [pc, #224]	@ (8003f1c <HAL_DMA_Init+0x158>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	4313      	orrs	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d117      	bne.n	8003ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa6f 	bl	80043ac <DMA_CheckFifoParam>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2240      	movs	r2, #64	@ 0x40
 8003ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e016      	b.n	8003f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa26 	bl	8004340 <DMA_CalcBaseAndBitshift>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	223f      	movs	r2, #63	@ 0x3f
 8003efe:	409a      	lsls	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	f010803f 	.word	0xf010803f

08003f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_DMA_Start_IT+0x26>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e040      	b.n	8003fc8 <HAL_DMA_Start_IT+0xa8>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d12f      	bne.n	8003fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f9b8 	bl	80042e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	223f      	movs	r2, #63	@ 0x3f
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0216 	orr.w	r2, r2, #22
 8003f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e005      	b.n	8003fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8004218 <HAL_DMA_IRQHandler+0x248>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800421c <HAL_DMA_IRQHandler+0x24c>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0a9b      	lsrs	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01a      	beq.n	800403c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0204 	bic.w	r2, r2, #4
 8004022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	2208      	movs	r2, #8
 800402a:	409a      	lsls	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405e:	2201      	movs	r2, #1
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	2204      	movs	r2, #4
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d012      	beq.n	80040a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	2204      	movs	r2, #4
 8004096:	409a      	lsls	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	2210      	movs	r2, #16
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d043      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03c      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ca:	2210      	movs	r2, #16
 80040cc:	409a      	lsls	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d018      	beq.n	8004112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d108      	bne.n	8004100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d024      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
 80040fe:	e01f      	b.n	8004140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
 8004110:	e016      	b.n	8004140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0208 	bic.w	r2, r2, #8
 800412e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	2220      	movs	r2, #32
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 808f 	beq.w	8004270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8087 	beq.w	8004270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	2220      	movs	r2, #32
 8004168:	409a      	lsls	r2, r3
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b05      	cmp	r3, #5
 8004178:	d136      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0216 	bic.w	r2, r2, #22
 8004188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_DMA_IRQHandler+0x1da>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	223f      	movs	r2, #63	@ 0x3f
 80041c0:	409a      	lsls	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d07e      	beq.n	80042dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
        }
        return;
 80041e6:	e079      	b.n	80042dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01d      	beq.n	8004232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004208:	2b00      	cmp	r3, #0
 800420a:	d031      	beq.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e02c      	b.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
 8004216:	bf00      	nop
 8004218:	20000018 	.word	0x20000018
 800421c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d023      	beq.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
 8004230:	e01e      	b.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10f      	bne.n	8004260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0210 	bic.w	r2, r2, #16
 800424e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d032      	beq.n	80042de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d022      	beq.n	80042ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2205      	movs	r2, #5
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3301      	adds	r3, #1
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d307      	bcc.n	80042b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f2      	bne.n	800429c <HAL_DMA_IRQHandler+0x2cc>
 80042b6:	e000      	b.n	80042ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
 80042da:	e000      	b.n	80042de <HAL_DMA_IRQHandler+0x30e>
        return;
 80042dc:	bf00      	nop
    }
  }
}
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d108      	bne.n	8004324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004322:	e007      	b.n	8004334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3b10      	subs	r3, #16
 8004350:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800435a:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <DMA_CalcBaseAndBitshift+0x68>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d909      	bls.n	8004382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004380:	e007      	b.n	8004392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	aaaaaaab 	.word	0xaaaaaaab
 80043a8:	0800d3c0 	.word	0x0800d3c0

080043ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11f      	bne.n	8004406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d856      	bhi.n	800447a <DMA_CheckFifoParam+0xce>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <DMA_CheckFifoParam+0x28>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043e5 	.word	0x080043e5
 80043d8:	080043f7 	.word	0x080043f7
 80043dc:	080043e5 	.word	0x080043e5
 80043e0:	0800447b 	.word	0x0800447b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d046      	beq.n	800447e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e043      	b.n	800447e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043fe:	d140      	bne.n	8004482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e03d      	b.n	8004482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800440e:	d121      	bne.n	8004454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d837      	bhi.n	8004486 <DMA_CheckFifoParam+0xda>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <DMA_CheckFifoParam+0x70>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004433 	.word	0x08004433
 8004424:	0800442d 	.word	0x0800442d
 8004428:	08004445 	.word	0x08004445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e030      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d025      	beq.n	800448a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e022      	b.n	800448a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004452:	e01c      	b.n	800448e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d903      	bls.n	8004462 <DMA_CheckFifoParam+0xb6>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d003      	beq.n	8004468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004460:	e018      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      break;
 8004466:	e015      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e00b      	b.n	8004492 <DMA_CheckFifoParam+0xe6>
      break;
 800447a:	bf00      	nop
 800447c:	e00a      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
 8004480:	e008      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
 8004484:	e006      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;   
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
    }
  } 
  
  return status; 
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	@ 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	e159      	b.n	8004774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8148 	bne.w	800476e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d130      	bne.n	8004558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a2 	beq.w	800476e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4b57      	ldr	r3, [pc, #348]	@ (800478c <HAL_GPIO_Init+0x2e8>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	4a56      	ldr	r2, [pc, #344]	@ (800478c <HAL_GPIO_Init+0x2e8>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004638:	6453      	str	r3, [r2, #68]	@ 0x44
 800463a:	4b54      	ldr	r3, [pc, #336]	@ (800478c <HAL_GPIO_Init+0x2e8>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a52      	ldr	r2, [pc, #328]	@ (8004790 <HAL_GPIO_Init+0x2ec>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a49      	ldr	r2, [pc, #292]	@ (8004794 <HAL_GPIO_Init+0x2f0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x202>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a48      	ldr	r2, [pc, #288]	@ (8004798 <HAL_GPIO_Init+0x2f4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x1fe>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a47      	ldr	r2, [pc, #284]	@ (800479c <HAL_GPIO_Init+0x2f8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x1fa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a46      	ldr	r2, [pc, #280]	@ (80047a0 <HAL_GPIO_Init+0x2fc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x1f6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a45      	ldr	r2, [pc, #276]	@ (80047a4 <HAL_GPIO_Init+0x300>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x1f2>
 8004692:	2304      	movs	r3, #4
 8004694:	e008      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 8004696:	2307      	movs	r3, #7
 8004698:	e006      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 800469a:	2303      	movs	r3, #3
 800469c:	e004      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 80046a6:	2300      	movs	r3, #0
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	4093      	lsls	r3, r2
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b8:	4935      	ldr	r1, [pc, #212]	@ (8004790 <HAL_GPIO_Init+0x2ec>)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c6:	4b38      	ldr	r3, [pc, #224]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ea:	4a2f      	ldr	r2, [pc, #188]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f0:	4b2d      	ldr	r3, [pc, #180]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004714:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800471a:	4b23      	ldr	r3, [pc, #140]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800473e:	4a1a      	ldr	r2, [pc, #104]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004744:	4b18      	ldr	r3, [pc, #96]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004768:	4a0f      	ldr	r2, [pc, #60]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	f67f aea2 	bls.w	80044c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3724      	adds	r7, #36	@ 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	40013800 	.word	0x40013800
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400
 800479c:	40020800 	.word	0x40020800
 80047a0:	40020c00 	.word	0x40020c00
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ea:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f6:	4a05      	ldr	r2, [pc, #20]	@ (800480c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fd fe8a 	bl	8002518 <HAL_GPIO_EXTI_Callback>
  }
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40013c00 	.word	0x40013c00

08004810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e12b      	b.n	8004a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd ff96 	bl	8002768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	@ 0x24
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004874:	f001 fa08 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4a81      	ldr	r2, [pc, #516]	@ (8004a84 <HAL_I2C_Init+0x274>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d807      	bhi.n	8004894 <HAL_I2C_Init+0x84>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a80      	ldr	r2, [pc, #512]	@ (8004a88 <HAL_I2C_Init+0x278>)
 8004888:	4293      	cmp	r3, r2
 800488a:	bf94      	ite	ls
 800488c:	2301      	movls	r3, #1
 800488e:	2300      	movhi	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e006      	b.n	80048a2 <HAL_I2C_Init+0x92>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a7d      	ldr	r2, [pc, #500]	@ (8004a8c <HAL_I2C_Init+0x27c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	bf94      	ite	ls
 800489c:	2301      	movls	r3, #1
 800489e:	2300      	movhi	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0e7      	b.n	8004a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a78      	ldr	r2, [pc, #480]	@ (8004a90 <HAL_I2C_Init+0x280>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0c9b      	lsrs	r3, r3, #18
 80048b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a84 <HAL_I2C_Init+0x274>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d802      	bhi.n	80048e4 <HAL_I2C_Init+0xd4>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3301      	adds	r3, #1
 80048e2:	e009      	b.n	80048f8 <HAL_I2C_Init+0xe8>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	4a69      	ldr	r2, [pc, #420]	@ (8004a94 <HAL_I2C_Init+0x284>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	3301      	adds	r3, #1
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800490a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	495c      	ldr	r1, [pc, #368]	@ (8004a84 <HAL_I2C_Init+0x274>)
 8004914:	428b      	cmp	r3, r1
 8004916:	d819      	bhi.n	800494c <HAL_I2C_Init+0x13c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e59      	subs	r1, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fbb1 f3f3 	udiv	r3, r1, r3
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800492c:	400b      	ands	r3, r1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_I2C_Init+0x138>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e59      	subs	r1, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	e051      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 8004948:	2304      	movs	r3, #4
 800494a:	e04f      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d111      	bne.n	8004978 <HAL_I2C_Init+0x168>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1e58      	subs	r0, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	440b      	add	r3, r1
 8004962:	fbb0 f3f3 	udiv	r3, r0, r3
 8004966:	3301      	adds	r3, #1
 8004968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e012      	b.n	800499e <HAL_I2C_Init+0x18e>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	0099      	lsls	r1, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	fbb0 f3f3 	udiv	r3, r0, r3
 800498e:	3301      	adds	r3, #1
 8004990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Init+0x196>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e022      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <HAL_I2C_Init+0x1bc>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1e58      	subs	r0, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6859      	ldr	r1, [r3, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	440b      	add	r3, r1
 80049bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ca:	e00f      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e58      	subs	r0, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	0099      	lsls	r1, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	6809      	ldr	r1, [r1, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6911      	ldr	r1, [r2, #16]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	000186a0 	.word	0x000186a0
 8004a88:	001e847f 	.word	0x001e847f
 8004a8c:	003d08ff 	.word	0x003d08ff
 8004a90:	431bde83 	.word	0x431bde83
 8004a94:	10624dd3 	.word	0x10624dd3

08004a98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	817b      	strh	r3, [r7, #10]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aac:	f7fe fc5a 	bl	8003364 <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	f040 80e0 	bne.w	8004c80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2319      	movs	r3, #25
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	4970      	ldr	r1, [pc, #448]	@ (8004c8c <HAL_I2C_Master_Transmit+0x1f4>)
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fa92 	bl	8004ff4 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0d3      	b.n	8004c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_I2C_Master_Transmit+0x50>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0cc      	b.n	8004c82 <HAL_I2C_Master_Transmit+0x1ea>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d007      	beq.n	8004b0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2221      	movs	r2, #33	@ 0x21
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	893a      	ldrh	r2, [r7, #8]
 8004b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a50      	ldr	r2, [pc, #320]	@ (8004c90 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b50:	8979      	ldrh	r1, [r7, #10]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f9ca 	bl	8004ef0 <I2C_MasterRequestWrite>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e08d      	b.n	8004c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b7c:	e066      	b.n	8004c4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	6a39      	ldr	r1, [r7, #32]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fb50 	bl	8005228 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d107      	bne.n	8004ba6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e06b      	b.n	8004c82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d11b      	bne.n	8004c20 <HAL_I2C_Master_Transmit+0x188>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d017      	beq.n	8004c20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	6a39      	ldr	r1, [r7, #32]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fb47 	bl	80052b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00d      	beq.n	8004c4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d107      	bne.n	8004c48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e01a      	b.n	8004c82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d194      	bne.n	8004b7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	00100002 	.word	0x00100002
 8004c90:	ffff0000 	.word	0xffff0000

08004c94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	@ 0x28
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ca4:	f7fe fb5e 	bl	8003364 <HAL_GetTick>
 8004ca8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	f040 8111 	bne.w	8004ede <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2319      	movs	r3, #25
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4988      	ldr	r1, [pc, #544]	@ (8004ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f994 	bl	8004ff4 <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e104      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2C_IsDeviceReady+0x50>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e0fd      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d007      	beq.n	8004d0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2224      	movs	r2, #36	@ 0x24
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a70      	ldr	r2, [pc, #448]	@ (8004eec <HAL_I2C_IsDeviceReady+0x258>)
 8004d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f952 	bl	8004ff4 <I2C_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d64:	d103      	bne.n	8004d6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e0b6      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d72:	897b      	ldrh	r3, [r7, #10]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004d82:	f7fe faef 	bl	8003364 <HAL_GetTick>
 8004d86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dac:	bf0c      	ite	eq
 8004dae:	2301      	moveq	r3, #1
 8004db0:	2300      	movne	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004db6:	e025      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fe fad4 	bl	8003364 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <HAL_I2C_IsDeviceReady+0x13a>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22a0      	movs	r2, #160	@ 0xa0
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e0e:	d005      	beq.n	8004e1c <HAL_I2C_IsDeviceReady+0x188>
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_I2C_IsDeviceReady+0x188>
 8004e16:	7dbb      	ldrb	r3, [r7, #22]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0cd      	beq.n	8004db8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d129      	bne.n	8004e86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2319      	movs	r3, #25
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4921      	ldr	r1, [pc, #132]	@ (8004ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f8c6 	bl	8004ff4 <I2C_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e036      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e02c      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2319      	movs	r3, #25
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	490f      	ldr	r1, [pc, #60]	@ (8004ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8a2 	bl	8004ff4 <I2C_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e012      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f4ff af32 	bcc.w	8004d2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	00100002 	.word	0x00100002
 8004eec:	ffff0000 	.word	0xffff0000

08004ef0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	460b      	mov	r3, r1
 8004efe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d006      	beq.n	8004f1a <I2C_MasterRequestWrite+0x2a>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d003      	beq.n	8004f1a <I2C_MasterRequestWrite+0x2a>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f18:	d108      	bne.n	8004f2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e00b      	b.n	8004f44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	2b12      	cmp	r3, #18
 8004f32:	d107      	bne.n	8004f44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f84f 	bl	8004ff4 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f6a:	d103      	bne.n	8004f74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e035      	b.n	8004fe4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f80:	d108      	bne.n	8004f94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f82:	897b      	ldrh	r3, [r7, #10]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f90:	611a      	str	r2, [r3, #16]
 8004f92:	e01b      	b.n	8004fcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f94:	897b      	ldrh	r3, [r7, #10]
 8004f96:	11db      	asrs	r3, r3, #7
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f003 0306 	and.w	r3, r3, #6
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f063 030f 	orn	r3, r3, #15
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	490e      	ldr	r1, [pc, #56]	@ (8004fec <I2C_MasterRequestWrite+0xfc>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f898 	bl	80050e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e010      	b.n	8004fe4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fc2:	897b      	ldrh	r3, [r7, #10]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4907      	ldr	r1, [pc, #28]	@ (8004ff0 <I2C_MasterRequestWrite+0x100>)
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f888 	bl	80050e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	00010008 	.word	0x00010008
 8004ff0:	00010002 	.word	0x00010002

08004ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005004:	e048      	b.n	8005098 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d044      	beq.n	8005098 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fe f9a9 	bl	8003364 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d139      	bne.n	8005098 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10d      	bne.n	800504a <I2C_WaitOnFlagUntilTimeout+0x56>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	43da      	mvns	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	e00c      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0x70>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	43da      	mvns	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	429a      	cmp	r2, r3
 8005068:	d116      	bne.n	8005098 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e023      	b.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10d      	bne.n	80050be <I2C_WaitOnFlagUntilTimeout+0xca>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	e00c      	b.n	80050d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	43da      	mvns	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d093      	beq.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050f6:	e071      	b.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005106:	d123      	bne.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005116:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005120:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	f043 0204 	orr.w	r2, r3, #4
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e067      	b.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d041      	beq.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005158:	f7fe f904 	bl	8003364 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d302      	bcc.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d136      	bne.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10c      	bne.n	8005192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	43da      	mvns	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e00b      	b.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	43da      	mvns	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e021      	b.n	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d10c      	bne.n	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	43da      	mvns	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e00b      	b.n	8005218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	43da      	mvns	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf14      	ite	ne
 8005212:	2301      	movne	r3, #1
 8005214:	2300      	moveq	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	f47f af6d 	bne.w	80050f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005234:	e034      	b.n	80052a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f886 	bl	8005348 <I2C_IsAcknowledgeFailed>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e034      	b.n	80052b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d028      	beq.n	80052a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fe f889 	bl	8003364 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11d      	bne.n	80052a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b80      	cmp	r3, #128	@ 0x80
 8005270:	d016      	beq.n	80052a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052aa:	2b80      	cmp	r3, #128	@ 0x80
 80052ac:	d1c3      	bne.n	8005236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052c4:	e034      	b.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f83e 	bl	8005348 <I2C_IsAcknowledgeFailed>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e034      	b.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d028      	beq.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fe f841 	bl	8003364 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11d      	bne.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d016      	beq.n	8005330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e007      	b.n	8005340 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b04      	cmp	r3, #4
 800533c:	d1c3      	bne.n	80052c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800535e:	d11b      	bne.n	8005398 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005368:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	f043 0204 	orr.w	r2, r3, #4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e267      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d075      	beq.n	80054b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c6:	4b88      	ldr	r3, [pc, #544]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d00c      	beq.n	80053ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d2:	4b85      	ldr	r3, [pc, #532]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d112      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053de:	4b82      	ldr	r3, [pc, #520]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ea:	d10b      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	4b7e      	ldr	r3, [pc, #504]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05b      	beq.n	80054b0 <HAL_RCC_OscConfig+0x108>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d157      	bne.n	80054b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e242      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d106      	bne.n	800541c <HAL_RCC_OscConfig+0x74>
 800540e:	4b76      	ldr	r3, [pc, #472]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a75      	ldr	r2, [pc, #468]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e01d      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x98>
 8005426:	4b70      	ldr	r3, [pc, #448]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6f      	ldr	r2, [pc, #444]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b6d      	ldr	r3, [pc, #436]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6c      	ldr	r2, [pc, #432]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 8005440:	4b69      	ldr	r3, [pc, #420]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a68      	ldr	r2, [pc, #416]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	4b66      	ldr	r3, [pc, #408]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a65      	ldr	r2, [pc, #404]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fd ff80 	bl	8003364 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005468:	f7fd ff7c 	bl	8003364 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	@ 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e207      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	4b5b      	ldr	r3, [pc, #364]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0xc0>
 8005486:	e014      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fd ff6c 	bl	8003364 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005490:	f7fd ff68 	bl	8003364 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	@ 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e1f3      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	4b51      	ldr	r3, [pc, #324]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0xe8>
 80054ae:	e000      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d063      	beq.n	8005586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054be:	4b4a      	ldr	r3, [pc, #296]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ca:	4b47      	ldr	r3, [pc, #284]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d11c      	bne.n	8005510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d6:	4b44      	ldr	r3, [pc, #272]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d116      	bne.n	8005510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e2:	4b41      	ldr	r3, [pc, #260]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_RCC_OscConfig+0x152>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e1c7      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fa:	4b3b      	ldr	r3, [pc, #236]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4937      	ldr	r1, [pc, #220]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550e:	e03a      	b.n	8005586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005518:	4b34      	ldr	r3, [pc, #208]	@ (80055ec <HAL_RCC_OscConfig+0x244>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fd ff21 	bl	8003364 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005526:	f7fd ff1d 	bl	8003364 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e1a8      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	4b2b      	ldr	r3, [pc, #172]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005544:	4b28      	ldr	r3, [pc, #160]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4925      	ldr	r1, [pc, #148]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005554:	4313      	orrs	r3, r2
 8005556:	600b      	str	r3, [r1, #0]
 8005558:	e015      	b.n	8005586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555a:	4b24      	ldr	r3, [pc, #144]	@ (80055ec <HAL_RCC_OscConfig+0x244>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fd ff00 	bl	8003364 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005568:	f7fd fefc 	bl	8003364 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e187      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	4b1b      	ldr	r3, [pc, #108]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d036      	beq.n	8005600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800559a:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <HAL_RCC_OscConfig+0x248>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fd fee0 	bl	8003364 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fd fedc 	bl	8003364 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e167      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	4b0b      	ldr	r3, [pc, #44]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80055bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x200>
 80055c6:	e01b      	b.n	8005600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <HAL_RCC_OscConfig+0x248>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ce:	f7fd fec9 	bl	8003364 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	e00e      	b.n	80055f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d6:	f7fd fec5 	bl	8003364 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d907      	bls.n	80055f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e150      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
 80055e8:	40023800 	.word	0x40023800
 80055ec:	42470000 	.word	0x42470000
 80055f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f4:	4b88      	ldr	r3, [pc, #544]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ea      	bne.n	80055d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8097 	beq.w	800573c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005612:	4b81      	ldr	r3, [pc, #516]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	4b7d      	ldr	r3, [pc, #500]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	4a7c      	ldr	r2, [pc, #496]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562c:	6413      	str	r3, [r2, #64]	@ 0x40
 800562e:	4b7a      	ldr	r3, [pc, #488]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	4b77      	ldr	r3, [pc, #476]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d118      	bne.n	800567c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800564a:	4b74      	ldr	r3, [pc, #464]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a73      	ldr	r2, [pc, #460]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005656:	f7fd fe85 	bl	8003364 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565e:	f7fd fe81 	bl	8003364 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e10c      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	4b6a      	ldr	r3, [pc, #424]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x2ea>
 8005684:	4b64      	ldr	r3, [pc, #400]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	4a63      	ldr	r2, [pc, #396]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005690:	e01c      	b.n	80056cc <HAL_RCC_OscConfig+0x324>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b05      	cmp	r3, #5
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x30c>
 800569a:	4b5f      	ldr	r3, [pc, #380]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569e:	4a5e      	ldr	r2, [pc, #376]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056a0:	f043 0304 	orr.w	r3, r3, #4
 80056a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b2:	e00b      	b.n	80056cc <HAL_RCC_OscConfig+0x324>
 80056b4:	4b58      	ldr	r3, [pc, #352]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	4a57      	ldr	r2, [pc, #348]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c0:	4b55      	ldr	r3, [pc, #340]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	4a54      	ldr	r2, [pc, #336]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056c6:	f023 0304 	bic.w	r3, r3, #4
 80056ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d015      	beq.n	8005700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd fe46 	bl	8003364 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fd fe42 	bl	8003364 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0cb      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f2:	4b49      	ldr	r3, [pc, #292]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ee      	beq.n	80056dc <HAL_RCC_OscConfig+0x334>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005700:	f7fd fe30 	bl	8003364 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fd fe2c 	bl	8003364 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0b5      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571e:	4b3e      	ldr	r3, [pc, #248]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1ee      	bne.n	8005708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d105      	bne.n	800573c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005730:	4b39      	ldr	r3, [pc, #228]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	4a38      	ldr	r2, [pc, #224]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800573a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80a1 	beq.w	8005888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005746:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b08      	cmp	r3, #8
 8005750:	d05c      	beq.n	800580c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d141      	bne.n	80057de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575a:	4b31      	ldr	r3, [pc, #196]	@ (8005820 <HAL_RCC_OscConfig+0x478>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fd fe00 	bl	8003364 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005768:	f7fd fdfc 	bl	8003364 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e087      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	3b01      	subs	r3, #1
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	061b      	lsls	r3, r3, #24
 80057aa:	491b      	ldr	r1, [pc, #108]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <HAL_RCC_OscConfig+0x478>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fd fdd5 	bl	8003364 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057be:	f7fd fdd1 	bl	8003364 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e05c      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d0:	4b11      	ldr	r3, [pc, #68]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x416>
 80057dc:	e054      	b.n	8005888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <HAL_RCC_OscConfig+0x478>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fd fdbe 	bl	8003364 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fd fdba 	bl	8003364 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e045      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fe:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x444>
 800580a:	e03d      	b.n	8005888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d107      	bne.n	8005824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e038      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
 8005818:	40023800 	.word	0x40023800
 800581c:	40007000 	.word	0x40007000
 8005820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005824:	4b1b      	ldr	r3, [pc, #108]	@ (8005894 <HAL_RCC_OscConfig+0x4ec>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d028      	beq.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d121      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d11a      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800585a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800585c:	4293      	cmp	r3, r2
 800585e:	d111      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	3b01      	subs	r3, #1
 800586e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d107      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800

08005898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0cc      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ac:	4b68      	ldr	r3, [pc, #416]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d90c      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b65      	ldr	r3, [pc, #404]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b63      	ldr	r3, [pc, #396]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0b8      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a58      	ldr	r2, [pc, #352]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005904:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a52      	ldr	r2, [pc, #328]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800590e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b50      	ldr	r3, [pc, #320]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	494d      	ldr	r1, [pc, #308]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d044      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d119      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e07f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d003      	beq.n	8005956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005952:	2b03      	cmp	r3, #3
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	4b3f      	ldr	r3, [pc, #252]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e06f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e067      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005976:	4b37      	ldr	r3, [pc, #220]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f023 0203 	bic.w	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4934      	ldr	r1, [pc, #208]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005988:	f7fd fcec 	bl	8003364 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005990:	f7fd fce8 	bl	8003364 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e04f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 020c 	and.w	r2, r3, #12
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1eb      	bne.n	8005990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b8:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d20c      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b20      	ldr	r3, [pc, #128]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ec:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4916      	ldr	r1, [pc, #88]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	490e      	ldr	r1, [pc, #56]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a1e:	f000 f821 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	490a      	ldr	r1, [pc, #40]	@ (8005a58 <HAL_RCC_ClockConfig+0x1c0>)
 8005a30:	5ccb      	ldrb	r3, [r1, r3]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd fc4c 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023c00 	.word	0x40023c00
 8005a54:	40023800 	.word	0x40023800
 8005a58:	0800d3a8 	.word	0x0800d3a8
 8005a5c:	20000018 	.word	0x20000018
 8005a60:	2000001c 	.word	0x2000001c

08005a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a68:	b094      	sub	sp, #80	@ 0x50
 8005a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a70:	2300      	movs	r3, #0
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a74:	2300      	movs	r3, #0
 8005a76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a7c:	4b79      	ldr	r3, [pc, #484]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d00d      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	f200 80e1 	bhi.w	8005c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0x34>
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d003      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a96:	e0db      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b73      	ldr	r3, [pc, #460]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005a9c:	e0db      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9e:	4b73      	ldr	r3, [pc, #460]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8005aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aa2:	e0d8      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aae:	4b6d      	ldr	r3, [pc, #436]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d063      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aba:	4b6a      	ldr	r3, [pc, #424]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	099b      	lsrs	r3, r3, #6
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ace:	2300      	movs	r3, #0
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f04f 0000 	mov.w	r0, #0
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	0159      	lsls	r1, r3, #5
 8005ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae8:	0150      	lsls	r0, r2, #5
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4621      	mov	r1, r4
 8005af0:	1a51      	subs	r1, r2, r1
 8005af2:	6139      	str	r1, [r7, #16]
 8005af4:	4629      	mov	r1, r5
 8005af6:	eb63 0301 	sbc.w	r3, r3, r1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b08:	4659      	mov	r1, fp
 8005b0a:	018b      	lsls	r3, r1, #6
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b12:	4651      	mov	r1, sl
 8005b14:	018a      	lsls	r2, r1, #6
 8005b16:	4651      	mov	r1, sl
 8005b18:	ebb2 0801 	subs.w	r8, r2, r1
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b36:	4690      	mov	r8, r2
 8005b38:	4699      	mov	r9, r3
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	eb18 0303 	adds.w	r3, r8, r3
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	462b      	mov	r3, r5
 8005b44:	eb49 0303 	adc.w	r3, r9, r3
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b56:	4629      	mov	r1, r5
 8005b58:	024b      	lsls	r3, r1, #9
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b60:	4621      	mov	r1, r4
 8005b62:	024a      	lsls	r2, r1, #9
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b74:	f7fa fe92 	bl	800089c <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b80:	e058      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b82:	4b38      	ldr	r3, [pc, #224]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	f04f 0000 	mov.w	r0, #0
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bae:	0150      	lsls	r0, r2, #5
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bba:	4649      	mov	r1, r9
 8005bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	00eb      	lsls	r3, r5, #3
 8005be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bea:	00e2      	lsls	r2, r4, #3
 8005bec:	4614      	mov	r4, r2
 8005bee:	461d      	mov	r5, r3
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	18e3      	adds	r3, r4, r3
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	eb45 0303 	adc.w	r3, r5, r3
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	028b      	lsls	r3, r1, #10
 8005c0e:	4621      	mov	r1, r4
 8005c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c14:	4621      	mov	r1, r4
 8005c16:	028a      	lsls	r2, r1, #10
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	61fa      	str	r2, [r7, #28]
 8005c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c28:	f7fa fe38 	bl	800089c <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4613      	mov	r3, r2
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c34:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c4e:	e002      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3750      	adds	r7, #80	@ 0x50
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	007a1200 	.word	0x007a1200

08005c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000018 	.word	0x20000018

08005c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c8c:	f7ff fff0 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0a9b      	lsrs	r3, r3, #10
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	@ (8005cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	0800d3b8 	.word	0x0800d3b8

08005cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cb4:	f7ff ffdc 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	0b5b      	lsrs	r3, r3, #13
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4903      	ldr	r1, [pc, #12]	@ (8005cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	0800d3b8 	.word	0x0800d3b8

08005cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e07b      	b.n	8005de2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d108      	bne.n	8005d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cfa:	d009      	beq.n	8005d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	61da      	str	r2, [r3, #28]
 8005d02:	e005      	b.n	8005d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fc fd64 	bl	80027f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	f003 0104 	and.w	r1, r3, #4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	f003 0210 	and.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b088      	sub	sp, #32
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_SPI_Transmit+0x22>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e12d      	b.n	8006068 <HAL_SPI_Transmit+0x27e>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e14:	f7fd faa6 	bl	8003364 <HAL_GetTick>
 8005e18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e2e:	e116      	b.n	800605e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_SPI_Transmit+0x52>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e40:	e10d      	b.n	800605e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2203      	movs	r2, #3
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e88:	d10f      	bne.n	8005eaa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ea8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b40      	cmp	r3, #64	@ 0x40
 8005eb6:	d007      	beq.n	8005ec8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ed0:	d14f      	bne.n	8005f72 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_SPI_Transmit+0xf6>
 8005eda:	8afb      	ldrh	r3, [r7, #22]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d142      	bne.n	8005f66 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f04:	e02f      	b.n	8005f66 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d112      	bne.n	8005f3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f38:	e015      	b.n	8005f66 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f3a:	f7fd fa13 	bl	8003364 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d803      	bhi.n	8005f52 <HAL_SPI_Transmit+0x168>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d102      	bne.n	8005f58 <HAL_SPI_Transmit+0x16e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005f64:	e07b      	b.n	800605e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ca      	bne.n	8005f06 <HAL_SPI_Transmit+0x11c>
 8005f70:	e050      	b.n	8006014 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_SPI_Transmit+0x196>
 8005f7a:	8afb      	ldrh	r3, [r7, #22]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d144      	bne.n	800600a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fa6:	e030      	b.n	800600a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d113      	bne.n	8005fde <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fdc:	e015      	b.n	800600a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fde:	f7fd f9c1 	bl	8003364 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d803      	bhi.n	8005ff6 <HAL_SPI_Transmit+0x20c>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d102      	bne.n	8005ffc <HAL_SPI_Transmit+0x212>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006008:	e029      	b.n	800605e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1c9      	bne.n	8005fa8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fa6f 	bl	80064fc <SPI_EndRxTxTransaction>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e003      	b.n	800605e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006066:	7ffb      	ldrb	r3, [r7, #31]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3720      	adds	r7, #32
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08c      	sub	sp, #48	@ 0x30
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800607e:	2301      	movs	r3, #1
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x26>
 8006092:	2302      	movs	r3, #2
 8006094:	e198      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x358>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800609e:	f7fd f961 	bl	8003364 <HAL_GetTick>
 80060a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d00f      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x70>
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c6:	d107      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d103      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x68>
 80060d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d003      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80060de:	e16d      	b.n	80063bc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x82>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x82>
 80060ec:	887b      	ldrh	r3, [r7, #2]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80060f8:	e160      	b.n	80063bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b04      	cmp	r3, #4
 8006104:	d003      	beq.n	800610e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2205      	movs	r2, #5
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	887a      	ldrh	r2, [r7, #2]
 8006124:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	887a      	ldrh	r2, [r7, #2]
 8006136:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	d007      	beq.n	8006162 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616a:	d17c      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_SPI_TransmitReceive+0x10a>
 8006174:	8b7b      	ldrh	r3, [r7, #26]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d16a      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617e:	881a      	ldrh	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800619e:	e057      	b.n	8006250 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d11b      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x176>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d016      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x176>
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d113      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d119      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x1b8>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d014      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	b292      	uxth	r2, r2
 800620a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006228:	f7fd f89c 	bl	8003364 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006234:	429a      	cmp	r2, r3
 8006236:	d80b      	bhi.n	8006250 <HAL_SPI_TransmitReceive+0x1e0>
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d007      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800624e:	e0b5      	b.n	80063bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1a2      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x130>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d19d      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x130>
 8006264:	e080      	b.n	8006368 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x204>
 800626e:	8b7b      	ldrh	r3, [r7, #26]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d16f      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629a:	e05b      	b.n	8006354 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d11c      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x274>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d017      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x274>
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d114      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d119      	bne.n	8006326 <HAL_SPI_TransmitReceive+0x2b6>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d014      	beq.n	8006326 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006322:	2301      	movs	r3, #1
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006326:	f7fd f81d 	bl	8003364 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006332:	429a      	cmp	r2, r3
 8006334:	d803      	bhi.n	800633e <HAL_SPI_TransmitReceive+0x2ce>
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d102      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x2d4>
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d107      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006352:	e033      	b.n	80063bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d19e      	bne.n	800629c <HAL_SPI_TransmitReceive+0x22c>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d199      	bne.n	800629c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f8c5 	bl	80064fc <SPI_EndRxTxTransaction>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006384:	e01a      	b.n	80063bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e003      	b.n	80063bc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80063c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3730      	adds	r7, #48	@ 0x30
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063de:	b2db      	uxtb	r3, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063fc:	f7fc ffb2 	bl	8003364 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4413      	add	r3, r2
 800640a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800640c:	f7fc ffaa 	bl	8003364 <HAL_GetTick>
 8006410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006412:	4b39      	ldr	r3, [pc, #228]	@ (80064f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	0d1b      	lsrs	r3, r3, #20
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	fb02 f303 	mul.w	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006422:	e054      	b.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d050      	beq.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800642c:	f7fc ff9a 	bl	8003364 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	429a      	cmp	r2, r3
 800643a:	d902      	bls.n	8006442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13d      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800645a:	d111      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006464:	d004      	beq.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646e:	d107      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800647e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006488:	d10f      	bne.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e017      	b.n	80064ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d19b      	bne.n	8006424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000018 	.word	0x20000018

080064fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2201      	movs	r2, #1
 8006510:	2102      	movs	r1, #2
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff ff6a 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006522:	f043 0220 	orr.w	r2, r3, #32
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e032      	b.n	8006594 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800652e:	4b1b      	ldr	r3, [pc, #108]	@ (800659c <SPI_EndRxTxTransaction+0xa0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <SPI_EndRxTxTransaction+0xa4>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	0d5b      	lsrs	r3, r3, #21
 800653a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800654c:	d112      	bne.n	8006574 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2200      	movs	r2, #0
 8006556:	2180      	movs	r1, #128	@ 0x80
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff ff47 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d016      	beq.n	8006592 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006568:	f043 0220 	orr.w	r2, r3, #32
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e00f      	b.n	8006594 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	3b01      	subs	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658a:	2b80      	cmp	r3, #128	@ 0x80
 800658c:	d0f2      	beq.n	8006574 <SPI_EndRxTxTransaction+0x78>
 800658e:	e000      	b.n	8006592 <SPI_EndRxTxTransaction+0x96>
        break;
 8006590:	bf00      	nop
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000018 	.word	0x20000018
 80065a0:	165e9f81 	.word	0x165e9f81

080065a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e041      	b.n	800663a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc f97c 	bl	80028c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f000 fb8c 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	d001      	beq.n	800665c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e044      	b.n	80066e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1e      	ldr	r2, [pc, #120]	@ (80066f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d018      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006686:	d013      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1a      	ldr	r2, [pc, #104]	@ (80066f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a19      	ldr	r2, [pc, #100]	@ (80066fc <HAL_TIM_Base_Start_IT+0xb8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <HAL_TIM_Base_Start_IT+0xbc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x6c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <HAL_TIM_Base_Start_IT+0xc0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d111      	bne.n	80066d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b06      	cmp	r3, #6
 80066c0:	d010      	beq.n	80066e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0201 	orr.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d2:	e007      	b.n	80066e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40014000 	.word	0x40014000

08006708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e041      	b.n	800679e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f839 	bl	80067a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 fada 	bl	8006d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01b      	beq.n	800681e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0202 	mvn.w	r2, #2
 80067ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa5c 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 800680a:	e005      	b.n	8006818 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa4e 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa5f 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d020      	beq.n	800686a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01b      	beq.n	800686a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f06f 0204 	mvn.w	r2, #4
 800683a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fa36 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 8006856:	e005      	b.n	8006864 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa28 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa39 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d020      	beq.n	80068b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01b      	beq.n	80068b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f06f 0208 	mvn.w	r2, #8
 8006886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2204      	movs	r2, #4
 800688c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa10 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 80068a2:	e005      	b.n	80068b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fa02 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa13 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d020      	beq.n	8006902 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01b      	beq.n	8006902 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f06f 0210 	mvn.w	r2, #16
 80068d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2208      	movs	r2, #8
 80068d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9ea 	bl	8006cc2 <HAL_TIM_IC_CaptureCallback>
 80068ee:	e005      	b.n	80068fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9dc 	bl	8006cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9ed 	bl	8006cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0201 	mvn.w	r2, #1
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fb fe21 	bl	8002568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fd05 	bl	8007354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f9be 	bl	8006cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00c      	beq.n	8006992 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0220 	mvn.w	r2, #32
 800698a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fcd7 	bl	8007340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e0ae      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b0c      	cmp	r3, #12
 80069c6:	f200 809f 	bhi.w	8006b08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069ca:	a201      	add	r2, pc, #4	@ (adr r2, 80069d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	08006a05 	.word	0x08006a05
 80069d4:	08006b09 	.word	0x08006b09
 80069d8:	08006b09 	.word	0x08006b09
 80069dc:	08006b09 	.word	0x08006b09
 80069e0:	08006a45 	.word	0x08006a45
 80069e4:	08006b09 	.word	0x08006b09
 80069e8:	08006b09 	.word	0x08006b09
 80069ec:	08006b09 	.word	0x08006b09
 80069f0:	08006a87 	.word	0x08006a87
 80069f4:	08006b09 	.word	0x08006b09
 80069f8:	08006b09 	.word	0x08006b09
 80069fc:	08006b09 	.word	0x08006b09
 8006a00:	08006ac7 	.word	0x08006ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fa04 	bl	8006e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0208 	orr.w	r2, r2, #8
 8006a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0204 	bic.w	r2, r2, #4
 8006a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6999      	ldr	r1, [r3, #24]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	619a      	str	r2, [r3, #24]
      break;
 8006a42:	e064      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fa4a 	bl	8006ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6999      	ldr	r1, [r3, #24]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	021a      	lsls	r2, r3, #8
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	619a      	str	r2, [r3, #24]
      break;
 8006a84:	e043      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fa95 	bl	8006fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0208 	orr.w	r2, r2, #8
 8006aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0204 	bic.w	r2, r2, #4
 8006ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69d9      	ldr	r1, [r3, #28]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	61da      	str	r2, [r3, #28]
      break;
 8006ac4:	e023      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fadf 	bl	8007090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69d9      	ldr	r1, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	021a      	lsls	r2, r3, #8
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	61da      	str	r2, [r3, #28]
      break;
 8006b06:	e002      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_ConfigClockSource+0x1c>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e0b4      	b.n	8006ca6 <HAL_TIM_ConfigClockSource+0x186>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b74:	d03e      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b7a:	f200 8087 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b82:	f000 8086 	beq.w	8006c92 <HAL_TIM_ConfigClockSource+0x172>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b8a:	d87f      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b70      	cmp	r3, #112	@ 0x70
 8006b8e:	d01a      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006b90:	2b70      	cmp	r3, #112	@ 0x70
 8006b92:	d87b      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b60      	cmp	r3, #96	@ 0x60
 8006b96:	d050      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x11a>
 8006b98:	2b60      	cmp	r3, #96	@ 0x60
 8006b9a:	d877      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b50      	cmp	r3, #80	@ 0x50
 8006b9e:	d03c      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xfa>
 8006ba0:	2b50      	cmp	r3, #80	@ 0x50
 8006ba2:	d873      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b40      	cmp	r3, #64	@ 0x40
 8006ba6:	d058      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x13a>
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d86f      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b30      	cmp	r3, #48	@ 0x30
 8006bae:	d064      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bb0:	2b30      	cmp	r3, #48	@ 0x30
 8006bb2:	d86b      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d060      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d867      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d05c      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d05a      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	e062      	b.n	8006c8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bd6:	f000 fb25 	bl	8007224 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	609a      	str	r2, [r3, #8]
      break;
 8006bf2:	e04f      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c04:	f000 fb0e 	bl	8007224 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c16:	609a      	str	r2, [r3, #8]
      break;
 8006c18:	e03c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c26:	461a      	mov	r2, r3
 8006c28:	f000 fa82 	bl	8007130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2150      	movs	r1, #80	@ 0x50
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fadb 	bl	80071ee <TIM_ITRx_SetConfig>
      break;
 8006c38:	e02c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c46:	461a      	mov	r2, r3
 8006c48:	f000 faa1 	bl	800718e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2160      	movs	r1, #96	@ 0x60
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 facb 	bl	80071ee <TIM_ITRx_SetConfig>
      break;
 8006c58:	e01c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c66:	461a      	mov	r2, r3
 8006c68:	f000 fa62 	bl	8007130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2140      	movs	r1, #64	@ 0x40
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fabb 	bl	80071ee <TIM_ITRx_SetConfig>
      break;
 8006c78:	e00c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 fab2 	bl	80071ee <TIM_ITRx_SetConfig>
      break;
 8006c8a:	e003      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e000      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a3a      	ldr	r2, [pc, #232]	@ (8006dfc <TIM_Base_SetConfig+0xfc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00f      	beq.n	8006d38 <TIM_Base_SetConfig+0x38>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d00b      	beq.n	8006d38 <TIM_Base_SetConfig+0x38>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a37      	ldr	r2, [pc, #220]	@ (8006e00 <TIM_Base_SetConfig+0x100>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_Base_SetConfig+0x38>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a36      	ldr	r2, [pc, #216]	@ (8006e04 <TIM_Base_SetConfig+0x104>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_Base_SetConfig+0x38>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a35      	ldr	r2, [pc, #212]	@ (8006e08 <TIM_Base_SetConfig+0x108>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d108      	bne.n	8006d4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006dfc <TIM_Base_SetConfig+0xfc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01b      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d58:	d017      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a28      	ldr	r2, [pc, #160]	@ (8006e00 <TIM_Base_SetConfig+0x100>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a27      	ldr	r2, [pc, #156]	@ (8006e04 <TIM_Base_SetConfig+0x104>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00f      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a26      	ldr	r2, [pc, #152]	@ (8006e08 <TIM_Base_SetConfig+0x108>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00b      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a25      	ldr	r2, [pc, #148]	@ (8006e0c <TIM_Base_SetConfig+0x10c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d007      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a24      	ldr	r2, [pc, #144]	@ (8006e10 <TIM_Base_SetConfig+0x110>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_Base_SetConfig+0x8a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a23      	ldr	r2, [pc, #140]	@ (8006e14 <TIM_Base_SetConfig+0x114>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d108      	bne.n	8006d9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8006dfc <TIM_Base_SetConfig+0xfc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d103      	bne.n	8006dd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d105      	bne.n	8006dee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f023 0201 	bic.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	611a      	str	r2, [r3, #16]
  }
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40000400 	.word	0x40000400
 8006e04:	40000800 	.word	0x40000800
 8006e08:	40000c00 	.word	0x40000c00
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40014400 	.word	0x40014400
 8006e14:	40014800 	.word	0x40014800

08006e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 0201 	bic.w	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 0302 	bic.w	r3, r3, #2
 8006e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <TIM_OC1_SetConfig+0xc8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d10c      	bne.n	8006e8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0308 	bic.w	r3, r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a13      	ldr	r2, [pc, #76]	@ (8006ee0 <TIM_OC1_SetConfig+0xc8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d111      	bne.n	8006eba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40010000 	.word	0x40010000

08006ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f023 0210 	bic.w	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb8 <TIM_OC2_SetConfig+0xd4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10d      	bne.n	8006f60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <TIM_OC2_SetConfig+0xd4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d113      	bne.n	8006f90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000

08006fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1d      	ldr	r2, [pc, #116]	@ (800708c <TIM_OC3_SetConfig+0xd0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d10d      	bne.n	8007036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a14      	ldr	r2, [pc, #80]	@ (800708c <TIM_OC3_SetConfig+0xd0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d113      	bne.n	8007066 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800704c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	621a      	str	r2, [r3, #32]
}
 8007080:	bf00      	nop
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40010000 	.word	0x40010000

08007090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	031b      	lsls	r3, r3, #12
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a10      	ldr	r2, [pc, #64]	@ (800712c <TIM_OC4_SetConfig+0x9c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d109      	bne.n	8007104 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	019b      	lsls	r3, r3, #6
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40010000 	.word	0x40010000

08007130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f023 0201 	bic.w	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800715a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 030a 	bic.w	r3, r3, #10
 800716c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718e:	b480      	push	{r7}
 8007190:	b087      	sub	sp, #28
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	f023 0210 	bic.w	r2, r3, #16
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	031b      	lsls	r3, r3, #12
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	f043 0307 	orr.w	r3, r3, #7
 8007210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800723e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	021a      	lsls	r2, r3, #8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	431a      	orrs	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4313      	orrs	r3, r2
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	609a      	str	r2, [r3, #8]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007278:	2302      	movs	r3, #2
 800727a:	e050      	b.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1c      	ldr	r2, [pc, #112]	@ (800732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d018      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c8:	d013      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a18      	ldr	r2, [pc, #96]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a16      	ldr	r2, [pc, #88]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a13      	ldr	r2, [pc, #76]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10c      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40014000 	.word	0x40014000

08007340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e042      	b.n	8007400 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fb fb12 	bl	80029b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2224      	movs	r2, #36	@ 0x24
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f973 	bl	8007698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695a      	ldr	r2, [r3, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	@ 0x28
 800740c:	af02      	add	r7, sp, #8
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	4613      	mov	r3, r2
 8007416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b20      	cmp	r3, #32
 8007426:	d175      	bne.n	8007514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_UART_Transmit+0x2c>
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e06e      	b.n	8007516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2221      	movs	r2, #33	@ 0x21
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007446:	f7fb ff8d 	bl	8003364 <HAL_GetTick>
 800744a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	88fa      	ldrh	r2, [r7, #6]
 8007450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007460:	d108      	bne.n	8007474 <HAL_UART_Transmit+0x6c>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d104      	bne.n	8007474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	e003      	b.n	800747c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800747c:	e02e      	b.n	80074dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2200      	movs	r2, #0
 8007486:	2180      	movs	r1, #128	@ 0x80
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f848 	bl	800751e <UART_WaitOnFlagUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e03a      	b.n	8007516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	3302      	adds	r3, #2
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	e007      	b.n	80074ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1cb      	bne.n	800747e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2140      	movs	r1, #64	@ 0x40
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f814 	bl	800751e <UART_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e006      	b.n	8007516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e000      	b.n	8007516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007514:	2302      	movs	r3, #2
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	3720      	adds	r7, #32
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	4613      	mov	r3, r2
 800752c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752e:	e03b      	b.n	80075a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d037      	beq.n	80075a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007538:	f7fb ff14 	bl	8003364 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	6a3a      	ldr	r2, [r7, #32]
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <UART_WaitOnFlagUntilTimeout+0x30>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e03a      	b.n	80075c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d023      	beq.n	80075a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	d020      	beq.n	80075a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	d01d      	beq.n	80075a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b08      	cmp	r3, #8
 8007578:	d116      	bne.n	80075a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 f81d 	bl	80075d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2208      	movs	r2, #8
 800759a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e00f      	b.n	80075c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4013      	ands	r3, r2
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d0b4      	beq.n	8007530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b095      	sub	sp, #84	@ 0x54
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e5      	bne.n	80075d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3314      	adds	r3, #20
 8007612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	61fb      	str	r3, [r7, #28]
   return(result);
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3314      	adds	r3, #20
 800762a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800762c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e5      	bne.n	800760c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007644:	2b01      	cmp	r3, #1
 8007646:	d119      	bne.n	800767c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	330c      	adds	r3, #12
 800764e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60bb      	str	r3, [r7, #8]
   return(result);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007668:	61ba      	str	r2, [r7, #24]
 800766a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6979      	ldr	r1, [r7, #20]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	613b      	str	r3, [r7, #16]
   return(result);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e5      	bne.n	8007648 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800768a:	bf00      	nop
 800768c:	3754      	adds	r7, #84	@ 0x54
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800769c:	b0c0      	sub	sp, #256	@ 0x100
 800769e:	af00      	add	r7, sp, #0
 80076a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b4:	68d9      	ldr	r1, [r3, #12]
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	ea40 0301 	orr.w	r3, r0, r1
 80076c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80076f0:	f021 010c 	bic.w	r1, r1, #12
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076fe:	430b      	orrs	r3, r1
 8007700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007712:	6999      	ldr	r1, [r3, #24]
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	ea40 0301 	orr.w	r3, r0, r1
 800771e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b8f      	ldr	r3, [pc, #572]	@ (8007964 <UART_SetConfig+0x2cc>)
 8007728:	429a      	cmp	r2, r3
 800772a:	d005      	beq.n	8007738 <UART_SetConfig+0xa0>
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b8d      	ldr	r3, [pc, #564]	@ (8007968 <UART_SetConfig+0x2d0>)
 8007734:	429a      	cmp	r2, r3
 8007736:	d104      	bne.n	8007742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007738:	f7fe faba 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
 800773c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007740:	e003      	b.n	800774a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007742:	f7fe faa1 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8007746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007754:	f040 810c 	bne.w	8007970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800775c:	2200      	movs	r2, #0
 800775e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	1891      	adds	r1, r2, r2
 8007770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007772:	415b      	adcs	r3, r3
 8007774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800777a:	4621      	mov	r1, r4
 800777c:	eb12 0801 	adds.w	r8, r2, r1
 8007780:	4629      	mov	r1, r5
 8007782:	eb43 0901 	adc.w	r9, r3, r1
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800779a:	4690      	mov	r8, r2
 800779c:	4699      	mov	r9, r3
 800779e:	4623      	mov	r3, r4
 80077a0:	eb18 0303 	adds.w	r3, r8, r3
 80077a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077a8:	462b      	mov	r3, r5
 80077aa:	eb49 0303 	adc.w	r3, r9, r3
 80077ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077c6:	460b      	mov	r3, r1
 80077c8:	18db      	adds	r3, r3, r3
 80077ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80077cc:	4613      	mov	r3, r2
 80077ce:	eb42 0303 	adc.w	r3, r2, r3
 80077d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077dc:	f7f9 f85e 	bl	800089c <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4b61      	ldr	r3, [pc, #388]	@ (800796c <UART_SetConfig+0x2d4>)
 80077e6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	011c      	lsls	r4, r3, #4
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80077fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	1891      	adds	r1, r2, r2
 8007806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007808:	415b      	adcs	r3, r3
 800780a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800780c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007810:	4641      	mov	r1, r8
 8007812:	eb12 0a01 	adds.w	sl, r2, r1
 8007816:	4649      	mov	r1, r9
 8007818:	eb43 0b01 	adc.w	fp, r3, r1
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800782c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007830:	4692      	mov	sl, r2
 8007832:	469b      	mov	fp, r3
 8007834:	4643      	mov	r3, r8
 8007836:	eb1a 0303 	adds.w	r3, sl, r3
 800783a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800783e:	464b      	mov	r3, r9
 8007840:	eb4b 0303 	adc.w	r3, fp, r3
 8007844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800785c:	460b      	mov	r3, r1
 800785e:	18db      	adds	r3, r3, r3
 8007860:	643b      	str	r3, [r7, #64]	@ 0x40
 8007862:	4613      	mov	r3, r2
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	647b      	str	r3, [r7, #68]	@ 0x44
 800786a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800786e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007872:	f7f9 f813 	bl	800089c <__aeabi_uldivmod>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4611      	mov	r1, r2
 800787c:	4b3b      	ldr	r3, [pc, #236]	@ (800796c <UART_SetConfig+0x2d4>)
 800787e:	fba3 2301 	umull	r2, r3, r3, r1
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	2264      	movs	r2, #100	@ 0x64
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	1acb      	subs	r3, r1, r3
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007892:	4b36      	ldr	r3, [pc, #216]	@ (800796c <UART_SetConfig+0x2d4>)
 8007894:	fba3 2302 	umull	r2, r3, r3, r2
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078a0:	441c      	add	r4, r3
 80078a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	1891      	adds	r1, r2, r2
 80078ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078bc:	415b      	adcs	r3, r3
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078c4:	4641      	mov	r1, r8
 80078c6:	1851      	adds	r1, r2, r1
 80078c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80078ca:	4649      	mov	r1, r9
 80078cc:	414b      	adcs	r3, r1
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078dc:	4659      	mov	r1, fp
 80078de:	00cb      	lsls	r3, r1, #3
 80078e0:	4651      	mov	r1, sl
 80078e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078e6:	4651      	mov	r1, sl
 80078e8:	00ca      	lsls	r2, r1, #3
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	4642      	mov	r2, r8
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078f8:	464b      	mov	r3, r9
 80078fa:	460a      	mov	r2, r1
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007918:	460b      	mov	r3, r1
 800791a:	18db      	adds	r3, r3, r3
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800791e:	4613      	mov	r3, r2
 8007920:	eb42 0303 	adc.w	r3, r2, r3
 8007924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800792a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800792e:	f7f8 ffb5 	bl	800089c <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <UART_SetConfig+0x2d4>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	@ 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	3332      	adds	r3, #50	@ 0x32
 800794a:	4a08      	ldr	r2, [pc, #32]	@ (800796c <UART_SetConfig+0x2d4>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 0207 	and.w	r2, r3, #7
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4422      	add	r2, r4
 800795e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007960:	e106      	b.n	8007b70 <UART_SetConfig+0x4d8>
 8007962:	bf00      	nop
 8007964:	40011000 	.word	0x40011000
 8007968:	40011400 	.word	0x40011400
 800796c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007974:	2200      	movs	r2, #0
 8007976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800797a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800797e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007982:	4642      	mov	r2, r8
 8007984:	464b      	mov	r3, r9
 8007986:	1891      	adds	r1, r2, r2
 8007988:	6239      	str	r1, [r7, #32]
 800798a:	415b      	adcs	r3, r3
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
 800798e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007992:	4641      	mov	r1, r8
 8007994:	1854      	adds	r4, r2, r1
 8007996:	4649      	mov	r1, r9
 8007998:	eb43 0501 	adc.w	r5, r3, r1
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	00eb      	lsls	r3, r5, #3
 80079a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079aa:	00e2      	lsls	r2, r4, #3
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	4643      	mov	r3, r8
 80079b2:	18e3      	adds	r3, r4, r3
 80079b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079b8:	464b      	mov	r3, r9
 80079ba:	eb45 0303 	adc.w	r3, r5, r3
 80079be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079de:	4629      	mov	r1, r5
 80079e0:	008b      	lsls	r3, r1, #2
 80079e2:	4621      	mov	r1, r4
 80079e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079e8:	4621      	mov	r1, r4
 80079ea:	008a      	lsls	r2, r1, #2
 80079ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80079f0:	f7f8 ff54 	bl	800089c <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4b60      	ldr	r3, [pc, #384]	@ (8007b7c <UART_SetConfig+0x4e4>)
 80079fa:	fba3 2302 	umull	r2, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	011c      	lsls	r4, r3, #4
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	61b9      	str	r1, [r7, #24]
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a24:	4641      	mov	r1, r8
 8007a26:	1851      	adds	r1, r2, r1
 8007a28:	6139      	str	r1, [r7, #16]
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	414b      	adcs	r3, r1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	00cb      	lsls	r3, r1, #3
 8007a40:	4651      	mov	r1, sl
 8007a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a46:	4651      	mov	r1, sl
 8007a48:	00ca      	lsls	r2, r1, #3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	4642      	mov	r2, r8
 8007a52:	189b      	adds	r3, r3, r2
 8007a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a58:	464b      	mov	r3, r9
 8007a5a:	460a      	mov	r2, r1
 8007a5c:	eb42 0303 	adc.w	r3, r2, r3
 8007a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	f04f 0300 	mov.w	r3, #0
 8007a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	008b      	lsls	r3, r1, #2
 8007a80:	4641      	mov	r1, r8
 8007a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a86:	4641      	mov	r1, r8
 8007a88:	008a      	lsls	r2, r1, #2
 8007a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a8e:	f7f8 ff05 	bl	800089c <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	4b38      	ldr	r3, [pc, #224]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	2264      	movs	r2, #100	@ 0x64
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	1acb      	subs	r3, r1, r3
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	3332      	adds	r3, #50	@ 0x32
 8007aac:	4a33      	ldr	r2, [pc, #204]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007aae:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ab8:	441c      	add	r4, r3
 8007aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007abe:	2200      	movs	r2, #0
 8007ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ad8:	4641      	mov	r1, r8
 8007ada:	1851      	adds	r1, r2, r1
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	4649      	mov	r1, r9
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	607b      	str	r3, [r7, #4]
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007af0:	4659      	mov	r1, fp
 8007af2:	00cb      	lsls	r3, r1, #3
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afa:	4651      	mov	r1, sl
 8007afc:	00ca      	lsls	r2, r1, #3
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	4642      	mov	r2, r8
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	eb42 0303 	adc.w	r3, r2, r3
 8007b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	008b      	lsls	r3, r1, #2
 8007b30:	4641      	mov	r1, r8
 8007b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b36:	4641      	mov	r1, r8
 8007b38:	008a      	lsls	r2, r1, #2
 8007b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b3e:	f7f8 fead 	bl	800089c <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4b0d      	ldr	r3, [pc, #52]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007b48:	fba3 1302 	umull	r1, r3, r3, r2
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	2164      	movs	r1, #100	@ 0x64
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	3332      	adds	r3, #50	@ 0x32
 8007b5a:	4a08      	ldr	r2, [pc, #32]	@ (8007b7c <UART_SetConfig+0x4e4>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	f003 020f 	and.w	r2, r3, #15
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4422      	add	r2, r4
 8007b6e:	609a      	str	r2, [r3, #8]
}
 8007b70:	bf00      	nop
 8007b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b76:	46bd      	mov	sp, r7
 8007b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b7c:	51eb851f 	.word	0x51eb851f

08007b80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b84:	4904      	ldr	r1, [pc, #16]	@ (8007b98 <MX_FATFS_Init+0x18>)
 8007b86:	4805      	ldr	r0, [pc, #20]	@ (8007b9c <MX_FATFS_Init+0x1c>)
 8007b88:	f003 fac8 	bl	800b11c <FATFS_LinkDriver>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4b03      	ldr	r3, [pc, #12]	@ (8007ba0 <MX_FATFS_Init+0x20>)
 8007b92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b94:	bf00      	nop
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	2000f80c 	.word	0x2000f80c
 8007b9c:	20000024 	.word	0x20000024
 8007ba0:	2000f808 	.word	0x2000f808

08007ba4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007ba8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f9 f99d 	bl	8000f00 <SD_disk_initialize>
 8007bc6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7f9 fa79 	bl	80010d4 <SD_disk_status>
 8007be2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007bfc:	7bf8      	ldrb	r0, [r7, #15]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	f7f9 fa7c 	bl	8001100 <SD_disk_read>
 8007c08:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007c22:	7bf8      	ldrb	r0, [r7, #15]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	f7f9 fad3 	bl	80011d4 <SD_disk_write>
 8007c2e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	603a      	str	r2, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
 8007c44:	460b      	mov	r3, r1
 8007c46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007c48:	79b9      	ldrb	r1, [r7, #6]
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7f9 fb44 	bl	80012dc <SD_disk_ioctl>
 8007c54:	4603      	mov	r3, r0

  /* USER CODE END IOCTL */
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	4a08      	ldr	r2, [pc, #32]	@ (8007c90 <disk_status+0x30>)
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	79fa      	ldrb	r2, [r7, #7]
 8007c78:	4905      	ldr	r1, [pc, #20]	@ (8007c90 <disk_status+0x30>)
 8007c7a:	440a      	add	r2, r1
 8007c7c:	7a12      	ldrb	r2, [r2, #8]
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4798      	blx	r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	2000fa38 	.word	0x2000fa38

08007c94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8007ce0 <disk_initialize+0x4c>)
 8007ca6:	5cd3      	ldrb	r3, [r2, r3]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d114      	bne.n	8007cd6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce0 <disk_initialize+0x4c>)
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	79fa      	ldrb	r2, [r7, #7]
 8007cba:	4909      	ldr	r1, [pc, #36]	@ (8007ce0 <disk_initialize+0x4c>)
 8007cbc:	440a      	add	r2, r1
 8007cbe:	7a12      	ldrb	r2, [r2, #8]
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	4a03      	ldr	r2, [pc, #12]	@ (8007ce0 <disk_initialize+0x4c>)
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	2000fa38 	.word	0x2000fa38

08007ce4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8007d20 <disk_read+0x3c>)
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	689c      	ldr	r4, [r3, #8]
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	4a07      	ldr	r2, [pc, #28]	@ (8007d20 <disk_read+0x3c>)
 8007d04:	4413      	add	r3, r2
 8007d06:	7a18      	ldrb	r0, [r3, #8]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	47a0      	blx	r4
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd90      	pop	{r4, r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	2000fa38 	.word	0x2000fa38

08007d24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d24:	b590      	push	{r4, r7, lr}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	4a0a      	ldr	r2, [pc, #40]	@ (8007d60 <disk_write+0x3c>)
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68dc      	ldr	r4, [r3, #12]
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	4a07      	ldr	r2, [pc, #28]	@ (8007d60 <disk_write+0x3c>)
 8007d44:	4413      	add	r3, r2
 8007d46:	7a18      	ldrb	r0, [r3, #8]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	47a0      	blx	r4
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd90      	pop	{r4, r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000fa38 	.word	0x2000fa38

08007d64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	603a      	str	r2, [r7, #0]
 8007d6e:	71fb      	strb	r3, [r7, #7]
 8007d70:	460b      	mov	r3, r1
 8007d72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <disk_ioctl+0x38>)
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	79fa      	ldrb	r2, [r7, #7]
 8007d82:	4906      	ldr	r1, [pc, #24]	@ (8007d9c <disk_ioctl+0x38>)
 8007d84:	440a      	add	r2, r1
 8007d86:	7a10      	ldrb	r0, [r2, #8]
 8007d88:	79b9      	ldrb	r1, [r7, #6]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4798      	blx	r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	2000fa38 	.word	0x2000fa38

08007da0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3301      	adds	r3, #1
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007db0:	89fb      	ldrh	r3, [r7, #14]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	b21a      	sxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b21b      	sxth	r3, r3
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	b21b      	sxth	r3, r3
 8007dc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3303      	adds	r3, #3
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	3202      	adds	r2, #2
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	3201      	adds	r2, #1
 8007df6:	7812      	ldrb	r2, [r2, #0]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7812      	ldrb	r2, [r2, #0]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	887a      	ldrh	r2, [r7, #2]
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	887b      	ldrh	r3, [r7, #2]
 8007e30:	0a1b      	lsrs	r3, r3, #8
 8007e32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	887a      	ldrh	r2, [r7, #2]
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	0a1b      	lsrs	r3, r3, #8
 8007e66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	1c53      	adds	r3, r2, #1
 8007ec2:	613b      	str	r3, [r7, #16]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	1c59      	adds	r1, r3, #1
 8007ec8:	6179      	str	r1, [r7, #20]
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	607b      	str	r3, [r7, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f1      	bne.n	8007ebe <mem_cpy+0x1a>
	}
}
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007ee6:	b480      	push	{r7}
 8007ee8:	b087      	sub	sp, #28
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	617a      	str	r2, [r7, #20]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1f3      	bne.n	8007ef6 <mem_set+0x10>
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f1c:	b480      	push	{r7}
 8007f1e:	b089      	sub	sp, #36	@ 0x24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	61fb      	str	r3, [r7, #28]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	61fa      	str	r2, [r7, #28]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	61ba      	str	r2, [r7, #24]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	1acb      	subs	r3, r1, r3
 8007f48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <mem_cmp+0x40>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0eb      	beq.n	8007f34 <mem_cmp+0x18>

	return r;
 8007f5c:	697b      	ldr	r3, [r7, #20]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3724      	adds	r7, #36	@ 0x24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007f74:	e002      	b.n	8007f7c <chk_chr+0x12>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <chk_chr+0x26>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d1f2      	bne.n	8007f76 <chk_chr+0xc>
	return *str;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	781b      	ldrb	r3, [r3, #0]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e029      	b.n	8008008 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007fb4:	4a27      	ldr	r2, [pc, #156]	@ (8008054 <chk_lock+0xb4>)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	4413      	add	r3, r2
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01d      	beq.n	8007ffe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fc2:	4a24      	ldr	r2, [pc, #144]	@ (8008054 <chk_lock+0xb4>)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	4413      	add	r3, r2
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d116      	bne.n	8008002 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8008054 <chk_lock+0xb4>)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	4413      	add	r3, r2
 8007fdc:	3304      	adds	r3, #4
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d10c      	bne.n	8008002 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8008054 <chk_lock+0xb4>)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	4413      	add	r3, r2
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d102      	bne.n	8008002 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ffc:	e007      	b.n	800800e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007ffe:	2301      	movs	r3, #1
 8008000:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d9d2      	bls.n	8007fb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d109      	bne.n	8008028 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d102      	bne.n	8008020 <chk_lock+0x80>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d101      	bne.n	8008024 <chk_lock+0x84>
 8008020:	2300      	movs	r3, #0
 8008022:	e010      	b.n	8008046 <chk_lock+0xa6>
 8008024:	2312      	movs	r3, #18
 8008026:	e00e      	b.n	8008046 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d108      	bne.n	8008040 <chk_lock+0xa0>
 800802e:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <chk_lock+0xb4>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	4413      	add	r3, r2
 8008036:	330c      	adds	r3, #12
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800803e:	d101      	bne.n	8008044 <chk_lock+0xa4>
 8008040:	2310      	movs	r3, #16
 8008042:	e000      	b.n	8008046 <chk_lock+0xa6>
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	2000f818 	.word	0x2000f818

08008058 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	e002      	b.n	800806a <enq_lock+0x12>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3301      	adds	r3, #1
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d806      	bhi.n	800807e <enq_lock+0x26>
 8008070:	4a09      	ldr	r2, [pc, #36]	@ (8008098 <enq_lock+0x40>)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	4413      	add	r3, r2
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f2      	bne.n	8008064 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b02      	cmp	r3, #2
 8008082:	bf14      	ite	ne
 8008084:	2301      	movne	r3, #1
 8008086:	2300      	moveq	r3, #0
 8008088:	b2db      	uxtb	r3, r3
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	2000f818 	.word	0x2000f818

0800809c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e01f      	b.n	80080ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80080ac:	4a41      	ldr	r2, [pc, #260]	@ (80081b4 <inc_lock+0x118>)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	4413      	add	r3, r2
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d113      	bne.n	80080e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80080be:	4a3d      	ldr	r2, [pc, #244]	@ (80081b4 <inc_lock+0x118>)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	4413      	add	r3, r2
 80080c6:	3304      	adds	r3, #4
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d109      	bne.n	80080e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80080d2:	4a38      	ldr	r2, [pc, #224]	@ (80081b4 <inc_lock+0x118>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	4413      	add	r3, r2
 80080da:	3308      	adds	r3, #8
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d006      	beq.n	80080f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d9dc      	bls.n	80080ac <inc_lock+0x10>
 80080f2:	e000      	b.n	80080f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80080f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d132      	bne.n	8008162 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e002      	b.n	8008108 <inc_lock+0x6c>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d806      	bhi.n	800811c <inc_lock+0x80>
 800810e:	4a29      	ldr	r2, [pc, #164]	@ (80081b4 <inc_lock+0x118>)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	4413      	add	r3, r2
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f2      	bne.n	8008102 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d101      	bne.n	8008126 <inc_lock+0x8a>
 8008122:	2300      	movs	r3, #0
 8008124:	e040      	b.n	80081a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	4922      	ldr	r1, [pc, #136]	@ (80081b4 <inc_lock+0x118>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	440b      	add	r3, r1
 8008132:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	491e      	ldr	r1, [pc, #120]	@ (80081b4 <inc_lock+0x118>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	440b      	add	r3, r1
 8008140:	3304      	adds	r3, #4
 8008142:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	695a      	ldr	r2, [r3, #20]
 8008148:	491a      	ldr	r1, [pc, #104]	@ (80081b4 <inc_lock+0x118>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	440b      	add	r3, r1
 8008150:	3308      	adds	r3, #8
 8008152:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008154:	4a17      	ldr	r2, [pc, #92]	@ (80081b4 <inc_lock+0x118>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	4413      	add	r3, r2
 800815c:	330c      	adds	r3, #12
 800815e:	2200      	movs	r2, #0
 8008160:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <inc_lock+0xe0>
 8008168:	4a12      	ldr	r2, [pc, #72]	@ (80081b4 <inc_lock+0x118>)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	4413      	add	r3, r2
 8008170:	330c      	adds	r3, #12
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <inc_lock+0xe0>
 8008178:	2300      	movs	r3, #0
 800817a:	e015      	b.n	80081a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d108      	bne.n	8008194 <inc_lock+0xf8>
 8008182:	4a0c      	ldr	r2, [pc, #48]	@ (80081b4 <inc_lock+0x118>)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	4413      	add	r3, r2
 800818a:	330c      	adds	r3, #12
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	e001      	b.n	8008198 <inc_lock+0xfc>
 8008194:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008198:	4906      	ldr	r1, [pc, #24]	@ (80081b4 <inc_lock+0x118>)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	440b      	add	r3, r1
 80081a0:	330c      	adds	r3, #12
 80081a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	2000f818 	.word	0x2000f818

080081b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d825      	bhi.n	8008218 <dec_lock+0x60>
		n = Files[i].ctr;
 80081cc:	4a17      	ldr	r2, [pc, #92]	@ (800822c <dec_lock+0x74>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	4413      	add	r3, r2
 80081d4:	330c      	adds	r3, #12
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80081da:	89fb      	ldrh	r3, [r7, #14]
 80081dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e0:	d101      	bne.n	80081e6 <dec_lock+0x2e>
 80081e2:	2300      	movs	r3, #0
 80081e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80081e6:	89fb      	ldrh	r3, [r7, #14]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <dec_lock+0x3a>
 80081ec:	89fb      	ldrh	r3, [r7, #14]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80081f2:	4a0e      	ldr	r2, [pc, #56]	@ (800822c <dec_lock+0x74>)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	4413      	add	r3, r2
 80081fa:	330c      	adds	r3, #12
 80081fc:	89fa      	ldrh	r2, [r7, #14]
 80081fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008200:	89fb      	ldrh	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <dec_lock+0x5a>
 8008206:	4a09      	ldr	r2, [pc, #36]	@ (800822c <dec_lock+0x74>)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	4413      	add	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	737b      	strb	r3, [r7, #13]
 8008216:	e001      	b.n	800821c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008218:	2302      	movs	r3, #2
 800821a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800821c:	7b7b      	ldrb	r3, [r7, #13]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	2000f818 	.word	0x2000f818

08008230 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e010      	b.n	8008260 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800823e:	4a0d      	ldr	r2, [pc, #52]	@ (8008274 <clear_lock+0x44>)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	4413      	add	r3, r2
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d105      	bne.n	800825a <clear_lock+0x2a>
 800824e:	4a09      	ldr	r2, [pc, #36]	@ (8008274 <clear_lock+0x44>)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	4413      	add	r3, r2
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d9eb      	bls.n	800823e <clear_lock+0xe>
	}
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	2000f818 	.word	0x2000f818

08008278 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	78db      	ldrb	r3, [r3, #3]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d034      	beq.n	80082f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008290:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7858      	ldrb	r0, [r3, #1]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800829c:	2301      	movs	r3, #1
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	f7ff fd40 	bl	8007d24 <disk_write>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
 80082ae:	e022      	b.n	80082f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d217      	bcs.n	80082f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	e010      	b.n	80082f0 <sync_window+0x78>
					wsect += fs->fsize;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4413      	add	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7858      	ldrb	r0, [r3, #1]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80082e2:	2301      	movs	r3, #1
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	f7ff fd1d 	bl	8007d24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d8eb      	bhi.n	80082ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d01b      	beq.n	8008350 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff ffad 	bl	8008278 <sync_window>
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d113      	bne.n	8008350 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7858      	ldrb	r0, [r3, #1]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008332:	2301      	movs	r3, #1
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	f7ff fcd5 	bl	8007ce4 <disk_read>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008340:	f04f 33ff 	mov.w	r3, #4294967295
 8008344:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff ff87 	bl	8008278 <sync_window>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d159      	bne.n	8008428 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d149      	bne.n	8008410 <sync_fs+0xb4>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	791b      	ldrb	r3, [r3, #4]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d145      	bne.n	8008410 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	899b      	ldrh	r3, [r3, #12]
 800838e:	461a      	mov	r2, r3
 8008390:	2100      	movs	r1, #0
 8008392:	f7ff fda8 	bl	8007ee6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3338      	adds	r3, #56	@ 0x38
 800839a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800839e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff fd37 	bl	8007e16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3338      	adds	r3, #56	@ 0x38
 80083ac:	4921      	ldr	r1, [pc, #132]	@ (8008434 <sync_fs+0xd8>)
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff fd4c 	bl	8007e4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3338      	adds	r3, #56	@ 0x38
 80083b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083bc:	491e      	ldr	r1, [pc, #120]	@ (8008438 <sync_fs+0xdc>)
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff fd44 	bl	8007e4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3338      	adds	r3, #56	@ 0x38
 80083c8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7ff fd3a 	bl	8007e4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3338      	adds	r3, #56	@ 0x38
 80083dc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f7ff fd30 	bl	8007e4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7858      	ldrb	r0, [r3, #1]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008404:	2301      	movs	r3, #1
 8008406:	f7ff fc8d 	bl	8007d24 <disk_write>
			fs->fsi_flag = 0;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2200      	movs	r2, #0
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff fca3 	bl	8007d64 <disk_ioctl>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <sync_fs+0xcc>
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	41615252 	.word	0x41615252
 8008438:	61417272 	.word	0x61417272

0800843c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	3b02      	subs	r3, #2
 800844a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	3b02      	subs	r3, #2
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d301      	bcc.n	800845c <clust2sect+0x20>
 8008458:	2300      	movs	r3, #0
 800845a:	e008      	b.n	800846e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	895b      	ldrh	r3, [r3, #10]
 8008460:	461a      	mov	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	fb03 f202 	mul.w	r2, r3, r2
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846c:	4413      	add	r3, r2
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d904      	bls.n	800849a <get_fat+0x20>
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800849a:	2301      	movs	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e0ba      	b.n	8008616 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295
 80084a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	f000 8082 	beq.w	80085b4 <get_fat+0x13a>
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	f300 80a6 	bgt.w	8008602 <get_fat+0x188>
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d002      	beq.n	80084c0 <get_fat+0x46>
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d055      	beq.n	800856a <get_fat+0xf0>
 80084be:	e0a0      	b.n	8008602 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	899b      	ldrh	r3, [r3, #12]
 80084d6:	4619      	mov	r1, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	fbb3 f3f1 	udiv	r3, r3, r1
 80084de:	4413      	add	r3, r2
 80084e0:	4619      	mov	r1, r3
 80084e2:	6938      	ldr	r0, [r7, #16]
 80084e4:	f7ff ff0c 	bl	8008300 <move_window>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 808c 	bne.w	8008608 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	60fa      	str	r2, [r7, #12]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	8992      	ldrh	r2, [r2, #12]
 80084fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80084fe:	fb01 f202 	mul.w	r2, r1, r2
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4413      	add	r3, r2
 8008508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800850c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	899b      	ldrh	r3, [r3, #12]
 8008516:	4619      	mov	r1, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	fbb3 f3f1 	udiv	r3, r3, r1
 800851e:	4413      	add	r3, r2
 8008520:	4619      	mov	r1, r3
 8008522:	6938      	ldr	r0, [r7, #16]
 8008524:	f7ff feec 	bl	8008300 <move_window>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d16e      	bne.n	800860c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	899b      	ldrh	r3, [r3, #12]
 8008532:	461a      	mov	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	fbb3 f1f2 	udiv	r1, r3, r2
 800853a:	fb01 f202 	mul.w	r2, r1, r2
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4413      	add	r3, r2
 8008544:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4313      	orrs	r3, r2
 800854e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <get_fat+0xe6>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	091b      	lsrs	r3, r3, #4
 800855e:	e002      	b.n	8008566 <get_fat+0xec>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008566:	617b      	str	r3, [r7, #20]
			break;
 8008568:	e055      	b.n	8008616 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	899b      	ldrh	r3, [r3, #12]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	4619      	mov	r1, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	fbb3 f3f1 	udiv	r3, r3, r1
 800857e:	4413      	add	r3, r2
 8008580:	4619      	mov	r1, r3
 8008582:	6938      	ldr	r0, [r7, #16]
 8008584:	f7ff febc 	bl	8008300 <move_window>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d140      	bne.n	8008610 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	8992      	ldrh	r2, [r2, #12]
 800859c:	fbb3 f0f2 	udiv	r0, r3, r2
 80085a0:	fb00 f202 	mul.w	r2, r0, r2
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	440b      	add	r3, r1
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fbf9 	bl	8007da0 <ld_word>
 80085ae:	4603      	mov	r3, r0
 80085b0:	617b      	str	r3, [r7, #20]
			break;
 80085b2:	e030      	b.n	8008616 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	899b      	ldrh	r3, [r3, #12]
 80085bc:	089b      	lsrs	r3, r3, #2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80085c8:	4413      	add	r3, r2
 80085ca:	4619      	mov	r1, r3
 80085cc:	6938      	ldr	r0, [r7, #16]
 80085ce:	f7ff fe97 	bl	8008300 <move_window>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d11d      	bne.n	8008614 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	8992      	ldrh	r2, [r2, #12]
 80085e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80085ea:	fb00 f202 	mul.w	r2, r0, r2
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	440b      	add	r3, r1
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7ff fbec 	bl	8007dd0 <ld_dword>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80085fe:	617b      	str	r3, [r7, #20]
			break;
 8008600:	e009      	b.n	8008616 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008602:	2301      	movs	r3, #1
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e006      	b.n	8008616 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008608:	bf00      	nop
 800860a:	e004      	b.n	8008616 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800860c:	bf00      	nop
 800860e:	e002      	b.n	8008616 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008610:	bf00      	nop
 8008612:	e000      	b.n	8008616 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008614:	bf00      	nop
		}
	}

	return val;
 8008616:	697b      	ldr	r3, [r7, #20]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b089      	sub	sp, #36	@ 0x24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800862c:	2302      	movs	r3, #2
 800862e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b01      	cmp	r3, #1
 8008634:	f240 8109 	bls.w	800884a <put_fat+0x22a>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	f080 8103 	bcs.w	800884a <put_fat+0x22a>
		switch (fs->fs_type) {
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b03      	cmp	r3, #3
 800864a:	f000 80b6 	beq.w	80087ba <put_fat+0x19a>
 800864e:	2b03      	cmp	r3, #3
 8008650:	f300 80fb 	bgt.w	800884a <put_fat+0x22a>
 8008654:	2b01      	cmp	r3, #1
 8008656:	d003      	beq.n	8008660 <put_fat+0x40>
 8008658:	2b02      	cmp	r3, #2
 800865a:	f000 8083 	beq.w	8008764 <put_fat+0x144>
 800865e:	e0f4      	b.n	800884a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4413      	add	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	899b      	ldrh	r3, [r3, #12]
 8008676:	4619      	mov	r1, r3
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	fbb3 f3f1 	udiv	r3, r3, r1
 800867e:	4413      	add	r3, r2
 8008680:	4619      	mov	r1, r3
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff fe3c 	bl	8008300 <move_window>
 8008688:	4603      	mov	r3, r0
 800868a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800868c:	7ffb      	ldrb	r3, [r7, #31]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f040 80d4 	bne.w	800883c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	61ba      	str	r2, [r7, #24]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	8992      	ldrh	r2, [r2, #12]
 80086a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80086a8:	fb00 f202 	mul.w	r2, r0, r2
 80086ac:	1a9b      	subs	r3, r3, r2
 80086ae:	440b      	add	r3, r1
 80086b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00d      	beq.n	80086d8 <put_fat+0xb8>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b25b      	sxtb	r3, r3
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	b25a      	sxtb	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	b25b      	sxtb	r3, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	b25b      	sxtb	r3, r3
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	e001      	b.n	80086dc <put_fat+0xbc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	899b      	ldrh	r3, [r3, #12]
 80086ee:	4619      	mov	r1, r3
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086f6:	4413      	add	r3, r2
 80086f8:	4619      	mov	r1, r3
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff fe00 	bl	8008300 <move_window>
 8008700:	4603      	mov	r3, r0
 8008702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008704:	7ffb      	ldrb	r3, [r7, #31]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 809a 	bne.w	8008840 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	899b      	ldrh	r3, [r3, #12]
 8008716:	461a      	mov	r2, r3
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	fbb3 f0f2 	udiv	r0, r3, r2
 800871e:	fb00 f202 	mul.w	r2, r0, r2
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	440b      	add	r3, r1
 8008726:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <put_fat+0x11a>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	091b      	lsrs	r3, r3, #4
 8008736:	b2db      	uxtb	r3, r3
 8008738:	e00e      	b.n	8008758 <put_fat+0x138>
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b25b      	sxtb	r3, r3
 8008740:	f023 030f 	bic.w	r3, r3, #15
 8008744:	b25a      	sxtb	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	0a1b      	lsrs	r3, r3, #8
 800874a:	b25b      	sxtb	r3, r3
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	b25b      	sxtb	r3, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	b25b      	sxtb	r3, r3
 8008756:	b2db      	uxtb	r3, r3
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	70da      	strb	r2, [r3, #3]
			break;
 8008762:	e072      	b.n	800884a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	899b      	ldrh	r3, [r3, #12]
 800876c:	085b      	lsrs	r3, r3, #1
 800876e:	b29b      	uxth	r3, r3
 8008770:	4619      	mov	r1, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	fbb3 f3f1 	udiv	r3, r3, r1
 8008778:	4413      	add	r3, r2
 800877a:	4619      	mov	r1, r3
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff fdbf 	bl	8008300 <move_window>
 8008782:	4603      	mov	r3, r0
 8008784:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008786:	7ffb      	ldrb	r3, [r7, #31]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d15b      	bne.n	8008844 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	8992      	ldrh	r2, [r2, #12]
 800879a:	fbb3 f0f2 	udiv	r0, r3, r2
 800879e:	fb00 f202 	mul.w	r2, r0, r2
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	440b      	add	r3, r1
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	b292      	uxth	r2, r2
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fb32 	bl	8007e16 <st_word>
			fs->wflag = 1;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	70da      	strb	r2, [r3, #3]
			break;
 80087b8:	e047      	b.n	800884a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	899b      	ldrh	r3, [r3, #12]
 80087c2:	089b      	lsrs	r3, r3, #2
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4619      	mov	r1, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ce:	4413      	add	r3, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff fd94 	bl	8008300 <move_window>
 80087d8:	4603      	mov	r3, r0
 80087da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087dc:	7ffb      	ldrb	r3, [r7, #31]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d132      	bne.n	8008848 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	8992      	ldrh	r2, [r2, #12]
 80087f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80087fa:	fb00 f202 	mul.w	r2, r0, r2
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	440b      	add	r3, r1
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fae4 	bl	8007dd0 <ld_dword>
 8008808:	4603      	mov	r3, r0
 800880a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800880e:	4323      	orrs	r3, r4
 8008810:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	8992      	ldrh	r2, [r2, #12]
 8008820:	fbb3 f0f2 	udiv	r0, r3, r2
 8008824:	fb00 f202 	mul.w	r2, r0, r2
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	440b      	add	r3, r1
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fb0c 	bl	8007e4c <st_dword>
			fs->wflag = 1;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	70da      	strb	r2, [r3, #3]
			break;
 800883a:	e006      	b.n	800884a <put_fat+0x22a>
			if (res != FR_OK) break;
 800883c:	bf00      	nop
 800883e:	e004      	b.n	800884a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008840:	bf00      	nop
 8008842:	e002      	b.n	800884a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008848:	bf00      	nop
		}
	}
	return res;
 800884a:	7ffb      	ldrb	r3, [r7, #31]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3724      	adds	r7, #36	@ 0x24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd90      	pop	{r4, r7, pc}

08008854 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d904      	bls.n	800887a <remove_chain+0x26>
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	429a      	cmp	r2, r3
 8008878:	d301      	bcc.n	800887e <remove_chain+0x2a>
 800887a:	2302      	movs	r3, #2
 800887c:	e04b      	b.n	8008916 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00c      	beq.n	800889e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	69b8      	ldr	r0, [r7, #24]
 800888c:	f7ff fec8 	bl	8008620 <put_fat>
 8008890:	4603      	mov	r3, r0
 8008892:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008894:	7ffb      	ldrb	r3, [r7, #31]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <remove_chain+0x4a>
 800889a:	7ffb      	ldrb	r3, [r7, #31]
 800889c:	e03b      	b.n	8008916 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800889e:	68b9      	ldr	r1, [r7, #8]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fdea 	bl	800847a <get_fat>
 80088a6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d031      	beq.n	8008912 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <remove_chain+0x64>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e02e      	b.n	8008916 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d101      	bne.n	80088c4 <remove_chain+0x70>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e028      	b.n	8008916 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80088c4:	2200      	movs	r2, #0
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	69b8      	ldr	r0, [r7, #24]
 80088ca:	f7ff fea9 	bl	8008620 <put_fat>
 80088ce:	4603      	mov	r3, r0
 80088d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80088d2:	7ffb      	ldrb	r3, [r7, #31]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <remove_chain+0x88>
 80088d8:	7ffb      	ldrb	r3, [r7, #31]
 80088da:	e01c      	b.n	8008916 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	699a      	ldr	r2, [r3, #24]
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	3b02      	subs	r3, #2
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d20b      	bcs.n	8008902 <remove_chain+0xae>
			fs->free_clst++;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	791b      	ldrb	r3, [r3, #4]
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	429a      	cmp	r2, r3
 800890e:	d3c6      	bcc.n	800889e <remove_chain+0x4a>
 8008910:	e000      	b.n	8008914 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008912:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b088      	sub	sp, #32
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10d      	bne.n	8008950 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <create_chain+0x2c>
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	429a      	cmp	r2, r3
 8008948:	d31b      	bcc.n	8008982 <create_chain+0x64>
 800894a:	2301      	movs	r3, #1
 800894c:	61bb      	str	r3, [r7, #24]
 800894e:	e018      	b.n	8008982 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff fd91 	bl	800847a <get_fat>
 8008958:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d801      	bhi.n	8008964 <create_chain+0x46>
 8008960:	2301      	movs	r3, #1
 8008962:	e070      	b.n	8008a46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896a:	d101      	bne.n	8008970 <create_chain+0x52>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	e06a      	b.n	8008a46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	429a      	cmp	r2, r3
 8008978:	d201      	bcs.n	800897e <create_chain+0x60>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	e063      	b.n	8008a46 <create_chain+0x128>
		scl = clst;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3301      	adds	r3, #1
 800898a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	429a      	cmp	r2, r3
 8008994:	d307      	bcc.n	80089a6 <create_chain+0x88>
				ncl = 2;
 8008996:	2302      	movs	r3, #2
 8008998:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d901      	bls.n	80089a6 <create_chain+0x88>
 80089a2:	2300      	movs	r3, #0
 80089a4:	e04f      	b.n	8008a46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80089a6:	69f9      	ldr	r1, [r7, #28]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff fd66 	bl	800847a <get_fat>
 80089ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d003      	beq.n	80089c4 <create_chain+0xa6>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c2:	d101      	bne.n	80089c8 <create_chain+0xaa>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e03e      	b.n	8008a46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d1da      	bne.n	8008986 <create_chain+0x68>
 80089d0:	2300      	movs	r3, #0
 80089d2:	e038      	b.n	8008a46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80089d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295
 80089da:	69f9      	ldr	r1, [r7, #28]
 80089dc:	6938      	ldr	r0, [r7, #16]
 80089de:	f7ff fe1f 	bl	8008620 <put_fat>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d109      	bne.n	8008a00 <create_chain+0xe2>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d006      	beq.n	8008a00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80089f2:	69fa      	ldr	r2, [r7, #28]
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6938      	ldr	r0, [r7, #16]
 80089f8:	f7ff fe12 	bl	8008620 <put_fat>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d116      	bne.n	8008a34 <create_chain+0x116>
		fs->last_clst = ncl;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	3b02      	subs	r3, #2
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d804      	bhi.n	8008a24 <create_chain+0x106>
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	1e5a      	subs	r2, r3, #1
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	791b      	ldrb	r3, [r3, #4]
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	711a      	strb	r2, [r3, #4]
 8008a32:	e007      	b.n	8008a44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d102      	bne.n	8008a40 <create_chain+0x122>
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3e:	e000      	b.n	8008a42 <create_chain+0x124>
 8008a40:	2301      	movs	r3, #1
 8008a42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008a44:	69fb      	ldr	r3, [r7, #28]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b087      	sub	sp, #28
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	3304      	adds	r3, #4
 8008a64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	899b      	ldrh	r3, [r3, #12]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	8952      	ldrh	r2, [r2, #10]
 8008a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1d1a      	adds	r2, r3, #4
 8008a80:	613a      	str	r2, [r7, #16]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <clmt_clust+0x42>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e010      	b.n	8008ab2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d307      	bcc.n	8008aa8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	617b      	str	r3, [r7, #20]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008aa6:	e7e9      	b.n	8008a7c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008aa8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	4413      	add	r3, r2
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ad4:	d204      	bcs.n	8008ae0 <dir_sdi+0x22>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e071      	b.n	8008bc8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <dir_sdi+0x46>
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d902      	bls.n	8008b04 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10c      	bne.n	8008b24 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	8912      	ldrh	r2, [r2, #8]
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d301      	bcc.n	8008b1a <dir_sdi+0x5c>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e056      	b.n	8008bc8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	61da      	str	r2, [r3, #28]
 8008b22:	e02d      	b.n	8008b80 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	895b      	ldrh	r3, [r3, #10]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	899b      	ldrh	r3, [r3, #12]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b34:	e019      	b.n	8008b6a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6979      	ldr	r1, [r7, #20]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fc9d 	bl	800847a <get_fat>
 8008b40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d101      	bne.n	8008b4e <dir_sdi+0x90>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e03c      	b.n	8008bc8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d904      	bls.n	8008b5e <dir_sdi+0xa0>
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d301      	bcc.n	8008b62 <dir_sdi+0xa4>
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e032      	b.n	8008bc8 <dir_sdi+0x10a>
			ofs -= csz;
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d2e1      	bcs.n	8008b36 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	6938      	ldr	r0, [r7, #16]
 8008b76:	f7ff fc61 	bl	800843c <clust2sect>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <dir_sdi+0xd4>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e01a      	b.n	8008bc8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	899b      	ldrh	r3, [r3, #12]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba2:	441a      	add	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	899b      	ldrh	r3, [r3, #12]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bba:	fb00 f202 	mul.w	r2, r0, r2
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	18ca      	adds	r2, r1, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	3320      	adds	r3, #32
 8008be6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <dir_next+0x28>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bf6:	d301      	bcc.n	8008bfc <dir_next+0x2c>
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	e0bb      	b.n	8008d74 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	899b      	ldrh	r3, [r3, #12]
 8008c00:	461a      	mov	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c08:	fb01 f202 	mul.w	r2, r1, r2
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 809d 	bne.w	8008d4e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	8912      	ldrh	r2, [r2, #8]
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	f0c0 808d 	bcc.w	8008d4e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	61da      	str	r2, [r3, #28]
 8008c3a:	2304      	movs	r3, #4
 8008c3c:	e09a      	b.n	8008d74 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	899b      	ldrh	r3, [r3, #12]
 8008c42:	461a      	mov	r2, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	8952      	ldrh	r2, [r2, #10]
 8008c4e:	3a01      	subs	r2, #1
 8008c50:	4013      	ands	r3, r2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d17b      	bne.n	8008d4e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f7ff fc0b 	bl	800847a <get_fat>
 8008c64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d801      	bhi.n	8008c70 <dir_next+0xa0>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e081      	b.n	8008d74 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d101      	bne.n	8008c7c <dir_next+0xac>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e07b      	b.n	8008d74 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d359      	bcc.n	8008d3a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	61da      	str	r2, [r3, #28]
 8008c92:	2304      	movs	r3, #4
 8008c94:	e06e      	b.n	8008d74 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f7ff fe3d 	bl	800891e <create_chain>
 8008ca4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <dir_next+0xe0>
 8008cac:	2307      	movs	r3, #7
 8008cae:	e061      	b.n	8008d74 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <dir_next+0xea>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e05c      	b.n	8008d74 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d101      	bne.n	8008cc6 <dir_next+0xf6>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e056      	b.n	8008d74 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff fad6 	bl	8008278 <sync_window>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <dir_next+0x106>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e04e      	b.n	8008d74 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	899b      	ldrh	r3, [r3, #12]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	f7ff f8ff 	bl	8007ee6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	6979      	ldr	r1, [r7, #20]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff fba4 	bl	800843c <clust2sect>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8008cfa:	e012      	b.n	8008d22 <dir_next+0x152>
						fs->wflag = 1;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff fab8 	bl	8008278 <sync_window>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <dir_next+0x142>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e030      	b.n	8008d74 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3301      	adds	r3, #1
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	895b      	ldrh	r3, [r3, #10]
 8008d26:	461a      	mov	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d3e6      	bcc.n	8008cfc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad2      	subs	r2, r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008d40:	6979      	ldr	r1, [r7, #20]
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff fb7a 	bl	800843c <clust2sect>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	899b      	ldrh	r3, [r3, #12]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d66:	fb00 f202 	mul.w	r2, r0, r2
 8008d6a:	1a9b      	subs	r3, r3, r2
 8008d6c:	18ca      	adds	r2, r1, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fe95 	bl	8008abe <dir_sdi>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d12b      	bne.n	8008df6 <dir_alloc+0x7a>
		n = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff faa9 	bl	8008300 <move_window>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d11d      	bne.n	8008df4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2be5      	cmp	r3, #229	@ 0xe5
 8008dc0:	d004      	beq.n	8008dcc <dir_alloc+0x50>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d107      	bne.n	8008ddc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d102      	bne.n	8008de0 <dir_alloc+0x64>
 8008dda:	e00c      	b.n	8008df6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ddc:	2300      	movs	r3, #0
 8008dde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008de0:	2101      	movs	r1, #1
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fef4 	bl	8008bd0 <dir_next>
 8008de8:	4603      	mov	r3, r0
 8008dea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0d7      	beq.n	8008da2 <dir_alloc+0x26>
 8008df2:	e000      	b.n	8008df6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008df4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d101      	bne.n	8008e00 <dir_alloc+0x84>
 8008dfc:	2307      	movs	r3, #7
 8008dfe:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	331a      	adds	r3, #26
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe ffc1 	bl	8007da0 <ld_word>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d109      	bne.n	8008e3e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	3314      	adds	r3, #20
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe ffb6 	bl	8007da0 <ld_word>
 8008e34:	4603      	mov	r3, r0
 8008e36:	041b      	lsls	r3, r3, #16
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	331a      	adds	r3, #26
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	b292      	uxth	r2, r2
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe ffd9 	bl	8007e16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d109      	bne.n	8008e80 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f103 0214 	add.w	r2, r3, #20
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe ffcb 	bl	8007e16 <st_word>
	}
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008e88:	b590      	push	{r4, r7, lr}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	331a      	adds	r3, #26
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe ff82 	bl	8007da0 <ld_word>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <cmp_lfn+0x1e>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e059      	b.n	8008f5a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eae:	1e5a      	subs	r2, r3, #1
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	81fb      	strh	r3, [r7, #14]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	613b      	str	r3, [r7, #16]
 8008ec4:	e033      	b.n	8008f2e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008ec6:	4a27      	ldr	r2, [pc, #156]	@ (8008f64 <cmp_lfn+0xdc>)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4413      	add	r3, r2
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe ff63 	bl	8007da0 <ld_word>
 8008eda:	4603      	mov	r3, r0
 8008edc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01a      	beq.n	8008f1a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ee8:	d812      	bhi.n	8008f10 <cmp_lfn+0x88>
 8008eea:	89bb      	ldrh	r3, [r7, #12]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 f961 	bl	800b1b4 <ff_wtoupper>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	461c      	mov	r4, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	617a      	str	r2, [r7, #20]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	4413      	add	r3, r2
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f002 f955 	bl	800b1b4 <ff_wtoupper>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	d001      	beq.n	8008f14 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008f10:	2300      	movs	r3, #0
 8008f12:	e022      	b.n	8008f5a <cmp_lfn+0xd2>
			}
			wc = uc;
 8008f14:	89bb      	ldrh	r3, [r7, #12]
 8008f16:	81fb      	strh	r3, [r7, #14]
 8008f18:	e006      	b.n	8008f28 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f1a:	89bb      	ldrh	r3, [r7, #12]
 8008f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d001      	beq.n	8008f28 <cmp_lfn+0xa0>
 8008f24:	2300      	movs	r3, #0
 8008f26:	e018      	b.n	8008f5a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b0c      	cmp	r3, #12
 8008f32:	d9c8      	bls.n	8008ec6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <cmp_lfn+0xd0>
 8008f40:	89fb      	ldrh	r3, [r7, #14]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <cmp_lfn+0xd0>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <cmp_lfn+0xd0>
 8008f54:	2300      	movs	r3, #0
 8008f56:	e000      	b.n	8008f5a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008f58:	2301      	movs	r3, #1
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd90      	pop	{r4, r7, pc}
 8008f62:	bf00      	nop
 8008f64:	0800d448 	.word	0x0800d448

08008f68 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4611      	mov	r1, r2
 8008f74:	461a      	mov	r2, r3
 8008f76:	460b      	mov	r3, r1
 8008f78:	71fb      	strb	r3, [r7, #7]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	330d      	adds	r3, #13
 8008f82:	79ba      	ldrb	r2, [r7, #6]
 8008f84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	330b      	adds	r3, #11
 8008f8a:	220f      	movs	r2, #15
 8008f8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	330c      	adds	r3, #12
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	331a      	adds	r3, #26
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe ff3a 	bl	8007e16 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	1e5a      	subs	r2, r3, #1
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	82fb      	strh	r3, [r7, #22]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008fba:	8afb      	ldrh	r3, [r7, #22]
 8008fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d007      	beq.n	8008fd4 <put_lfn+0x6c>
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	61fa      	str	r2, [r7, #28]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008fd4:	4a17      	ldr	r2, [pc, #92]	@ (8009034 <put_lfn+0xcc>)
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	4413      	add	r3, r2
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	8afa      	ldrh	r2, [r7, #22]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe ff15 	bl	8007e16 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008fec:	8afb      	ldrh	r3, [r7, #22]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <put_lfn+0x90>
 8008ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ff6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b0c      	cmp	r3, #12
 8009002:	d9da      	bls.n	8008fba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009004:	8afb      	ldrh	r3, [r7, #22]
 8009006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800900a:	4293      	cmp	r3, r2
 800900c:	d006      	beq.n	800901c <put_lfn+0xb4>
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <put_lfn+0xbc>
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009022:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	79fa      	ldrb	r2, [r7, #7]
 8009028:	701a      	strb	r2, [r3, #0]
}
 800902a:	bf00      	nop
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	0800d448 	.word	0x0800d448

08009038 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08c      	sub	sp, #48	@ 0x30
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009046:	220b      	movs	r2, #11
 8009048:	68b9      	ldr	r1, [r7, #8]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7fe ff2a 	bl	8007ea4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b05      	cmp	r3, #5
 8009054:	d92b      	bls.n	80090ae <gen_numname+0x76>
		sr = seq;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800905a:	e022      	b.n	80090a2 <gen_numname+0x6a>
			wc = *lfn++;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	1c9a      	adds	r2, r3, #2
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8009066:	2300      	movs	r3, #0
 8009068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800906a:	e017      	b.n	800909c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	005a      	lsls	r2, r3, #1
 8009070:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	4413      	add	r3, r2
 8009078:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800907a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800907c:	085b      	lsrs	r3, r3, #1
 800907e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <gen_numname+0x5e>
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8009090:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8009094:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009098:	3301      	adds	r3, #1
 800909a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800909c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909e:	2b0f      	cmp	r3, #15
 80090a0:	d9e4      	bls.n	800906c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d8      	bne.n	800905c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80090ae:	2307      	movs	r3, #7
 80090b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	3330      	adds	r3, #48	@ 0x30
 80090be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80090c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090c6:	2b39      	cmp	r3, #57	@ 0x39
 80090c8:	d904      	bls.n	80090d4 <gen_numname+0x9c>
 80090ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090ce:	3307      	adds	r3, #7
 80090d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	1e5a      	subs	r2, r3, #1
 80090d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80090da:	3330      	adds	r3, #48	@ 0x30
 80090dc:	443b      	add	r3, r7
 80090de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80090e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	091b      	lsrs	r3, r3, #4
 80090ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1df      	bne.n	80090b2 <gen_numname+0x7a>
	ns[i] = '~';
 80090f2:	f107 0214 	add.w	r2, r7, #20
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	4413      	add	r3, r2
 80090fa:	227e      	movs	r2, #126	@ 0x7e
 80090fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80090fe:	2300      	movs	r3, #0
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
 8009102:	e002      	b.n	800910a <gen_numname+0xd2>
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	3301      	adds	r3, #1
 8009108:	627b      	str	r3, [r7, #36]	@ 0x24
 800910a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910e:	429a      	cmp	r2, r3
 8009110:	d205      	bcs.n	800911e <gen_numname+0xe6>
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	4413      	add	r3, r2
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b20      	cmp	r3, #32
 800911c:	d1f2      	bne.n	8009104 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009120:	2b07      	cmp	r3, #7
 8009122:	d807      	bhi.n	8009134 <gen_numname+0xfc>
 8009124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	62ba      	str	r2, [r7, #40]	@ 0x28
 800912a:	3330      	adds	r3, #48	@ 0x30
 800912c:	443b      	add	r3, r7
 800912e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009132:	e000      	b.n	8009136 <gen_numname+0xfe>
 8009134:	2120      	movs	r1, #32
 8009136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	627a      	str	r2, [r7, #36]	@ 0x24
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4413      	add	r3, r2
 8009140:	460a      	mov	r2, r1
 8009142:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	2b07      	cmp	r3, #7
 8009148:	d9e9      	bls.n	800911e <gen_numname+0xe6>
}
 800914a:	bf00      	nop
 800914c:	bf00      	nop
 800914e:	3730      	adds	r7, #48	@ 0x30
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009160:	230b      	movs	r3, #11
 8009162:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	b2da      	uxtb	r2, r3
 8009168:	0852      	lsrs	r2, r2, #1
 800916a:	01db      	lsls	r3, r3, #7
 800916c:	4313      	orrs	r3, r2
 800916e:	b2da      	uxtb	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	1c59      	adds	r1, r3, #1
 8009174:	6079      	str	r1, [r7, #4]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	4413      	add	r3, r2
 800917a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	3b01      	subs	r3, #1
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1ed      	bne.n	8009164 <sum_sfn+0x10>
	return sum;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b086      	sub	sp, #24
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091a4:	2100      	movs	r1, #0
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff fc89 	bl	8008abe <dir_sdi>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <dir_find+0x24>
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	e0a9      	b.n	800930e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80091ba:	23ff      	movs	r3, #255	@ 0xff
 80091bc:	753b      	strb	r3, [r7, #20]
 80091be:	7d3b      	ldrb	r3, [r7, #20]
 80091c0:	757b      	strb	r3, [r7, #21]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6938      	ldr	r0, [r7, #16]
 80091d2:	f7ff f895 	bl	8008300 <move_window>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 8090 	bne.w	8009302 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80091ea:	7dbb      	ldrb	r3, [r7, #22]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <dir_find+0x60>
 80091f0:	2304      	movs	r3, #4
 80091f2:	75fb      	strb	r3, [r7, #23]
 80091f4:	e08a      	b.n	800930c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	330b      	adds	r3, #11
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009202:	73fb      	strb	r3, [r7, #15]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800920a:	7dbb      	ldrb	r3, [r7, #22]
 800920c:	2be5      	cmp	r3, #229	@ 0xe5
 800920e:	d007      	beq.n	8009220 <dir_find+0x8a>
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <dir_find+0x98>
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2b0f      	cmp	r3, #15
 800921e:	d006      	beq.n	800922e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009220:	23ff      	movs	r3, #255	@ 0xff
 8009222:	757b      	strb	r3, [r7, #21]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f04f 32ff 	mov.w	r2, #4294967295
 800922a:	631a      	str	r2, [r3, #48]	@ 0x30
 800922c:	e05e      	b.n	80092ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	2b0f      	cmp	r3, #15
 8009232:	d136      	bne.n	80092a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800923a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d154      	bne.n	80092ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009242:	7dbb      	ldrb	r3, [r7, #22]
 8009244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00d      	beq.n	8009268 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	7b5b      	ldrb	r3, [r3, #13]
 8009252:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009254:	7dbb      	ldrb	r3, [r7, #22]
 8009256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800925a:	75bb      	strb	r3, [r7, #22]
 800925c:	7dbb      	ldrb	r3, [r7, #22]
 800925e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	695a      	ldr	r2, [r3, #20]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009268:	7dba      	ldrb	r2, [r7, #22]
 800926a:	7d7b      	ldrb	r3, [r7, #21]
 800926c:	429a      	cmp	r2, r3
 800926e:	d115      	bne.n	800929c <dir_find+0x106>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	330d      	adds	r3, #13
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	7d3a      	ldrb	r2, [r7, #20]
 800927a:	429a      	cmp	r2, r3
 800927c:	d10e      	bne.n	800929c <dir_find+0x106>
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7ff fdfd 	bl	8008e88 <cmp_lfn>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <dir_find+0x106>
 8009294:	7d7b      	ldrb	r3, [r7, #21]
 8009296:	3b01      	subs	r3, #1
 8009298:	b2db      	uxtb	r3, r3
 800929a:	e000      	b.n	800929e <dir_find+0x108>
 800929c:	23ff      	movs	r3, #255	@ 0xff
 800929e:	757b      	strb	r3, [r7, #21]
 80092a0:	e024      	b.n	80092ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80092a2:	7d7b      	ldrb	r3, [r7, #21]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <dir_find+0x126>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff ff51 	bl	8009154 <sum_sfn>
 80092b2:	4603      	mov	r3, r0
 80092b4:	461a      	mov	r2, r3
 80092b6:	7d3b      	ldrb	r3, [r7, #20]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d024      	beq.n	8009306 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <dir_find+0x14a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a18      	ldr	r0, [r3, #32]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3324      	adds	r3, #36	@ 0x24
 80092d2:	220b      	movs	r2, #11
 80092d4:	4619      	mov	r1, r3
 80092d6:	f7fe fe21 	bl	8007f1c <mem_cmp>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d014      	beq.n	800930a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80092e0:	23ff      	movs	r3, #255	@ 0xff
 80092e2:	757b      	strb	r3, [r7, #21]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80092ec:	2100      	movs	r1, #0
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff fc6e 	bl	8008bd0 <dir_next>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f43f af65 	beq.w	80091ca <dir_find+0x34>
 8009300:	e004      	b.n	800930c <dir_find+0x176>
		if (res != FR_OK) break;
 8009302:	bf00      	nop
 8009304:	e002      	b.n	800930c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009306:	bf00      	nop
 8009308:	e000      	b.n	800930c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800930a:	bf00      	nop

	return res;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08c      	sub	sp, #48	@ 0x30
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800932c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <dir_register+0x20>
 8009334:	2306      	movs	r3, #6
 8009336:	e0e0      	b.n	80094fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009338:	2300      	movs	r3, #0
 800933a:	627b      	str	r3, [r7, #36]	@ 0x24
 800933c:	e002      	b.n	8009344 <dir_register+0x2c>
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	3301      	adds	r3, #1
 8009342:	627b      	str	r3, [r7, #36]	@ 0x24
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	4413      	add	r3, r2
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1f4      	bne.n	800933e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800935a:	f107 030c 	add.w	r3, r7, #12
 800935e:	220c      	movs	r2, #12
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fd9f 	bl	8007ea4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d032      	beq.n	80093d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2240      	movs	r2, #64	@ 0x40
 8009374:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009378:	2301      	movs	r3, #1
 800937a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800937c:	e016      	b.n	80093ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	f107 010c 	add.w	r1, r7, #12
 800938c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938e:	f7ff fe53 	bl	8009038 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff feff 	bl	8009196 <dir_find>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800939e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d106      	bne.n	80093b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	3301      	adds	r3, #1
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	2b63      	cmp	r3, #99	@ 0x63
 80093b0:	d9e5      	bls.n	800937e <dir_register+0x66>
 80093b2:	e000      	b.n	80093b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80093b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	2b64      	cmp	r3, #100	@ 0x64
 80093ba:	d101      	bne.n	80093c0 <dir_register+0xa8>
 80093bc:	2307      	movs	r3, #7
 80093be:	e09c      	b.n	80094fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80093c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d002      	beq.n	80093ce <dir_register+0xb6>
 80093c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093cc:	e095      	b.n	80094fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80093ce:	7dfa      	ldrb	r2, [r7, #23]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d007      	beq.n	80093f0 <dir_register+0xd8>
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	330c      	adds	r3, #12
 80093e4:	4a47      	ldr	r2, [pc, #284]	@ (8009504 <dir_register+0x1ec>)
 80093e6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ea:	089b      	lsrs	r3, r3, #2
 80093ec:	3301      	adds	r3, #1
 80093ee:	e000      	b.n	80093f2 <dir_register+0xda>
 80093f0:	2301      	movs	r3, #1
 80093f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80093f4:	6a39      	ldr	r1, [r7, #32]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fcc0 	bl	8008d7c <dir_alloc>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009406:	2b00      	cmp	r3, #0
 8009408:	d148      	bne.n	800949c <dir_register+0x184>
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	3b01      	subs	r3, #1
 800940e:	623b      	str	r3, [r7, #32]
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d042      	beq.n	800949c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	695a      	ldr	r2, [r3, #20]
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	015b      	lsls	r3, r3, #5
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fb4b 	bl	8008abe <dir_sdi>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800942e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009432:	2b00      	cmp	r3, #0
 8009434:	d132      	bne.n	800949c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3324      	adds	r3, #36	@ 0x24
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fe8a 	bl	8009154 <sum_sfn>
 8009440:	4603      	mov	r3, r0
 8009442:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	4619      	mov	r1, r3
 800944a:	69f8      	ldr	r0, [r7, #28]
 800944c:	f7fe ff58 	bl	8008300 <move_window>
 8009450:	4603      	mov	r3, r0
 8009452:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8009456:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11d      	bne.n	800949a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	6918      	ldr	r0, [r3, #16]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a19      	ldr	r1, [r3, #32]
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	7efb      	ldrb	r3, [r7, #27]
 800946c:	f7ff fd7c 	bl	8008f68 <put_lfn>
				fs->wflag = 1;
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	2201      	movs	r2, #1
 8009474:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009476:	2100      	movs	r1, #0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff fba9 	bl	8008bd0 <dir_next>
 800947e:	4603      	mov	r3, r0
 8009480:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009484:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009488:	2b00      	cmp	r3, #0
 800948a:	d107      	bne.n	800949c <dir_register+0x184>
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	3b01      	subs	r3, #1
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1d5      	bne.n	8009444 <dir_register+0x12c>
 8009498:	e000      	b.n	800949c <dir_register+0x184>
				if (res != FR_OK) break;
 800949a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800949c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d128      	bne.n	80094f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	4619      	mov	r1, r3
 80094aa:	69f8      	ldr	r0, [r7, #28]
 80094ac:	f7fe ff28 	bl	8008300 <move_window>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80094b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d11b      	bne.n	80094f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	2220      	movs	r2, #32
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fd0d 	bl	8007ee6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a18      	ldr	r0, [r3, #32]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3324      	adds	r3, #36	@ 0x24
 80094d4:	220b      	movs	r2, #11
 80094d6:	4619      	mov	r1, r3
 80094d8:	f7fe fce4 	bl	8007ea4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	330c      	adds	r3, #12
 80094e8:	f002 0218 	and.w	r2, r2, #24
 80094ec:	b2d2      	uxtb	r2, r2
 80094ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2201      	movs	r2, #1
 80094f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80094f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3730      	adds	r7, #48	@ 0x30
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	4ec4ec4f 	.word	0x4ec4ec4f

08009508 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 80ca 	beq.w	80096bc <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d032      	beq.n	8009598 <get_fileinfo+0x90>
			i = j = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	61bb      	str	r3, [r7, #24]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800953a:	e01b      	b.n	8009574 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800953c:	89fb      	ldrh	r3, [r7, #14]
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f001 fdfb 	bl	800b13c <ff_convert>
 8009546:	4603      	mov	r3, r0
 8009548:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800954a:	89fb      	ldrh	r3, [r7, #14]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d102      	bne.n	8009556 <get_fileinfo+0x4e>
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
 8009554:	e01a      	b.n	800958c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	2bfe      	cmp	r3, #254	@ 0xfe
 800955a:	d902      	bls.n	8009562 <get_fileinfo+0x5a>
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	e014      	b.n	800958c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	61fa      	str	r2, [r7, #28]
 8009568:	89fa      	ldrh	r2, [r7, #14]
 800956a:	b2d1      	uxtb	r1, r2
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	4413      	add	r3, r2
 8009570:	460a      	mov	r2, r1
 8009572:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	691a      	ldr	r2, [r3, #16]
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	1c59      	adds	r1, r3, #1
 800957c:	61b9      	str	r1, [r7, #24]
 800957e:	005b      	lsls	r3, r3, #1
 8009580:	4413      	add	r3, r2
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	81fb      	strh	r3, [r7, #14]
 8009586:	89fb      	ldrh	r3, [r7, #14]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1d7      	bne.n	800953c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	3316      	adds	r3, #22
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	61bb      	str	r3, [r7, #24]
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	3316      	adds	r3, #22
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80095ac:	e04d      	b.n	800964a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1a      	ldr	r2, [r3, #32]
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	1c59      	adds	r1, r3, #1
 80095b6:	61f9      	str	r1, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d041      	beq.n	8009648 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	d101      	bne.n	80095ce <get_fileinfo+0xc6>
 80095ca:	23e5      	movs	r3, #229	@ 0xe5
 80095cc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	2b09      	cmp	r3, #9
 80095d2:	d10f      	bne.n	80095f4 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 80095d4:	89bb      	ldrh	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <get_fileinfo+0xde>
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	4413      	add	r3, r2
 80095e0:	3316      	adds	r3, #22
 80095e2:	222e      	movs	r2, #46	@ 0x2e
 80095e4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	61ba      	str	r2, [r7, #24]
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	4413      	add	r3, r2
 80095f0:	222e      	movs	r2, #46	@ 0x2e
 80095f2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	4413      	add	r3, r2
 80095fa:	3309      	adds	r3, #9
 80095fc:	7dfa      	ldrb	r2, [r7, #23]
 80095fe:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009600:	89bb      	ldrh	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d11c      	bne.n	8009640 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	2b40      	cmp	r3, #64	@ 0x40
 800960a:	d913      	bls.n	8009634 <get_fileinfo+0x12c>
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b5a      	cmp	r3, #90	@ 0x5a
 8009610:	d810      	bhi.n	8009634 <get_fileinfo+0x12c>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	330c      	adds	r3, #12
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	2b08      	cmp	r3, #8
 8009620:	d901      	bls.n	8009626 <get_fileinfo+0x11e>
 8009622:	2310      	movs	r3, #16
 8009624:	e000      	b.n	8009628 <get_fileinfo+0x120>
 8009626:	2308      	movs	r3, #8
 8009628:	4013      	ands	r3, r2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	3320      	adds	r3, #32
 8009632:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	4413      	add	r3, r2
 800963a:	3316      	adds	r3, #22
 800963c:	7dfa      	ldrb	r2, [r7, #23]
 800963e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	3301      	adds	r3, #1
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	e000      	b.n	800964a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8009648:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b0a      	cmp	r3, #10
 800964e:	d9ae      	bls.n	80095ae <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8009650:	89bb      	ldrh	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10d      	bne.n	8009672 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	4413      	add	r3, r2
 800965c:	3316      	adds	r3, #22
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	330c      	adds	r3, #12
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <get_fileinfo+0x16a>
 800966e:	2300      	movs	r3, #0
 8009670:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	4413      	add	r3, r2
 8009678:	3309      	adds	r3, #9
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	7ada      	ldrb	r2, [r3, #11]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	331c      	adds	r3, #28
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fb9e 	bl	8007dd0 <ld_dword>
 8009694:	4602      	mov	r2, r0
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	3316      	adds	r3, #22
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fb95 	bl	8007dd0 <ld_dword>
 80096a6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	80da      	strh	r2, [r3, #6]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	809a      	strh	r2, [r3, #4]
 80096ba:	e000      	b.n	80096be <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80096bc:	bf00      	nop
}
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	@ 0x28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	2300      	movs	r3, #0
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	61ba      	str	r2, [r7, #24]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4413      	add	r3, r2
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80096f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096f4:	2b1f      	cmp	r3, #31
 80096f6:	d940      	bls.n	800977a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80096f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80096fc:	d006      	beq.n	800970c <create_name+0x48>
 80096fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009700:	2b5c      	cmp	r3, #92	@ 0x5c
 8009702:	d110      	bne.n	8009726 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009704:	e002      	b.n	800970c <create_name+0x48>
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	3301      	adds	r3, #1
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4413      	add	r3, r2
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b2f      	cmp	r3, #47	@ 0x2f
 8009716:	d0f6      	beq.n	8009706 <create_name+0x42>
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	4413      	add	r3, r2
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2b5c      	cmp	r3, #92	@ 0x5c
 8009722:	d0f0      	beq.n	8009706 <create_name+0x42>
			break;
 8009724:	e02a      	b.n	800977c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2bfe      	cmp	r3, #254	@ 0xfe
 800972a:	d901      	bls.n	8009730 <create_name+0x6c>
 800972c:	2306      	movs	r3, #6
 800972e:	e17d      	b.n	8009a2c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009732:	b2db      	uxtb	r3, r3
 8009734:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009738:	2101      	movs	r1, #1
 800973a:	4618      	mov	r0, r3
 800973c:	f001 fcfe 	bl	800b13c <ff_convert>
 8009740:	4603      	mov	r3, r0
 8009742:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <create_name+0x8a>
 800974a:	2306      	movs	r3, #6
 800974c:	e16e      	b.n	8009a2c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800974e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009750:	2b7f      	cmp	r3, #127	@ 0x7f
 8009752:	d809      	bhi.n	8009768 <create_name+0xa4>
 8009754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009756:	4619      	mov	r1, r3
 8009758:	488d      	ldr	r0, [pc, #564]	@ (8009990 <create_name+0x2cc>)
 800975a:	f7fe fc06 	bl	8007f6a <chk_chr>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <create_name+0xa4>
 8009764:	2306      	movs	r3, #6
 8009766:	e161      	b.n	8009a2c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	617a      	str	r2, [r7, #20]
 800976e:	005b      	lsls	r3, r3, #1
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009776:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009778:	e7b4      	b.n	80096e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800977a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	441a      	add	r2, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009788:	2b1f      	cmp	r3, #31
 800978a:	d801      	bhi.n	8009790 <create_name+0xcc>
 800978c:	2304      	movs	r3, #4
 800978e:	e000      	b.n	8009792 <create_name+0xce>
 8009790:	2300      	movs	r3, #0
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009796:	e011      	b.n	80097bc <create_name+0xf8>
		w = lfn[di - 1];
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800979e:	3b01      	subs	r3, #1
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80097aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	d002      	beq.n	80097b6 <create_name+0xf2>
 80097b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80097b4:	d106      	bne.n	80097c4 <create_name+0x100>
		di--;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1ea      	bne.n	8009798 <create_name+0xd4>
 80097c2:	e000      	b.n	80097c6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80097c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <create_name+0x118>
 80097d8:	2306      	movs	r3, #6
 80097da:	e127      	b.n	8009a2c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3324      	adds	r3, #36	@ 0x24
 80097e0:	220b      	movs	r2, #11
 80097e2:	2120      	movs	r1, #32
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe fb7e 	bl	8007ee6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	e002      	b.n	80097f6 <create_name+0x132>
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	3301      	adds	r3, #1
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4413      	add	r3, r2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	2b20      	cmp	r3, #32
 8009802:	d0f5      	beq.n	80097f0 <create_name+0x12c>
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009810:	d0ee      	beq.n	80097f0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <create_name+0x168>
 8009818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800981c:	f043 0303 	orr.w	r3, r3, #3
 8009820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009824:	e002      	b.n	800982c <create_name+0x168>
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	3b01      	subs	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <create_name+0x182>
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009838:	3b01      	subs	r3, #1
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	2b2e      	cmp	r3, #46	@ 0x2e
 8009844:	d1ef      	bne.n	8009826 <create_name+0x162>

	i = b = 0; ni = 8;
 8009846:	2300      	movs	r3, #0
 8009848:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800984c:	2300      	movs	r3, #0
 800984e:	623b      	str	r3, [r7, #32]
 8009850:	2308      	movs	r3, #8
 8009852:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	61ba      	str	r2, [r7, #24]
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8090 	beq.w	800998c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800986c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800986e:	2b20      	cmp	r3, #32
 8009870:	d006      	beq.n	8009880 <create_name+0x1bc>
 8009872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009874:	2b2e      	cmp	r3, #46	@ 0x2e
 8009876:	d10a      	bne.n	800988e <create_name+0x1ca>
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	429a      	cmp	r2, r3
 800987e:	d006      	beq.n	800988e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009884:	f043 0303 	orr.w	r3, r3, #3
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800988c:	e07d      	b.n	800998a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	429a      	cmp	r2, r3
 8009894:	d203      	bcs.n	800989e <create_name+0x1da>
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	429a      	cmp	r2, r3
 800989c:	d123      	bne.n	80098e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b0b      	cmp	r3, #11
 80098a2:	d106      	bne.n	80098b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80098a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098a8:	f043 0303 	orr.w	r3, r3, #3
 80098ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80098b0:	e075      	b.n	800999e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d005      	beq.n	80098c6 <create_name+0x202>
 80098ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098be:	f043 0303 	orr.w	r3, r3, #3
 80098c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d866      	bhi.n	800999c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	2308      	movs	r3, #8
 80098d4:	623b      	str	r3, [r7, #32]
 80098d6:	230b      	movs	r3, #11
 80098d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80098da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80098e4:	e051      	b.n	800998a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80098e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80098ea:	d914      	bls.n	8009916 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80098ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 fc23 	bl	800b13c <ff_convert>
 80098f6:	4603      	mov	r3, r0
 80098f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80098fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <create_name+0x246>
 8009900:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009902:	3b80      	subs	r3, #128	@ 0x80
 8009904:	4a23      	ldr	r2, [pc, #140]	@ (8009994 <create_name+0x2d0>)
 8009906:	5cd3      	ldrb	r3, [r2, r3]
 8009908:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800990a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800990e:	f043 0302 	orr.w	r3, r3, #2
 8009912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d007      	beq.n	800992c <create_name+0x268>
 800991c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800991e:	4619      	mov	r1, r3
 8009920:	481d      	ldr	r0, [pc, #116]	@ (8009998 <create_name+0x2d4>)
 8009922:	f7fe fb22 	bl	8007f6a <chk_chr>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d008      	beq.n	800993e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800992c:	235f      	movs	r3, #95	@ 0x5f
 800992e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009934:	f043 0303 	orr.w	r3, r3, #3
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800993c:	e01b      	b.n	8009976 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800993e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009940:	2b40      	cmp	r3, #64	@ 0x40
 8009942:	d909      	bls.n	8009958 <create_name+0x294>
 8009944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009946:	2b5a      	cmp	r3, #90	@ 0x5a
 8009948:	d806      	bhi.n	8009958 <create_name+0x294>
					b |= 2;
 800994a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800994e:	f043 0302 	orr.w	r3, r3, #2
 8009952:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009956:	e00e      	b.n	8009976 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800995a:	2b60      	cmp	r3, #96	@ 0x60
 800995c:	d90b      	bls.n	8009976 <create_name+0x2b2>
 800995e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009960:	2b7a      	cmp	r3, #122	@ 0x7a
 8009962:	d808      	bhi.n	8009976 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009964:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009968:	f043 0301 	orr.w	r3, r3, #1
 800996c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009970:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009972:	3b20      	subs	r3, #32
 8009974:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	623a      	str	r2, [r7, #32]
 800997c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800997e:	b2d1      	uxtb	r1, r2
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4413      	add	r3, r2
 8009984:	460a      	mov	r2, r1
 8009986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800998a:	e763      	b.n	8009854 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800998c:	bf00      	nop
 800998e:	e006      	b.n	800999e <create_name+0x2da>
 8009990:	0800d360 	.word	0x0800d360
 8009994:	0800d3c8 	.word	0x0800d3c8
 8009998:	0800d36c 	.word	0x0800d36c
			if (si > di) break;			/* No extension */
 800999c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80099a4:	2be5      	cmp	r3, #229	@ 0xe5
 80099a6:	d103      	bne.n	80099b0 <create_name+0x2ec>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2205      	movs	r2, #5
 80099ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b08      	cmp	r3, #8
 80099b4:	d104      	bne.n	80099c0 <create_name+0x2fc>
 80099b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80099c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099c4:	f003 030c 	and.w	r3, r3, #12
 80099c8:	2b0c      	cmp	r3, #12
 80099ca:	d005      	beq.n	80099d8 <create_name+0x314>
 80099cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d105      	bne.n	80099e4 <create_name+0x320>
 80099d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099dc:	f043 0302 	orr.w	r3, r3, #2
 80099e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d117      	bne.n	8009a20 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80099f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d105      	bne.n	8009a08 <create_name+0x344>
 80099fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a00:	f043 0310 	orr.w	r3, r3, #16
 8009a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a0c:	f003 030c 	and.w	r3, r3, #12
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d105      	bne.n	8009a20 <create_name+0x35c>
 8009a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a18:	f043 0308 	orr.w	r3, r3, #8
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009a26:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009a2a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3728      	adds	r7, #40	@ 0x28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009a48:	e002      	b.n	8009a50 <follow_path+0x1c>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a56:	d0f8      	beq.n	8009a4a <follow_path+0x16>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a5e:	d0f4      	beq.n	8009a4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2200      	movs	r2, #0
 8009a64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b1f      	cmp	r3, #31
 8009a6c:	d80a      	bhi.n	8009a84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2280      	movs	r2, #128	@ 0x80
 8009a72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009a76:	2100      	movs	r1, #0
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff f820 	bl	8008abe <dir_sdi>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	75fb      	strb	r3, [r7, #23]
 8009a82:	e048      	b.n	8009b16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a84:	463b      	mov	r3, r7
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff fe1b 	bl	80096c4 <create_name>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d139      	bne.n	8009b0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7ff fb7c 	bl	8009196 <dir_find>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009aa8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d12c      	bne.n	8009b10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d127      	bne.n	8009b10 <follow_path+0xdc>
 8009ac0:	2305      	movs	r3, #5
 8009ac2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ac4:	e024      	b.n	8009b10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ac6:	7afb      	ldrb	r3, [r7, #11]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d121      	bne.n	8009b14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	799b      	ldrb	r3, [r3, #6]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009adc:	2305      	movs	r3, #5
 8009ade:	75fb      	strb	r3, [r7, #23]
 8009ae0:	e019      	b.n	8009b16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	8992      	ldrh	r2, [r2, #12]
 8009af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009af4:	fb00 f202 	mul.w	r2, r0, r2
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	440b      	add	r3, r1
 8009afc:	4619      	mov	r1, r3
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff f983 	bl	8008e0a <ld_clust>
 8009b04:	4602      	mov	r2, r0
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b0a:	e7bb      	b.n	8009a84 <follow_path+0x50>
			if (res != FR_OK) break;
 8009b0c:	bf00      	nop
 8009b0e:	e002      	b.n	8009b16 <follow_path+0xe2>
				break;
 8009b10:	bf00      	nop
 8009b12:	e000      	b.n	8009b16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b14:	bf00      	nop
			}
		}
	}

	return res;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b28:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d031      	beq.n	8009b9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	e002      	b.n	8009b44 <get_ldnumber+0x24>
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	3301      	adds	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b1f      	cmp	r3, #31
 8009b4a:	d903      	bls.n	8009b54 <get_ldnumber+0x34>
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b3a      	cmp	r3, #58	@ 0x3a
 8009b52:	d1f4      	bne.n	8009b3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	2b3a      	cmp	r3, #58	@ 0x3a
 8009b5a:	d11c      	bne.n	8009b96 <get_ldnumber+0x76>
			tp = *path;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	60fa      	str	r2, [r7, #12]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	3b30      	subs	r3, #48	@ 0x30
 8009b6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	d80e      	bhi.n	8009b92 <get_ldnumber+0x72>
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d10a      	bne.n	8009b92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d107      	bne.n	8009b92 <get_ldnumber+0x72>
					vol = (int)i;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	e002      	b.n	8009b9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009b96:	2300      	movs	r3, #0
 8009b98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009b9a:	693b      	ldr	r3, [r7, #16]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	70da      	strb	r2, [r3, #3]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbe:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fe fb9c 	bl	8008300 <move_window>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <check_fs+0x2a>
 8009bce:	2304      	movs	r3, #4
 8009bd0:	e038      	b.n	8009c44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3338      	adds	r3, #56	@ 0x38
 8009bd6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe f8e0 	bl	8007da0 <ld_word>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d001      	beq.n	8009bf0 <check_fs+0x48>
 8009bec:	2303      	movs	r3, #3
 8009bee:	e029      	b.n	8009c44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009bf6:	2be9      	cmp	r3, #233	@ 0xe9
 8009bf8:	d009      	beq.n	8009c0e <check_fs+0x66>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c00:	2beb      	cmp	r3, #235	@ 0xeb
 8009c02:	d11e      	bne.n	8009c42 <check_fs+0x9a>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009c0a:	2b90      	cmp	r3, #144	@ 0x90
 8009c0c:	d119      	bne.n	8009c42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3338      	adds	r3, #56	@ 0x38
 8009c12:	3336      	adds	r3, #54	@ 0x36
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe f8db 	bl	8007dd0 <ld_dword>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009c20:	4a0a      	ldr	r2, [pc, #40]	@ (8009c4c <check_fs+0xa4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d101      	bne.n	8009c2a <check_fs+0x82>
 8009c26:	2300      	movs	r3, #0
 8009c28:	e00c      	b.n	8009c44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3338      	adds	r3, #56	@ 0x38
 8009c2e:	3352      	adds	r3, #82	@ 0x52
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe f8cd 	bl	8007dd0 <ld_dword>
 8009c36:	4603      	mov	r3, r0
 8009c38:	4a05      	ldr	r2, [pc, #20]	@ (8009c50 <check_fs+0xa8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d101      	bne.n	8009c42 <check_fs+0x9a>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e000      	b.n	8009c44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009c42:	2302      	movs	r3, #2
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	00544146 	.word	0x00544146
 8009c50:	33544146 	.word	0x33544146

08009c54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b096      	sub	sp, #88	@ 0x58
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff ff59 	bl	8009b20 <get_ldnumber>
 8009c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da01      	bge.n	8009c7a <find_volume+0x26>
 8009c76:	230b      	movs	r3, #11
 8009c78:	e265      	b.n	800a146 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009c7a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ef8 <find_volume+0x2a4>)
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <find_volume+0x3a>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	e25b      	b.n	800a146 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009c94:	79fb      	ldrb	r3, [r7, #7]
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01a      	beq.n	8009cda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca6:	785b      	ldrb	r3, [r3, #1]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fd ffd9 	bl	8007c60 <disk_status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10c      	bne.n	8009cda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <find_volume+0x82>
 8009cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cca:	f003 0304 	and.w	r3, r3, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009cd2:	230a      	movs	r3, #10
 8009cd4:	e237      	b.n	800a146 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e235      	b.n	800a146 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd ffd1 	bl	8007c94 <disk_initialize>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d04:	2303      	movs	r3, #3
 8009d06:	e21e      	b.n	800a146 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <find_volume+0xca>
 8009d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d12:	f003 0304 	and.w	r3, r3, #4
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d1a:	230a      	movs	r3, #10
 8009d1c:	e213      	b.n	800a146 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	7858      	ldrb	r0, [r3, #1]
 8009d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d24:	330c      	adds	r3, #12
 8009d26:	461a      	mov	r2, r3
 8009d28:	2102      	movs	r1, #2
 8009d2a:	f7fe f81b 	bl	8007d64 <disk_ioctl>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <find_volume+0xe4>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e206      	b.n	800a146 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	899b      	ldrh	r3, [r3, #12]
 8009d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d40:	d80d      	bhi.n	8009d5e <find_volume+0x10a>
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	899b      	ldrh	r3, [r3, #12]
 8009d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d4a:	d308      	bcc.n	8009d5e <find_volume+0x10a>
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4e:	899b      	ldrh	r3, [r3, #12]
 8009d50:	461a      	mov	r2, r3
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	899b      	ldrh	r3, [r3, #12]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	4013      	ands	r3, r2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <find_volume+0x10e>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e1f1      	b.n	800a146 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009d66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d6a:	f7ff ff1d 	bl	8009ba8 <check_fs>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009d74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d149      	bne.n	8009e10 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d80:	e01e      	b.n	8009dc0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009d90:	4413      	add	r3, r2
 8009d92:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	3304      	adds	r3, #4
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d006      	beq.n	8009dac <find_volume+0x158>
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da0:	3308      	adds	r3, #8
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe f814 	bl	8007dd0 <ld_dword>
 8009da8:	4602      	mov	r2, r0
 8009daa:	e000      	b.n	8009dae <find_volume+0x15a>
 8009dac:	2200      	movs	r2, #0
 8009dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	3358      	adds	r3, #88	@ 0x58
 8009db4:	443b      	add	r3, r7
 8009db6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d9dd      	bls.n	8009d82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <find_volume+0x182>
 8009dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	3358      	adds	r3, #88	@ 0x58
 8009ddc:	443b      	add	r3, r7
 8009dde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009de2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <find_volume+0x1a2>
 8009dea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009dec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009dee:	f7ff fedb 	bl	8009ba8 <check_fs>
 8009df2:	4603      	mov	r3, r0
 8009df4:	e000      	b.n	8009df8 <find_volume+0x1a4>
 8009df6:	2303      	movs	r3, #3
 8009df8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d905      	bls.n	8009e10 <find_volume+0x1bc>
 8009e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e06:	3301      	adds	r3, #1
 8009e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d9e2      	bls.n	8009dd6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d101      	bne.n	8009e1c <find_volume+0x1c8>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e194      	b.n	800a146 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d901      	bls.n	8009e28 <find_volume+0x1d4>
 8009e24:	230d      	movs	r3, #13
 8009e26:	e18e      	b.n	800a146 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	3338      	adds	r3, #56	@ 0x38
 8009e2c:	330b      	adds	r3, #11
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fd ffb6 	bl	8007da0 <ld_word>
 8009e34:	4603      	mov	r3, r0
 8009e36:	461a      	mov	r2, r3
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	899b      	ldrh	r3, [r3, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d001      	beq.n	8009e44 <find_volume+0x1f0>
 8009e40:	230d      	movs	r3, #13
 8009e42:	e180      	b.n	800a146 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	3338      	adds	r3, #56	@ 0x38
 8009e48:	3316      	adds	r3, #22
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fd ffa8 	bl	8007da0 <ld_word>
 8009e50:	4603      	mov	r3, r0
 8009e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <find_volume+0x214>
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5c:	3338      	adds	r3, #56	@ 0x38
 8009e5e:	3324      	adds	r3, #36	@ 0x24
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fd ffb5 	bl	8007dd0 <ld_dword>
 8009e66:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e6c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e70:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7a:	789b      	ldrb	r3, [r3, #2]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d005      	beq.n	8009e8c <find_volume+0x238>
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	789b      	ldrb	r3, [r3, #2]
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d001      	beq.n	8009e8c <find_volume+0x238>
 8009e88:	230d      	movs	r3, #13
 8009e8a:	e15c      	b.n	800a146 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	789b      	ldrb	r3, [r3, #2]
 8009e90:	461a      	mov	r2, r3
 8009e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e94:	fb02 f303 	mul.w	r3, r2, r3
 8009e98:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea8:	895b      	ldrh	r3, [r3, #10]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d008      	beq.n	8009ec0 <find_volume+0x26c>
 8009eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb0:	895b      	ldrh	r3, [r3, #10]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	895b      	ldrh	r3, [r3, #10]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <find_volume+0x270>
 8009ec0:	230d      	movs	r3, #13
 8009ec2:	e140      	b.n	800a146 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec6:	3338      	adds	r3, #56	@ 0x38
 8009ec8:	3311      	adds	r3, #17
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd ff68 	bl	8007da0 <ld_word>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	891b      	ldrh	r3, [r3, #8]
 8009edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ede:	8992      	ldrh	r2, [r2, #12]
 8009ee0:	0952      	lsrs	r2, r2, #5
 8009ee2:	b292      	uxth	r2, r2
 8009ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ee8:	fb01 f202 	mul.w	r2, r1, r2
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <find_volume+0x2a8>
 8009ef4:	230d      	movs	r3, #13
 8009ef6:	e126      	b.n	800a146 <find_volume+0x4f2>
 8009ef8:	2000f810 	.word	0x2000f810

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	3338      	adds	r3, #56	@ 0x38
 8009f00:	3313      	adds	r3, #19
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fd ff4c 	bl	8007da0 <ld_word>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <find_volume+0x2cc>
 8009f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f14:	3338      	adds	r3, #56	@ 0x38
 8009f16:	3320      	adds	r3, #32
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd ff59 	bl	8007dd0 <ld_dword>
 8009f1e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f22:	3338      	adds	r3, #56	@ 0x38
 8009f24:	330e      	adds	r3, #14
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fd ff3a 	bl	8007da0 <ld_word>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f30:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <find_volume+0x2e6>
 8009f36:	230d      	movs	r3, #13
 8009f38:	e105      	b.n	800a146 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f3a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3e:	4413      	add	r3, r2
 8009f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f42:	8911      	ldrh	r1, [r2, #8]
 8009f44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f46:	8992      	ldrh	r2, [r2, #12]
 8009f48:	0952      	lsrs	r2, r2, #5
 8009f4a:	b292      	uxth	r2, r2
 8009f4c:	fbb1 f2f2 	udiv	r2, r1, r2
 8009f50:	b292      	uxth	r2, r2
 8009f52:	4413      	add	r3, r2
 8009f54:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d201      	bcs.n	8009f62 <find_volume+0x30e>
 8009f5e:	230d      	movs	r3, #13
 8009f60:	e0f1      	b.n	800a146 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f6a:	8952      	ldrh	r2, [r2, #10]
 8009f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f70:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <find_volume+0x328>
 8009f78:	230d      	movs	r3, #13
 8009f7a:	e0e4      	b.n	800a146 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f84:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d802      	bhi.n	8009f92 <find_volume+0x33e>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d802      	bhi.n	8009fa2 <find_volume+0x34e>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	1c9a      	adds	r2, r3, #2
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009fae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009fb0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb4:	441a      	add	r2, r3
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009fba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	441a      	add	r2, r3
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8009fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d11e      	bne.n	800a00a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	3338      	adds	r3, #56	@ 0x38
 8009fd0:	332a      	adds	r3, #42	@ 0x2a
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fd fee4 	bl	8007da0 <ld_word>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <find_volume+0x38e>
 8009fde:	230d      	movs	r3, #13
 8009fe0:	e0b1      	b.n	800a146 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe4:	891b      	ldrh	r3, [r3, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <find_volume+0x39a>
 8009fea:	230d      	movs	r3, #13
 8009fec:	e0ab      	b.n	800a146 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff0:	3338      	adds	r3, #56	@ 0x38
 8009ff2:	332c      	adds	r3, #44	@ 0x2c
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fd feeb 	bl	8007dd0 <ld_dword>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	647b      	str	r3, [r7, #68]	@ 0x44
 800a008:	e01f      	b.n	800a04a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00c:	891b      	ldrh	r3, [r3, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <find_volume+0x3c2>
 800a012:	230d      	movs	r3, #13
 800a014:	e097      	b.n	800a146 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a01c:	441a      	add	r2, r3
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a022:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a026:	2b02      	cmp	r3, #2
 800a028:	d103      	bne.n	800a032 <find_volume+0x3de>
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	e00a      	b.n	800a048 <find_volume+0x3f4>
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	69da      	ldr	r2, [r3, #28]
 800a036:	4613      	mov	r3, r2
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	4413      	add	r3, r2
 800a03c:	085a      	lsrs	r2, r3, #1
 800a03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a048:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04c:	6a1a      	ldr	r2, [r3, #32]
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	899b      	ldrh	r3, [r3, #12]
 800a052:	4619      	mov	r1, r3
 800a054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a056:	440b      	add	r3, r1
 800a058:	3b01      	subs	r3, #1
 800a05a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a05c:	8989      	ldrh	r1, [r1, #12]
 800a05e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a062:	429a      	cmp	r2, r3
 800a064:	d201      	bcs.n	800a06a <find_volume+0x416>
 800a066:	230d      	movs	r3, #13
 800a068:	e06d      	b.n	800a146 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	619a      	str	r2, [r3, #24]
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	699a      	ldr	r2, [r3, #24]
 800a076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a078:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07c:	2280      	movs	r2, #128	@ 0x80
 800a07e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a080:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a084:	2b03      	cmp	r3, #3
 800a086:	d149      	bne.n	800a11c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	3338      	adds	r3, #56	@ 0x38
 800a08c:	3330      	adds	r3, #48	@ 0x30
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd fe86 	bl	8007da0 <ld_word>
 800a094:	4603      	mov	r3, r0
 800a096:	2b01      	cmp	r3, #1
 800a098:	d140      	bne.n	800a11c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a09a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a09c:	3301      	adds	r3, #1
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0a2:	f7fe f92d 	bl	8008300 <move_window>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d137      	bne.n	800a11c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	3338      	adds	r3, #56	@ 0x38
 800a0b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fd fe70 	bl	8007da0 <ld_word>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d127      	bne.n	800a11c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	3338      	adds	r3, #56	@ 0x38
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd fe7d 	bl	8007dd0 <ld_dword>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a150 <find_volume+0x4fc>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d11e      	bne.n	800a11c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e0:	3338      	adds	r3, #56	@ 0x38
 800a0e2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fd fe72 	bl	8007dd0 <ld_dword>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4a19      	ldr	r2, [pc, #100]	@ (800a154 <find_volume+0x500>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d113      	bne.n	800a11c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f6:	3338      	adds	r3, #56	@ 0x38
 800a0f8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fd fe67 	bl	8007dd0 <ld_dword>
 800a102:	4602      	mov	r2, r0
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	3338      	adds	r3, #56	@ 0x38
 800a10c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a110:	4618      	mov	r0, r3
 800a112:	f7fd fe5d 	bl	8007dd0 <ld_dword>
 800a116:	4602      	mov	r2, r0
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a122:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a124:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <find_volume+0x504>)
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	3301      	adds	r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	4b0a      	ldr	r3, [pc, #40]	@ (800a158 <find_volume+0x504>)
 800a12e:	801a      	strh	r2, [r3, #0]
 800a130:	4b09      	ldr	r3, [pc, #36]	@ (800a158 <find_volume+0x504>)
 800a132:	881a      	ldrh	r2, [r3, #0]
 800a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a136:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13a:	4a08      	ldr	r2, [pc, #32]	@ (800a15c <find_volume+0x508>)
 800a13c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a13e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a140:	f7fe f876 	bl	8008230 <clear_lock>
#endif
	return FR_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3758      	adds	r7, #88	@ 0x58
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	41615252 	.word	0x41615252
 800a154:	61417272 	.word	0x61417272
 800a158:	2000f814 	.word	0x2000f814
 800a15c:	2000f838 	.word	0x2000f838

0800a160 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a16a:	2309      	movs	r3, #9
 800a16c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01c      	beq.n	800a1ae <validate+0x4e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d018      	beq.n	800a1ae <validate+0x4e>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d013      	beq.n	800a1ae <validate+0x4e>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	889a      	ldrh	r2, [r3, #4]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	88db      	ldrh	r3, [r3, #6]
 800a190:	429a      	cmp	r2, r3
 800a192:	d10c      	bne.n	800a1ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fd fd60 	bl	8007c60 <disk_status>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <validate+0x4e>
			res = FR_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <validate+0x5a>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	e000      	b.n	800a1bc <validate+0x5c>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	6013      	str	r3, [r2, #0]
	return res;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fc9c 	bl	8009b20 <get_ldnumber>
 800a1e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	da01      	bge.n	800a1f4 <f_mount+0x28>
 800a1f0:	230b      	movs	r3, #11
 800a1f2:	e02b      	b.n	800a24c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a1f4:	4a17      	ldr	r2, [pc, #92]	@ (800a254 <f_mount+0x88>)
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a204:	69b8      	ldr	r0, [r7, #24]
 800a206:	f7fe f813 	bl	8008230 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	490d      	ldr	r1, [pc, #52]	@ (800a254 <f_mount+0x88>)
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <f_mount+0x66>
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d001      	beq.n	800a236 <f_mount+0x6a>
 800a232:	2300      	movs	r3, #0
 800a234:	e00a      	b.n	800a24c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a236:	f107 010c 	add.w	r1, r7, #12
 800a23a:	f107 0308 	add.w	r3, r7, #8
 800a23e:	2200      	movs	r2, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff fd07 	bl	8009c54 <find_volume>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	2000f810 	.word	0x2000f810

0800a258 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b09a      	sub	sp, #104	@ 0x68
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	4613      	mov	r3, r2
 800a264:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <f_open+0x18>
 800a26c:	2309      	movs	r3, #9
 800a26e:	e1b7      	b.n	800a5e0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a276:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a278:	79fa      	ldrb	r2, [r7, #7]
 800a27a:	f107 0114 	add.w	r1, r7, #20
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fce6 	bl	8009c54 <find_volume>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a28e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 819b 	bne.w	800a5ce <f_open+0x376>
		dj.obj.fs = fs;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	f107 0318 	add.w	r3, r7, #24
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff fbc5 	bl	8009a34 <follow_path>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a2b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d118      	bne.n	800a2ea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a2b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a2bc:	b25b      	sxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da03      	bge.n	800a2ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800a2c2:	2306      	movs	r3, #6
 800a2c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a2c8:	e00f      	b.n	800a2ea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	bf8c      	ite	hi
 800a2d0:	2301      	movhi	r3, #1
 800a2d2:	2300      	movls	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f107 0318 	add.w	r3, r7, #24
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fd fe5e 	bl	8007fa0 <chk_lock>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	f003 031c 	and.w	r3, r3, #28
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d07f      	beq.n	800a3f4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a2f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d017      	beq.n	800a32c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a2fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a300:	2b04      	cmp	r3, #4
 800a302:	d10e      	bne.n	800a322 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a304:	f7fd fea8 	bl	8008058 <enq_lock>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d006      	beq.n	800a31c <f_open+0xc4>
 800a30e:	f107 0318 	add.w	r3, r7, #24
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff f800 	bl	8009318 <dir_register>
 800a318:	4603      	mov	r3, r0
 800a31a:	e000      	b.n	800a31e <f_open+0xc6>
 800a31c:	2312      	movs	r3, #18
 800a31e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	f043 0308 	orr.w	r3, r3, #8
 800a328:	71fb      	strb	r3, [r7, #7]
 800a32a:	e010      	b.n	800a34e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a32c:	7fbb      	ldrb	r3, [r7, #30]
 800a32e:	f003 0311 	and.w	r3, r3, #17
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <f_open+0xe6>
					res = FR_DENIED;
 800a336:	2307      	movs	r3, #7
 800a338:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a33c:	e007      	b.n	800a34e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a33e:	79fb      	ldrb	r3, [r7, #7]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <f_open+0xf6>
 800a348:	2308      	movs	r3, #8
 800a34a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a34e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a352:	2b00      	cmp	r3, #0
 800a354:	d168      	bne.n	800a428 <f_open+0x1d0>
 800a356:	79fb      	ldrb	r3, [r7, #7]
 800a358:	f003 0308 	and.w	r3, r3, #8
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d063      	beq.n	800a428 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a360:	f7fd fc20 	bl	8007ba4 <get_fattime>
 800a364:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a368:	330e      	adds	r3, #14
 800a36a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fd fd6d 	bl	8007e4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a374:	3316      	adds	r3, #22
 800a376:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fd fd67 	bl	8007e4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a380:	330b      	adds	r3, #11
 800a382:	2220      	movs	r2, #32
 800a384:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fd3c 	bl	8008e0a <ld_clust>
 800a392:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a398:	2200      	movs	r2, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fd54 	bl	8008e48 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a2:	331c      	adds	r3, #28
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fd fd50 	bl	8007e4c <st_dword>
					fs->wflag = 1;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a3b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d037      	beq.n	800a428 <f_open+0x1d0>
						dw = fs->winsect;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3bc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a3be:	f107 0318 	add.w	r3, r7, #24
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fa44 	bl	8008854 <remove_chain>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a3d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d126      	bne.n	800a428 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fd ff8e 	bl	8008300 <move_window>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3ee:	3a01      	subs	r2, #1
 800a3f0:	615a      	str	r2, [r3, #20]
 800a3f2:	e019      	b.n	800a428 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a3f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d115      	bne.n	800a428 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a3fc:	7fbb      	ldrb	r3, [r7, #30]
 800a3fe:	f003 0310 	and.w	r3, r3, #16
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <f_open+0x1b6>
					res = FR_NO_FILE;
 800a406:	2304      	movs	r3, #4
 800a408:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a40c:	e00c      	b.n	800a428 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d007      	beq.n	800a428 <f_open+0x1d0>
 800a418:	7fbb      	ldrb	r3, [r7, #30]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <f_open+0x1d0>
						res = FR_DENIED;
 800a422:	2307      	movs	r3, #7
 800a424:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a428:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d126      	bne.n	800a47e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	f003 0308 	and.w	r3, r3, #8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a440:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a44a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b01      	cmp	r3, #1
 800a454:	bf8c      	ite	hi
 800a456:	2301      	movhi	r3, #1
 800a458:	2300      	movls	r3, #0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	461a      	mov	r2, r3
 800a45e:	f107 0318 	add.w	r3, r7, #24
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd fe19 	bl	800809c <inc_lock>
 800a46a:	4602      	mov	r2, r0
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <f_open+0x226>
 800a478:	2302      	movs	r3, #2
 800a47a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a47e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a482:	2b00      	cmp	r3, #0
 800a484:	f040 80a3 	bne.w	800a5ce <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fcbb 	bl	8008e0a <ld_clust>
 800a494:	4602      	mov	r2, r0
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49c:	331c      	adds	r3, #28
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fd fc96 	bl	8007dd0 <ld_dword>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	88da      	ldrh	r2, [r3, #6]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	79fa      	ldrb	r2, [r7, #7]
 800a4c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3330      	adds	r3, #48	@ 0x30
 800a4da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fd fd00 	bl	8007ee6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	f003 0320 	and.w	r3, r3, #32
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d06e      	beq.n	800a5ce <f_open+0x376>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d06a      	beq.n	800a5ce <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	895b      	ldrh	r3, [r3, #10]
 800a504:	461a      	mov	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	899b      	ldrh	r3, [r3, #12]
 800a50a:	fb02 f303 	mul.w	r3, r2, r3
 800a50e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a51c:	e016      	b.n	800a54c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a522:	4618      	mov	r0, r3
 800a524:	f7fd ffa9 	bl	800847a <get_fat>
 800a528:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a52a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d802      	bhi.n	800a536 <f_open+0x2de>
 800a530:	2302      	movs	r3, #2
 800a532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53c:	d102      	bne.n	800a544 <f_open+0x2ec>
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a544:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a54c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a550:	2b00      	cmp	r3, #0
 800a552:	d103      	bne.n	800a55c <f_open+0x304>
 800a554:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a558:	429a      	cmp	r2, r3
 800a55a:	d8e0      	bhi.n	800a51e <f_open+0x2c6>
				}
				fp->clust = clst;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a560:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a562:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a566:	2b00      	cmp	r3, #0
 800a568:	d131      	bne.n	800a5ce <f_open+0x376>
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	899b      	ldrh	r3, [r3, #12]
 800a56e:	461a      	mov	r2, r3
 800a570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a572:	fbb3 f1f2 	udiv	r1, r3, r2
 800a576:	fb01 f202 	mul.w	r2, r1, r2
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d026      	beq.n	800a5ce <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd ff59 	bl	800843c <clust2sect>
 800a58a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d103      	bne.n	800a59a <f_open+0x342>
						res = FR_INT_ERR;
 800a592:	2302      	movs	r3, #2
 800a594:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a598:	e019      	b.n	800a5ce <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	899b      	ldrh	r3, [r3, #12]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a8:	441a      	add	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	7858      	ldrb	r0, [r3, #1]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a1a      	ldr	r2, [r3, #32]
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f7fd fb91 	bl	8007ce4 <disk_read>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <f_open+0x376>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a5ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <f_open+0x384>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a5dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3768      	adds	r7, #104	@ 0x68
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	@ 0x30
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f107 0210 	add.w	r2, r7, #16
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fda9 	bl	800a160 <validate>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a614:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d107      	bne.n	800a62c <f_write+0x44>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	7d5b      	ldrb	r3, [r3, #21]
 800a620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <f_write+0x4a>
 800a62c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a630:	e16a      	b.n	800a908 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	7d1b      	ldrb	r3, [r3, #20]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <f_write+0x5a>
 800a63e:	2307      	movs	r3, #7
 800a640:	e162      	b.n	800a908 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	699a      	ldr	r2, [r3, #24]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	441a      	add	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	429a      	cmp	r2, r3
 800a650:	f080 814c 	bcs.w	800a8ec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	43db      	mvns	r3, r3
 800a65a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a65c:	e146      	b.n	800a8ec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	8992      	ldrh	r2, [r2, #12]
 800a666:	fbb3 f1f2 	udiv	r1, r3, r2
 800a66a:	fb01 f202 	mul.w	r2, r1, r2
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 80f1 	bne.w	800a858 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	8992      	ldrh	r2, [r2, #12]
 800a67e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	8952      	ldrh	r2, [r2, #10]
 800a686:	3a01      	subs	r2, #1
 800a688:	4013      	ands	r3, r2
 800a68a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d143      	bne.n	800a71a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10c      	bne.n	800a6b4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d11a      	bne.n	800a6dc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe f937 	bl	800891e <create_chain>
 800a6b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6b2:	e013      	b.n	800a6dc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7fe f9c3 	bl	8008a4e <clmt_clust>
 800a6c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6ca:	e007      	b.n	800a6dc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fe f922 	bl	800891e <create_chain>
 800a6da:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 8109 	beq.w	800a8f6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d104      	bne.n	800a6f4 <f_write+0x10c>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	755a      	strb	r2, [r3, #21]
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	e109      	b.n	800a908 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d104      	bne.n	800a706 <f_write+0x11e>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2201      	movs	r2, #1
 800a700:	755a      	strb	r2, [r3, #21]
 800a702:	2301      	movs	r3, #1
 800a704:	e100      	b.n	800a908 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a70a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <f_write+0x132>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a718:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	7d1b      	ldrb	r3, [r3, #20]
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	da18      	bge.n	800a756 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	7858      	ldrb	r0, [r3, #1]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a1a      	ldr	r2, [r3, #32]
 800a732:	2301      	movs	r3, #1
 800a734:	f7fd faf6 	bl	8007d24 <disk_write>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <f_write+0x160>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2201      	movs	r2, #1
 800a742:	755a      	strb	r2, [r3, #21]
 800a744:	2301      	movs	r3, #1
 800a746:	e0df      	b.n	800a908 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	7d1b      	ldrb	r3, [r3, #20]
 800a74c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	4619      	mov	r1, r3
 800a75e:	4610      	mov	r0, r2
 800a760:	f7fd fe6c 	bl	800843c <clust2sect>
 800a764:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <f_write+0x18e>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2202      	movs	r2, #2
 800a770:	755a      	strb	r2, [r3, #21]
 800a772:	2302      	movs	r3, #2
 800a774:	e0c8      	b.n	800a908 <f_write+0x320>
			sect += csect;
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	4413      	add	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	899b      	ldrh	r3, [r3, #12]
 800a782:	461a      	mov	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	fbb3 f3f2 	udiv	r3, r3, r2
 800a78a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d043      	beq.n	800a81a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	4413      	add	r3, r2
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	8952      	ldrh	r2, [r2, #10]
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d905      	bls.n	800a7ac <f_write+0x1c4>
					cc = fs->csize - csect;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	895b      	ldrh	r3, [r3, #10]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	7858      	ldrb	r0, [r3, #1]
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	69f9      	ldr	r1, [r7, #28]
 800a7b6:	f7fd fab5 	bl	8007d24 <disk_write>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <f_write+0x1e2>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	755a      	strb	r2, [r3, #21]
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e09e      	b.n	800a908 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a1a      	ldr	r2, [r3, #32]
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	6a3a      	ldr	r2, [r7, #32]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d918      	bls.n	800a80a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1a      	ldr	r2, [r3, #32]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	8992      	ldrh	r2, [r2, #12]
 800a7ea:	fb02 f303 	mul.w	r3, r2, r3
 800a7ee:	69fa      	ldr	r2, [r7, #28]
 800a7f0:	18d1      	adds	r1, r2, r3
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	899b      	ldrh	r3, [r3, #12]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	f7fd fb54 	bl	8007ea4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	7d1b      	ldrb	r3, [r3, #20]
 800a800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	899b      	ldrh	r3, [r3, #12]
 800a80e:	461a      	mov	r2, r3
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	fb02 f303 	mul.w	r3, r2, r3
 800a816:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a818:	e04b      	b.n	800a8b2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	429a      	cmp	r2, r3
 800a822:	d016      	beq.n	800a852 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	699a      	ldr	r2, [r3, #24]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d210      	bcs.n	800a852 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	7858      	ldrb	r0, [r3, #1]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a83a:	2301      	movs	r3, #1
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	f7fd fa51 	bl	8007ce4 <disk_read>
 800a842:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a844:	2b00      	cmp	r3, #0
 800a846:	d004      	beq.n	800a852 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	755a      	strb	r2, [r3, #21]
 800a84e:	2301      	movs	r3, #1
 800a850:	e05a      	b.n	800a908 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	4618      	mov	r0, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	8992      	ldrh	r2, [r2, #12]
 800a866:	fbb3 f1f2 	udiv	r1, r3, r2
 800a86a:	fb01 f202 	mul.w	r2, r1, r2
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	1ac3      	subs	r3, r0, r3
 800a872:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d901      	bls.n	800a880 <f_write+0x298>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	8992      	ldrh	r2, [r2, #12]
 800a88e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a892:	fb00 f202 	mul.w	r2, r0, r2
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	440b      	add	r3, r1
 800a89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a89c:	69f9      	ldr	r1, [r7, #28]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fb00 	bl	8007ea4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	7d1b      	ldrb	r3, [r3, #20]
 800a8a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a8b2:	69fa      	ldr	r2, [r7, #28]
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	4413      	add	r3, r2
 800a8b8:	61fb      	str	r3, [r7, #28]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	699a      	ldr	r2, [r3, #24]
 800a8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	619a      	str	r2, [r3, #24]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	68da      	ldr	r2, [r3, #12]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	bf38      	it	cc
 800a8d2:	461a      	movcc	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	60da      	str	r2, [r3, #12]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8de:	441a      	add	r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f47f aeb5 	bne.w	800a65e <f_write+0x76>
 800a8f4:	e000      	b.n	800a8f8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	7d1b      	ldrb	r3, [r3, #20]
 800a8fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a900:	b2da      	uxtb	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3730      	adds	r7, #48	@ 0x30
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f107 0208 	add.w	r2, r7, #8
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fc1d 	bl	800a160 <validate>
 800a926:	4603      	mov	r3, r0
 800a928:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d168      	bne.n	800aa02 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	7d1b      	ldrb	r3, [r3, #20]
 800a934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d062      	beq.n	800aa02 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	7d1b      	ldrb	r3, [r3, #20]
 800a940:	b25b      	sxtb	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	da15      	bge.n	800a972 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	7858      	ldrb	r0, [r3, #1]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a1a      	ldr	r2, [r3, #32]
 800a954:	2301      	movs	r3, #1
 800a956:	f7fd f9e5 	bl	8007d24 <disk_write>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <f_sync+0x54>
 800a960:	2301      	movs	r3, #1
 800a962:	e04f      	b.n	800aa04 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7d1b      	ldrb	r3, [r3, #20]
 800a968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a972:	f7fd f917 	bl	8007ba4 <get_fattime>
 800a976:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fd fcbd 	bl	8008300 <move_window>
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d138      	bne.n	800aa02 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a994:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	330b      	adds	r3, #11
 800a99a:	781a      	ldrb	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	330b      	adds	r3, #11
 800a9a0:	f042 0220 	orr.w	r2, r2, #32
 800a9a4:	b2d2      	uxtb	r2, r2
 800a9a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	68f9      	ldr	r1, [r7, #12]
 800a9b4:	f7fe fa48 	bl	8008e48 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f103 021c 	add.w	r2, r3, #28
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f7fd fa41 	bl	8007e4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3316      	adds	r3, #22
 800a9ce:	6939      	ldr	r1, [r7, #16]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fd fa3b 	bl	8007e4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3312      	adds	r3, #18
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fd fa1a 	bl	8007e16 <st_word>
					fs->wflag = 1;
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd fcb6 	bl	800835c <sync_fs>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7d1b      	ldrb	r3, [r3, #20]
 800a9f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7ff ff7b 	bl	800a910 <f_sync>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d118      	bne.n	800aa56 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f107 0208 	add.w	r2, r7, #8
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fb97 	bl	800a160 <validate>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10c      	bne.n	800aa56 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fd fbb9 	bl	80081b8 <dec_lock>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d102      	bne.n	800aa56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b090      	sub	sp, #64	@ 0x40
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f107 0208 	add.w	r2, r7, #8
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff fb74 	bl	800a160 <validate>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800aa7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d103      	bne.n	800aa8e <f_lseek+0x2e>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	7d5b      	ldrb	r3, [r3, #21]
 800aa8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800aa8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <f_lseek+0x3c>
 800aa96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aa9a:	e201      	b.n	800aea0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 80d9 	beq.w	800ac58 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaac:	d15a      	bne.n	800ab64 <f_lseek+0x104>
			tbl = fp->cltbl;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	1d1a      	adds	r2, r3, #4
 800aab8:	627a      	str	r2, [r7, #36]	@ 0x24
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	617b      	str	r3, [r7, #20]
 800aabe:	2302      	movs	r3, #2
 800aac0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800aac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d03a      	beq.n	800ab44 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	2300      	movs	r3, #0
 800aad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	3302      	adds	r3, #2
 800aada:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae2:	3301      	adds	r3, #1
 800aae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd fcc5 	bl	800847a <get_fat>
 800aaf0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d804      	bhi.n	800ab02 <f_lseek+0xa2>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	755a      	strb	r2, [r3, #21]
 800aafe:	2302      	movs	r3, #2
 800ab00:	e1ce      	b.n	800aea0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab08:	d104      	bne.n	800ab14 <f_lseek+0xb4>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	755a      	strb	r2, [r3, #21]
 800ab10:	2301      	movs	r3, #1
 800ab12:	e1c5      	b.n	800aea0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3301      	adds	r3, #1
 800ab18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d0de      	beq.n	800aadc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ab1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d809      	bhi.n	800ab3a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	1d1a      	adds	r2, r3, #4
 800ab34:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d3c4      	bcc.n	800aace <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab4a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ab4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d803      	bhi.n	800ab5c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	e19f      	b.n	800ae9c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ab5c:	2311      	movs	r3, #17
 800ab5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ab62:	e19b      	b.n	800ae9c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d902      	bls.n	800ab74 <f_lseek+0x114>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 818d 	beq.w	800ae9c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7fd ff60 	bl	8008a4e <clmt_clust>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7fd fc4d 	bl	800843c <clust2sect>
 800aba2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <f_lseek+0x154>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	755a      	strb	r2, [r3, #21]
 800abb0:	2302      	movs	r3, #2
 800abb2:	e175      	b.n	800aea0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	8992      	ldrh	r2, [r2, #12]
 800abbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	8952      	ldrh	r2, [r2, #10]
 800abc4:	3a01      	subs	r2, #1
 800abc6:	4013      	ands	r3, r2
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	4413      	add	r3, r2
 800abcc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	8992      	ldrh	r2, [r2, #12]
 800abd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800abda:	fb01 f202 	mul.w	r2, r1, r2
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 815b 	beq.w	800ae9c <f_lseek+0x43c>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	429a      	cmp	r2, r3
 800abee:	f000 8155 	beq.w	800ae9c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	7d1b      	ldrb	r3, [r3, #20]
 800abf6:	b25b      	sxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	da18      	bge.n	800ac2e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	7858      	ldrb	r0, [r3, #1]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1a      	ldr	r2, [r3, #32]
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	f7fd f88a 	bl	8007d24 <disk_write>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <f_lseek+0x1c0>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	755a      	strb	r2, [r3, #21]
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e13f      	b.n	800aea0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7d1b      	ldrb	r3, [r3, #20]
 800ac24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	7858      	ldrb	r0, [r3, #1]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac38:	2301      	movs	r3, #1
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	f7fd f852 	bl	8007ce4 <disk_read>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <f_lseek+0x1f0>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	755a      	strb	r2, [r3, #21]
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e127      	b.n	800aea0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	621a      	str	r2, [r3, #32]
 800ac56:	e121      	b.n	800ae9c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d908      	bls.n	800ac74 <f_lseek+0x214>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	7d1b      	ldrb	r3, [r3, #20]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac82:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 80b5 	beq.w	800adf6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	895b      	ldrh	r3, [r3, #10]
 800ac90:	461a      	mov	r2, r3
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	899b      	ldrh	r3, [r3, #12]
 800ac96:	fb02 f303 	mul.w	r3, r2, r3
 800ac9a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d01b      	beq.n	800acda <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	1e5a      	subs	r2, r3, #1
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	fbb2 f2f3 	udiv	r2, r2, r3
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	1e59      	subs	r1, r3, #1
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d30f      	bcc.n	800acda <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	1e5a      	subs	r2, r3, #1
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	425b      	negs	r3, r3
 800acc2:	401a      	ands	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800acd8:	e022      	b.n	800ad20 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ace0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d119      	bne.n	800ad1a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f7fd fe17 	bl	800891e <create_chain>
 800acf0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d104      	bne.n	800ad02 <f_lseek+0x2a2>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	755a      	strb	r2, [r3, #21]
 800acfe:	2302      	movs	r3, #2
 800ad00:	e0ce      	b.n	800aea0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d104      	bne.n	800ad14 <f_lseek+0x2b4>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	755a      	strb	r2, [r3, #21]
 800ad10:	2301      	movs	r3, #1
 800ad12:	e0c5      	b.n	800aea0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad18:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad1e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ad20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d067      	beq.n	800adf6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ad26:	e03a      	b.n	800ad9e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699a      	ldr	r2, [r3, #24]
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	441a      	add	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7d1b      	ldrb	r3, [r3, #20]
 800ad40:	f003 0302 	and.w	r3, r3, #2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fd fde6 	bl	800891e <create_chain>
 800ad52:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ad54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d108      	bne.n	800ad6c <f_lseek+0x30c>
							ofs = 0; break;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	603b      	str	r3, [r7, #0]
 800ad5e:	e022      	b.n	800ada6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fd fb88 	bl	800847a <get_fat>
 800ad6a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d104      	bne.n	800ad7e <f_lseek+0x31e>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	755a      	strb	r2, [r3, #21]
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e090      	b.n	800aea0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d904      	bls.n	800ad8e <f_lseek+0x32e>
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	69db      	ldr	r3, [r3, #28]
 800ad88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d304      	bcc.n	800ad98 <f_lseek+0x338>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2202      	movs	r2, #2
 800ad92:	755a      	strb	r2, [r3, #21]
 800ad94:	2302      	movs	r3, #2
 800ad96:	e083      	b.n	800aea0 <f_lseek+0x440>
					fp->clust = clst;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad9c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d8c0      	bhi.n	800ad28 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	441a      	add	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	899b      	ldrh	r3, [r3, #12]
 800adb6:	461a      	mov	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	fbb3 f1f2 	udiv	r1, r3, r2
 800adbe:	fb01 f202 	mul.w	r2, r1, r2
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d016      	beq.n	800adf6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd fb35 	bl	800843c <clust2sect>
 800add2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800add4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add6:	2b00      	cmp	r3, #0
 800add8:	d104      	bne.n	800ade4 <f_lseek+0x384>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2202      	movs	r2, #2
 800adde:	755a      	strb	r2, [r3, #21]
 800ade0:	2302      	movs	r3, #2
 800ade2:	e05d      	b.n	800aea0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	899b      	ldrh	r3, [r3, #12]
 800ade8:	461a      	mov	r2, r3
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	fbb3 f3f2 	udiv	r3, r3, r2
 800adf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adf2:	4413      	add	r3, r2
 800adf4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699a      	ldr	r2, [r3, #24]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d90a      	bls.n	800ae18 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699a      	ldr	r2, [r3, #24]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	7d1b      	ldrb	r3, [r3, #20]
 800ae0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	8992      	ldrh	r2, [r2, #12]
 800ae20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae24:	fb01 f202 	mul.w	r2, r1, r2
 800ae28:	1a9b      	subs	r3, r3, r2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d036      	beq.n	800ae9c <f_lseek+0x43c>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d031      	beq.n	800ae9c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7d1b      	ldrb	r3, [r3, #20]
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	da18      	bge.n	800ae74 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	7858      	ldrb	r0, [r3, #1]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1a      	ldr	r2, [r3, #32]
 800ae50:	2301      	movs	r3, #1
 800ae52:	f7fc ff67 	bl	8007d24 <disk_write>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <f_lseek+0x406>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	755a      	strb	r2, [r3, #21]
 800ae62:	2301      	movs	r3, #1
 800ae64:	e01c      	b.n	800aea0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7d1b      	ldrb	r3, [r3, #20]
 800ae6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	7858      	ldrb	r0, [r3, #1]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae7e:	2301      	movs	r3, #1
 800ae80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae82:	f7fc ff2f 	bl	8007ce4 <disk_read>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <f_lseek+0x436>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	755a      	strb	r2, [r3, #21]
 800ae92:	2301      	movs	r3, #1
 800ae94:	e004      	b.n	800aea0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae9a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ae9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3740      	adds	r7, #64	@ 0x40
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b090      	sub	sp, #64	@ 0x40
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800aeb2:	f107 0108 	add.w	r1, r7, #8
 800aeb6:	1d3b      	adds	r3, r7, #4
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe feca 	bl	8009c54 <find_volume>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800aec6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d11f      	bne.n	800af0e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fdac 	bl	8009a34 <follow_path>
 800aedc:	4603      	mov	r3, r0
 800aede:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800aee2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d111      	bne.n	800af0e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800aeea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aeee:	b25b      	sxtb	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da03      	bge.n	800aefc <f_stat+0x54>
				res = FR_INVALID_NAME;
 800aef4:	2306      	movs	r3, #6
 800aef6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aefa:	e008      	b.n	800af0e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <f_stat+0x66>
 800af02:	f107 0308 	add.w	r3, r7, #8
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fafd 	bl	8009508 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800af0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800af12:	4618      	mov	r0, r3
 800af14:	3740      	adds	r7, #64	@ 0x40
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b092      	sub	sp, #72	@ 0x48
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800af26:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800af2a:	f107 030c 	add.w	r3, r7, #12
 800af2e:	2200      	movs	r2, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe fe8f 	bl	8009c54 <find_volume>
 800af36:	4603      	mov	r3, r0
 800af38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800af3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800af40:	2b00      	cmp	r3, #0
 800af42:	f040 8099 	bne.w	800b078 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800af46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	3b02      	subs	r3, #2
 800af56:	429a      	cmp	r2, r3
 800af58:	d804      	bhi.n	800af64 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	e089      	b.n	800b078 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800af68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d128      	bne.n	800afc2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800af70:	2302      	movs	r3, #2
 800af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800af78:	f107 0314 	add.w	r3, r7, #20
 800af7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fd fa7b 	bl	800847a <get_fat>
 800af84:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800af86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8c:	d103      	bne.n	800af96 <f_getfree+0x7c>
 800af8e:	2301      	movs	r3, #1
 800af90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800af94:	e063      	b.n	800b05e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800af96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d103      	bne.n	800afa4 <f_getfree+0x8a>
 800af9c:	2302      	movs	r3, #2
 800af9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800afa2:	e05c      	b.n	800b05e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800afa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <f_getfree+0x96>
 800afaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afac:	3301      	adds	r3, #1
 800afae:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800afb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb2:	3301      	adds	r3, #1
 800afb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d3db      	bcc.n	800af78 <f_getfree+0x5e>
 800afc0:	e04d      	b.n	800b05e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afcc:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd2:	2300      	movs	r3, #0
 800afd4:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800afd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d113      	bne.n	800b004 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800afdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800afe4:	4619      	mov	r1, r3
 800afe6:	f7fd f98b 	bl	8008300 <move_window>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800aff0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d131      	bne.n	800b05c <f_getfree+0x142>
							p = fs->win;
 800aff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affa:	3338      	adds	r3, #56	@ 0x38
 800affc:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800affe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b000:	899b      	ldrh	r3, [r3, #12]
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d10f      	bne.n	800b02c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b00c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b00e:	f7fc fec7 	bl	8007da0 <ld_word>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <f_getfree+0x104>
 800b018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b01a:	3301      	adds	r3, #1
 800b01c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b020:	3302      	adds	r3, #2
 800b022:	633b      	str	r3, [r7, #48]	@ 0x30
 800b024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b026:	3b02      	subs	r3, #2
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02a:	e010      	b.n	800b04e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b02c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b02e:	f7fc fecf 	bl	8007dd0 <ld_dword>
 800b032:	4603      	mov	r3, r0
 800b034:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <f_getfree+0x128>
 800b03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b03e:	3301      	adds	r3, #1
 800b040:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b044:	3304      	adds	r3, #4
 800b046:	633b      	str	r3, [r7, #48]	@ 0x30
 800b048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04a:	3b04      	subs	r3, #4
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b050:	3b01      	subs	r3, #1
 800b052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1bd      	bne.n	800afd6 <f_getfree+0xbc>
 800b05a:	e000      	b.n	800b05e <f_getfree+0x144>
							if (res != FR_OK) break;
 800b05c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b062:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b068:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06c:	791a      	ldrb	r2, [r3, #4]
 800b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b070:	f042 0201 	orr.w	r2, r2, #1
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b078:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3748      	adds	r7, #72	@ 0x48
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b084:	b480      	push	{r7}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b092:	2301      	movs	r3, #1
 800b094:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b09a:	4b1f      	ldr	r3, [pc, #124]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b09c:	7a5b      	ldrb	r3, [r3, #9]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d131      	bne.n	800b108 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0a6:	7a5b      	ldrb	r3, [r3, #9]
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0b2:	4b19      	ldr	r3, [pc, #100]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0b4:	7a5b      	ldrb	r3, [r3, #9]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	4a17      	ldr	r2, [pc, #92]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0c4:	7a5b      	ldrb	r3, [r3, #9]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4b13      	ldr	r3, [pc, #76]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0cc:	4413      	add	r3, r2
 800b0ce:	79fa      	ldrb	r2, [r7, #7]
 800b0d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b0d2:	4b11      	ldr	r3, [pc, #68]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0d4:	7a5b      	ldrb	r3, [r3, #9]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	b2d1      	uxtb	r1, r2
 800b0dc:	4a0e      	ldr	r2, [pc, #56]	@ (800b118 <FATFS_LinkDriverEx+0x94>)
 800b0de:	7251      	strb	r1, [r2, #9]
 800b0e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b0e2:	7dbb      	ldrb	r3, [r7, #22]
 800b0e4:	3330      	adds	r3, #48	@ 0x30
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	223a      	movs	r2, #58	@ 0x3a
 800b0f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	3302      	adds	r3, #2
 800b0f8:	222f      	movs	r2, #47	@ 0x2f
 800b0fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	3303      	adds	r3, #3
 800b100:	2200      	movs	r2, #0
 800b102:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b108:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	371c      	adds	r7, #28
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	2000fa38 	.word	0x2000fa38

0800b11c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b126:	2200      	movs	r2, #0
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff ffaa 	bl	800b084 <FATFS_LinkDriverEx>
 800b130:	4603      	mov	r3, r0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	6039      	str	r1, [r7, #0]
 800b146:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b14c:	d802      	bhi.n	800b154 <ff_convert+0x18>
		c = chr;
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	81fb      	strh	r3, [r7, #14]
 800b152:	e025      	b.n	800b1a0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00b      	beq.n	800b172 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b15a:	88fb      	ldrh	r3, [r7, #6]
 800b15c:	2bff      	cmp	r3, #255	@ 0xff
 800b15e:	d805      	bhi.n	800b16c <ff_convert+0x30>
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	3b80      	subs	r3, #128	@ 0x80
 800b164:	4a12      	ldr	r2, [pc, #72]	@ (800b1b0 <ff_convert+0x74>)
 800b166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b16a:	e000      	b.n	800b16e <ff_convert+0x32>
 800b16c:	2300      	movs	r3, #0
 800b16e:	81fb      	strh	r3, [r7, #14]
 800b170:	e016      	b.n	800b1a0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b172:	2300      	movs	r3, #0
 800b174:	81fb      	strh	r3, [r7, #14]
 800b176:	e009      	b.n	800b18c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b178:	89fb      	ldrh	r3, [r7, #14]
 800b17a:	4a0d      	ldr	r2, [pc, #52]	@ (800b1b0 <ff_convert+0x74>)
 800b17c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b180:	88fa      	ldrh	r2, [r7, #6]
 800b182:	429a      	cmp	r2, r3
 800b184:	d006      	beq.n	800b194 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b186:	89fb      	ldrh	r3, [r7, #14]
 800b188:	3301      	adds	r3, #1
 800b18a:	81fb      	strh	r3, [r7, #14]
 800b18c:	89fb      	ldrh	r3, [r7, #14]
 800b18e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b190:	d9f2      	bls.n	800b178 <ff_convert+0x3c>
 800b192:	e000      	b.n	800b196 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b194:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b196:	89fb      	ldrh	r3, [r7, #14]
 800b198:	3380      	adds	r3, #128	@ 0x80
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b1a0:	89fb      	ldrh	r3, [r7, #14]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	0800d458 	.word	0x0800d458

0800b1b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b1be:	88fb      	ldrh	r3, [r7, #6]
 800b1c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1c4:	d201      	bcs.n	800b1ca <ff_wtoupper+0x16>
 800b1c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2c0 <ff_wtoupper+0x10c>)
 800b1c8:	e000      	b.n	800b1cc <ff_wtoupper+0x18>
 800b1ca:	4b3e      	ldr	r3, [pc, #248]	@ (800b2c4 <ff_wtoupper+0x110>)
 800b1cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	1c9a      	adds	r2, r3, #2
 800b1d2:	617a      	str	r2, [r7, #20]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b1d8:	8a7b      	ldrh	r3, [r7, #18]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d068      	beq.n	800b2b0 <ff_wtoupper+0xfc>
 800b1de:	88fa      	ldrh	r2, [r7, #6]
 800b1e0:	8a7b      	ldrh	r3, [r7, #18]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d364      	bcc.n	800b2b0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	1c9a      	adds	r2, r3, #2
 800b1ea:	617a      	str	r2, [r7, #20]
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	823b      	strh	r3, [r7, #16]
 800b1f0:	8a3b      	ldrh	r3, [r7, #16]
 800b1f2:	0a1b      	lsrs	r3, r3, #8
 800b1f4:	81fb      	strh	r3, [r7, #14]
 800b1f6:	8a3b      	ldrh	r3, [r7, #16]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b1fc:	88fa      	ldrh	r2, [r7, #6]
 800b1fe:	8a79      	ldrh	r1, [r7, #18]
 800b200:	8a3b      	ldrh	r3, [r7, #16]
 800b202:	440b      	add	r3, r1
 800b204:	429a      	cmp	r2, r3
 800b206:	da49      	bge.n	800b29c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b208:	89fb      	ldrh	r3, [r7, #14]
 800b20a:	2b08      	cmp	r3, #8
 800b20c:	d84f      	bhi.n	800b2ae <ff_wtoupper+0xfa>
 800b20e:	a201      	add	r2, pc, #4	@ (adr r2, 800b214 <ff_wtoupper+0x60>)
 800b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b214:	0800b239 	.word	0x0800b239
 800b218:	0800b24b 	.word	0x0800b24b
 800b21c:	0800b261 	.word	0x0800b261
 800b220:	0800b269 	.word	0x0800b269
 800b224:	0800b271 	.word	0x0800b271
 800b228:	0800b279 	.word	0x0800b279
 800b22c:	0800b281 	.word	0x0800b281
 800b230:	0800b289 	.word	0x0800b289
 800b234:	0800b291 	.word	0x0800b291
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b238:	88fa      	ldrh	r2, [r7, #6]
 800b23a:	8a7b      	ldrh	r3, [r7, #18]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	4413      	add	r3, r2
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	80fb      	strh	r3, [r7, #6]
 800b248:	e027      	b.n	800b29a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	8a7b      	ldrh	r3, [r7, #18]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	b29b      	uxth	r3, r3
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	b29b      	uxth	r3, r3
 800b258:	88fa      	ldrh	r2, [r7, #6]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	80fb      	strh	r3, [r7, #6]
 800b25e:	e01c      	b.n	800b29a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	3b10      	subs	r3, #16
 800b264:	80fb      	strh	r3, [r7, #6]
 800b266:	e018      	b.n	800b29a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b268:	88fb      	ldrh	r3, [r7, #6]
 800b26a:	3b20      	subs	r3, #32
 800b26c:	80fb      	strh	r3, [r7, #6]
 800b26e:	e014      	b.n	800b29a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	3b30      	subs	r3, #48	@ 0x30
 800b274:	80fb      	strh	r3, [r7, #6]
 800b276:	e010      	b.n	800b29a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	3b1a      	subs	r3, #26
 800b27c:	80fb      	strh	r3, [r7, #6]
 800b27e:	e00c      	b.n	800b29a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b280:	88fb      	ldrh	r3, [r7, #6]
 800b282:	3308      	adds	r3, #8
 800b284:	80fb      	strh	r3, [r7, #6]
 800b286:	e008      	b.n	800b29a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b288:	88fb      	ldrh	r3, [r7, #6]
 800b28a:	3b50      	subs	r3, #80	@ 0x50
 800b28c:	80fb      	strh	r3, [r7, #6]
 800b28e:	e004      	b.n	800b29a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b290:	88fb      	ldrh	r3, [r7, #6]
 800b292:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b296:	80fb      	strh	r3, [r7, #6]
 800b298:	bf00      	nop
			}
			break;
 800b29a:	e008      	b.n	800b2ae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b29c:	89fb      	ldrh	r3, [r7, #14]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d195      	bne.n	800b1ce <ff_wtoupper+0x1a>
 800b2a2:	8a3b      	ldrh	r3, [r7, #16]
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b2ac:	e78f      	b.n	800b1ce <ff_wtoupper+0x1a>
			break;
 800b2ae:	bf00      	nop
	}

	return chr;
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	371c      	adds	r7, #28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	0800d558 	.word	0x0800d558
 800b2c4:	0800d74c 	.word	0x0800d74c

0800b2c8 <arm_rfft_32_fast_init_f32>:
 800b2c8:	b178      	cbz	r0, 800b2ea <arm_rfft_32_fast_init_f32+0x22>
 800b2ca:	b430      	push	{r4, r5}
 800b2cc:	4908      	ldr	r1, [pc, #32]	@ (800b2f0 <arm_rfft_32_fast_init_f32+0x28>)
 800b2ce:	4a09      	ldr	r2, [pc, #36]	@ (800b2f4 <arm_rfft_32_fast_init_f32+0x2c>)
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b2d6:	8003      	strh	r3, [r0, #0]
 800b2d8:	2520      	movs	r5, #32
 800b2da:	2414      	movs	r4, #20
 800b2dc:	4b06      	ldr	r3, [pc, #24]	@ (800b2f8 <arm_rfft_32_fast_init_f32+0x30>)
 800b2de:	8205      	strh	r5, [r0, #16]
 800b2e0:	8184      	strh	r4, [r0, #12]
 800b2e2:	6143      	str	r3, [r0, #20]
 800b2e4:	bc30      	pop	{r4, r5}
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	4770      	bx	lr
 800b2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ee:	4770      	bx	lr
 800b2f0:	0800e7b8 	.word	0x0800e7b8
 800b2f4:	080130f0 	.word	0x080130f0
 800b2f8:	0801be70 	.word	0x0801be70

0800b2fc <arm_rfft_64_fast_init_f32>:
 800b2fc:	b178      	cbz	r0, 800b31e <arm_rfft_64_fast_init_f32+0x22>
 800b2fe:	b430      	push	{r4, r5}
 800b300:	4908      	ldr	r1, [pc, #32]	@ (800b324 <arm_rfft_64_fast_init_f32+0x28>)
 800b302:	4a09      	ldr	r2, [pc, #36]	@ (800b328 <arm_rfft_64_fast_init_f32+0x2c>)
 800b304:	2320      	movs	r3, #32
 800b306:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b30a:	8003      	strh	r3, [r0, #0]
 800b30c:	2540      	movs	r5, #64	@ 0x40
 800b30e:	2430      	movs	r4, #48	@ 0x30
 800b310:	4b06      	ldr	r3, [pc, #24]	@ (800b32c <arm_rfft_64_fast_init_f32+0x30>)
 800b312:	8205      	strh	r5, [r0, #16]
 800b314:	8184      	strh	r4, [r0, #12]
 800b316:	6143      	str	r3, [r0, #20]
 800b318:	bc30      	pop	{r4, r5}
 800b31a:	2000      	movs	r0, #0
 800b31c:	4770      	bx	lr
 800b31e:	f04f 30ff 	mov.w	r0, #4294967295
 800b322:	4770      	bx	lr
 800b324:	08010910 	.word	0x08010910
 800b328:	08017970 	.word	0x08017970
 800b32c:	080206f0 	.word	0x080206f0

0800b330 <arm_rfft_256_fast_init_f32>:
 800b330:	b180      	cbz	r0, 800b354 <arm_rfft_256_fast_init_f32+0x24>
 800b332:	b430      	push	{r4, r5}
 800b334:	4909      	ldr	r1, [pc, #36]	@ (800b35c <arm_rfft_256_fast_init_f32+0x2c>)
 800b336:	4a0a      	ldr	r2, [pc, #40]	@ (800b360 <arm_rfft_256_fast_init_f32+0x30>)
 800b338:	2380      	movs	r3, #128	@ 0x80
 800b33a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b33e:	8003      	strh	r3, [r0, #0]
 800b340:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800b344:	24d0      	movs	r4, #208	@ 0xd0
 800b346:	4b07      	ldr	r3, [pc, #28]	@ (800b364 <arm_rfft_256_fast_init_f32+0x34>)
 800b348:	8205      	strh	r5, [r0, #16]
 800b34a:	8184      	strh	r4, [r0, #12]
 800b34c:	6143      	str	r3, [r0, #20]
 800b34e:	bc30      	pop	{r4, r5}
 800b350:	2000      	movs	r0, #0
 800b352:	4770      	bx	lr
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	0800e618 	.word	0x0800e618
 800b360:	08012cf0 	.word	0x08012cf0
 800b364:	0801ba70 	.word	0x0801ba70

0800b368 <arm_rfft_512_fast_init_f32>:
 800b368:	b190      	cbz	r0, 800b390 <arm_rfft_512_fast_init_f32+0x28>
 800b36a:	b430      	push	{r4, r5}
 800b36c:	490a      	ldr	r1, [pc, #40]	@ (800b398 <arm_rfft_512_fast_init_f32+0x30>)
 800b36e:	4a0b      	ldr	r2, [pc, #44]	@ (800b39c <arm_rfft_512_fast_init_f32+0x34>)
 800b370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b374:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b378:	8003      	strh	r3, [r0, #0]
 800b37a:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800b37e:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800b382:	4b07      	ldr	r3, [pc, #28]	@ (800b3a0 <arm_rfft_512_fast_init_f32+0x38>)
 800b384:	8205      	strh	r5, [r0, #16]
 800b386:	8184      	strh	r4, [r0, #12]
 800b388:	6143      	str	r3, [r0, #20]
 800b38a:	bc30      	pop	{r4, r5}
 800b38c:	2000      	movs	r0, #0
 800b38e:	4770      	bx	lr
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	080105a0 	.word	0x080105a0
 800b39c:	08017170 	.word	0x08017170
 800b3a0:	0801fef0 	.word	0x0801fef0

0800b3a4 <arm_rfft_1024_fast_init_f32>:
 800b3a4:	b190      	cbz	r0, 800b3cc <arm_rfft_1024_fast_init_f32+0x28>
 800b3a6:	b430      	push	{r4, r5}
 800b3a8:	490a      	ldr	r1, [pc, #40]	@ (800b3d4 <arm_rfft_1024_fast_init_f32+0x30>)
 800b3aa:	4a0b      	ldr	r2, [pc, #44]	@ (800b3d8 <arm_rfft_1024_fast_init_f32+0x34>)
 800b3ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3b0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b3b4:	8003      	strh	r3, [r0, #0]
 800b3b6:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800b3ba:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800b3be:	4b07      	ldr	r3, [pc, #28]	@ (800b3dc <arm_rfft_1024_fast_init_f32+0x38>)
 800b3c0:	8205      	strh	r5, [r0, #16]
 800b3c2:	8184      	strh	r4, [r0, #12]
 800b3c4:	6143      	str	r3, [r0, #20]
 800b3c6:	bc30      	pop	{r4, r5}
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	4770      	bx	lr
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	08010970 	.word	0x08010970
 800b3d8:	08017a70 	.word	0x08017a70
 800b3dc:	08018a70 	.word	0x08018a70

0800b3e0 <arm_rfft_2048_fast_init_f32>:
 800b3e0:	b190      	cbz	r0, 800b408 <arm_rfft_2048_fast_init_f32+0x28>
 800b3e2:	b430      	push	{r4, r5}
 800b3e4:	490a      	ldr	r1, [pc, #40]	@ (800b410 <arm_rfft_2048_fast_init_f32+0x30>)
 800b3e6:	4a0b      	ldr	r2, [pc, #44]	@ (800b414 <arm_rfft_2048_fast_init_f32+0x34>)
 800b3e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3ec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b3f0:	8003      	strh	r3, [r0, #0]
 800b3f2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800b3f6:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800b3fa:	4b07      	ldr	r3, [pc, #28]	@ (800b418 <arm_rfft_2048_fast_init_f32+0x38>)
 800b3fc:	8205      	strh	r5, [r0, #16]
 800b3fe:	8184      	strh	r4, [r0, #12]
 800b400:	6143      	str	r3, [r0, #20]
 800b402:	bc30      	pop	{r4, r5}
 800b404:	2000      	movs	r0, #0
 800b406:	4770      	bx	lr
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	0800d808 	.word	0x0800d808
 800b414:	08010cf0 	.word	0x08010cf0
 800b418:	08019a70 	.word	0x08019a70

0800b41c <arm_rfft_4096_fast_init_f32>:
 800b41c:	b190      	cbz	r0, 800b444 <arm_rfft_4096_fast_init_f32+0x28>
 800b41e:	b430      	push	{r4, r5}
 800b420:	490a      	ldr	r1, [pc, #40]	@ (800b44c <arm_rfft_4096_fast_init_f32+0x30>)
 800b422:	4a0b      	ldr	r2, [pc, #44]	@ (800b450 <arm_rfft_4096_fast_init_f32+0x34>)
 800b424:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b428:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b42c:	8003      	strh	r3, [r0, #0]
 800b42e:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800b432:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800b436:	4b07      	ldr	r3, [pc, #28]	@ (800b454 <arm_rfft_4096_fast_init_f32+0x38>)
 800b438:	8205      	strh	r5, [r0, #16]
 800b43a:	8184      	strh	r4, [r0, #12]
 800b43c:	6143      	str	r3, [r0, #20]
 800b43e:	bc30      	pop	{r4, r5}
 800b440:	2000      	movs	r0, #0
 800b442:	4770      	bx	lr
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	0800e7e0 	.word	0x0800e7e0
 800b450:	08013170 	.word	0x08013170
 800b454:	0801bef0 	.word	0x0801bef0

0800b458 <arm_rfft_fast_init_f32>:
 800b458:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b45c:	d01f      	beq.n	800b49e <arm_rfft_fast_init_f32+0x46>
 800b45e:	d90b      	bls.n	800b478 <arm_rfft_fast_init_f32+0x20>
 800b460:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800b464:	d019      	beq.n	800b49a <arm_rfft_fast_init_f32+0x42>
 800b466:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800b46a:	d012      	beq.n	800b492 <arm_rfft_fast_init_f32+0x3a>
 800b46c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b470:	d00d      	beq.n	800b48e <arm_rfft_fast_init_f32+0x36>
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	4770      	bx	lr
 800b478:	2940      	cmp	r1, #64	@ 0x40
 800b47a:	d00c      	beq.n	800b496 <arm_rfft_fast_init_f32+0x3e>
 800b47c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b480:	d003      	beq.n	800b48a <arm_rfft_fast_init_f32+0x32>
 800b482:	2920      	cmp	r1, #32
 800b484:	d1f5      	bne.n	800b472 <arm_rfft_fast_init_f32+0x1a>
 800b486:	4b07      	ldr	r3, [pc, #28]	@ (800b4a4 <arm_rfft_fast_init_f32+0x4c>)
 800b488:	4718      	bx	r3
 800b48a:	4b07      	ldr	r3, [pc, #28]	@ (800b4a8 <arm_rfft_fast_init_f32+0x50>)
 800b48c:	4718      	bx	r3
 800b48e:	4b07      	ldr	r3, [pc, #28]	@ (800b4ac <arm_rfft_fast_init_f32+0x54>)
 800b490:	4718      	bx	r3
 800b492:	4b07      	ldr	r3, [pc, #28]	@ (800b4b0 <arm_rfft_fast_init_f32+0x58>)
 800b494:	4718      	bx	r3
 800b496:	4b07      	ldr	r3, [pc, #28]	@ (800b4b4 <arm_rfft_fast_init_f32+0x5c>)
 800b498:	e7f6      	b.n	800b488 <arm_rfft_fast_init_f32+0x30>
 800b49a:	4b07      	ldr	r3, [pc, #28]	@ (800b4b8 <arm_rfft_fast_init_f32+0x60>)
 800b49c:	e7f4      	b.n	800b488 <arm_rfft_fast_init_f32+0x30>
 800b49e:	4b07      	ldr	r3, [pc, #28]	@ (800b4bc <arm_rfft_fast_init_f32+0x64>)
 800b4a0:	e7f2      	b.n	800b488 <arm_rfft_fast_init_f32+0x30>
 800b4a2:	bf00      	nop
 800b4a4:	0800b2c9 	.word	0x0800b2c9
 800b4a8:	0800b331 	.word	0x0800b331
 800b4ac:	0800b3a5 	.word	0x0800b3a5
 800b4b0:	0800b41d 	.word	0x0800b41d
 800b4b4:	0800b2fd 	.word	0x0800b2fd
 800b4b8:	0800b3e1 	.word	0x0800b3e1
 800b4bc:	0800b369 	.word	0x0800b369

0800b4c0 <stage_rfft_f32>:
 800b4c0:	b410      	push	{r4}
 800b4c2:	edd1 7a00 	vldr	s15, [r1]
 800b4c6:	ed91 7a01 	vldr	s14, [r1, #4]
 800b4ca:	8804      	ldrh	r4, [r0, #0]
 800b4cc:	6940      	ldr	r0, [r0, #20]
 800b4ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b4d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b4d6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b4da:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b4de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4e2:	3c01      	subs	r4, #1
 800b4e4:	ee26 7a84 	vmul.f32	s14, s13, s8
 800b4e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b4ec:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800b4f0:	ed82 7a00 	vstr	s14, [r2]
 800b4f4:	edc2 7a01 	vstr	s15, [r2, #4]
 800b4f8:	3010      	adds	r0, #16
 800b4fa:	3210      	adds	r2, #16
 800b4fc:	3b08      	subs	r3, #8
 800b4fe:	3110      	adds	r1, #16
 800b500:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b504:	ed93 7a02 	vldr	s14, [r3, #8]
 800b508:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b50c:	edd3 4a03 	vldr	s9, [r3, #12]
 800b510:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b514:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b518:	ee77 5a45 	vsub.f32	s11, s14, s10
 800b51c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b520:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b524:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b528:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b52c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b530:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b534:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b538:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b53c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b540:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b544:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b548:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b54c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b550:	3c01      	subs	r4, #1
 800b552:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b556:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b55a:	f1a3 0308 	sub.w	r3, r3, #8
 800b55e:	f101 0108 	add.w	r1, r1, #8
 800b562:	f100 0008 	add.w	r0, r0, #8
 800b566:	f102 0208 	add.w	r2, r2, #8
 800b56a:	d1c9      	bne.n	800b500 <stage_rfft_f32+0x40>
 800b56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop

0800b574 <merge_rfft_f32>:
 800b574:	b410      	push	{r4}
 800b576:	edd1 7a00 	vldr	s15, [r1]
 800b57a:	edd1 6a01 	vldr	s13, [r1, #4]
 800b57e:	8804      	ldrh	r4, [r0, #0]
 800b580:	6940      	ldr	r0, [r0, #20]
 800b582:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b586:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b58a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b58e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b592:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b596:	3c01      	subs	r4, #1
 800b598:	ed82 7a00 	vstr	s14, [r2]
 800b59c:	edc2 7a01 	vstr	s15, [r2, #4]
 800b5a0:	b3dc      	cbz	r4, 800b61a <merge_rfft_f32+0xa6>
 800b5a2:	00e3      	lsls	r3, r4, #3
 800b5a4:	3b08      	subs	r3, #8
 800b5a6:	440b      	add	r3, r1
 800b5a8:	3010      	adds	r0, #16
 800b5aa:	3210      	adds	r2, #16
 800b5ac:	3110      	adds	r1, #16
 800b5ae:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b5b2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b5b6:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b5ba:	edd3 4a03 	vldr	s9, [r3, #12]
 800b5be:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b5c2:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b5c6:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b5ca:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b5ce:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b5d2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b5d6:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b5da:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b5de:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b5e2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b5e6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b5ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b5ee:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b5f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b5fa:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b5fe:	3c01      	subs	r4, #1
 800b600:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b604:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b608:	f1a3 0308 	sub.w	r3, r3, #8
 800b60c:	f101 0108 	add.w	r1, r1, #8
 800b610:	f100 0008 	add.w	r0, r0, #8
 800b614:	f102 0208 	add.w	r2, r2, #8
 800b618:	d1c9      	bne.n	800b5ae <merge_rfft_f32+0x3a>
 800b61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <arm_rfft_fast_f32>:
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	8a05      	ldrh	r5, [r0, #16]
 800b626:	086d      	lsrs	r5, r5, #1
 800b628:	8005      	strh	r5, [r0, #0]
 800b62a:	4604      	mov	r4, r0
 800b62c:	4616      	mov	r6, r2
 800b62e:	461d      	mov	r5, r3
 800b630:	b14b      	cbz	r3, 800b646 <arm_rfft_fast_f32+0x26>
 800b632:	f7ff ff9f 	bl	800b574 <merge_rfft_f32>
 800b636:	462a      	mov	r2, r5
 800b638:	4631      	mov	r1, r6
 800b63a:	4620      	mov	r0, r4
 800b63c:	2301      	movs	r3, #1
 800b63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b642:	f000 bb33 	b.w	800bcac <arm_cfft_f32>
 800b646:	460f      	mov	r7, r1
 800b648:	461a      	mov	r2, r3
 800b64a:	2301      	movs	r3, #1
 800b64c:	f000 fb2e 	bl	800bcac <arm_cfft_f32>
 800b650:	4632      	mov	r2, r6
 800b652:	4639      	mov	r1, r7
 800b654:	4620      	mov	r0, r4
 800b656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b65a:	f7ff bf31 	b.w	800b4c0 <stage_rfft_f32>
 800b65e:	bf00      	nop

0800b660 <arm_cfft_radix8by2_f32>:
 800b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b664:	ed2d 8b08 	vpush	{d8-d11}
 800b668:	4607      	mov	r7, r0
 800b66a:	4608      	mov	r0, r1
 800b66c:	f8b7 c000 	ldrh.w	ip, [r7]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b676:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800b67a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b67e:	f000 80b0 	beq.w	800b7e2 <arm_cfft_radix8by2_f32+0x182>
 800b682:	008c      	lsls	r4, r1, #2
 800b684:	3410      	adds	r4, #16
 800b686:	f100 0310 	add.w	r3, r0, #16
 800b68a:	1906      	adds	r6, r0, r4
 800b68c:	3210      	adds	r2, #16
 800b68e:	4444      	add	r4, r8
 800b690:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800b694:	f108 0510 	add.w	r5, r8, #16
 800b698:	ed15 2a04 	vldr	s4, [r5, #-16]
 800b69c:	ed55 2a03 	vldr	s5, [r5, #-12]
 800b6a0:	ed54 4a04 	vldr	s9, [r4, #-16]
 800b6a4:	ed14 4a03 	vldr	s8, [r4, #-12]
 800b6a8:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b6ac:	ed54 5a01 	vldr	s11, [r4, #-4]
 800b6b0:	ed53 3a04 	vldr	s7, [r3, #-16]
 800b6b4:	ed15 0a02 	vldr	s0, [r5, #-8]
 800b6b8:	ed55 0a01 	vldr	s1, [r5, #-4]
 800b6bc:	ed56 6a04 	vldr	s13, [r6, #-16]
 800b6c0:	ed16 3a03 	vldr	s6, [r6, #-12]
 800b6c4:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b6c8:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b6cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b6d0:	ed16 1a02 	vldr	s2, [r6, #-8]
 800b6d4:	ed56 1a01 	vldr	s3, [r6, #-4]
 800b6d8:	ee73 ba82 	vadd.f32	s23, s7, s4
 800b6dc:	ee37 ba22 	vadd.f32	s22, s14, s5
 800b6e0:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800b6e4:	ee33 9a04 	vadd.f32	s18, s6, s8
 800b6e8:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800b6ec:	ee75 aa00 	vadd.f32	s21, s10, s0
 800b6f0:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800b6f4:	ee71 8a06 	vadd.f32	s17, s2, s12
 800b6f8:	ed43 ba04 	vstr	s23, [r3, #-16]
 800b6fc:	ed03 ba03 	vstr	s22, [r3, #-12]
 800b700:	ed43 aa02 	vstr	s21, [r3, #-8]
 800b704:	ed03 aa01 	vstr	s20, [r3, #-4]
 800b708:	ed06 8a01 	vstr	s16, [r6, #-4]
 800b70c:	ed46 9a04 	vstr	s19, [r6, #-16]
 800b710:	ed06 9a03 	vstr	s18, [r6, #-12]
 800b714:	ed46 8a02 	vstr	s17, [r6, #-8]
 800b718:	ee37 7a62 	vsub.f32	s14, s14, s5
 800b71c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b720:	ee34 4a43 	vsub.f32	s8, s8, s6
 800b724:	ed52 6a03 	vldr	s13, [r2, #-12]
 800b728:	ed12 3a04 	vldr	s6, [r2, #-16]
 800b72c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b730:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b734:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800b738:	ee23 2a83 	vmul.f32	s4, s7, s6
 800b73c:	ee64 4a83 	vmul.f32	s9, s9, s6
 800b740:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800b744:	ee27 7a03 	vmul.f32	s14, s14, s6
 800b748:	ee64 6a26 	vmul.f32	s13, s8, s13
 800b74c:	ee24 4a03 	vmul.f32	s8, s8, s6
 800b750:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b754:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b758:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800b75c:	ee32 3a08 	vadd.f32	s6, s4, s16
 800b760:	ed05 7a03 	vstr	s14, [r5, #-12]
 800b764:	ed05 3a04 	vstr	s6, [r5, #-16]
 800b768:	ed04 4a04 	vstr	s8, [r4, #-16]
 800b76c:	ed44 6a03 	vstr	s13, [r4, #-12]
 800b770:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b774:	ee76 6a41 	vsub.f32	s13, s12, s2
 800b778:	ee35 5a40 	vsub.f32	s10, s10, s0
 800b77c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800b780:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b784:	ed52 5a02 	vldr	s11, [r2, #-8]
 800b788:	ee67 3a87 	vmul.f32	s7, s15, s14
 800b78c:	ee66 4a87 	vmul.f32	s9, s13, s14
 800b790:	ee25 4a25 	vmul.f32	s8, s10, s11
 800b794:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b798:	ee25 5a07 	vmul.f32	s10, s10, s14
 800b79c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b7a0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b7a4:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b7a8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b7ac:	ee74 5a23 	vadd.f32	s11, s8, s7
 800b7b0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b7b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b7b8:	3310      	adds	r3, #16
 800b7ba:	4563      	cmp	r3, ip
 800b7bc:	ed45 5a02 	vstr	s11, [r5, #-8]
 800b7c0:	f106 0610 	add.w	r6, r6, #16
 800b7c4:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b7c8:	f102 0210 	add.w	r2, r2, #16
 800b7cc:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b7d0:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b7d4:	f105 0510 	add.w	r5, r5, #16
 800b7d8:	f104 0410 	add.w	r4, r4, #16
 800b7dc:	f47f af5c 	bne.w	800b698 <arm_cfft_radix8by2_f32+0x38>
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	b28c      	uxth	r4, r1
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	f000 fd88 	bl	800c2fc <arm_radix8_butterfly_f32>
 800b7ec:	ecbd 8b08 	vpop	{d8-d11}
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fc:	f000 bd7e 	b.w	800c2fc <arm_radix8_butterfly_f32>

0800b800 <arm_cfft_radix8by4_f32>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	ed2d 8b0a 	vpush	{d8-d12}
 800b808:	b08d      	sub	sp, #52	@ 0x34
 800b80a:	460d      	mov	r5, r1
 800b80c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b80e:	8801      	ldrh	r1, [r0, #0]
 800b810:	6842      	ldr	r2, [r0, #4]
 800b812:	900a      	str	r0, [sp, #40]	@ 0x28
 800b814:	0849      	lsrs	r1, r1, #1
 800b816:	008b      	lsls	r3, r1, #2
 800b818:	18ee      	adds	r6, r5, r3
 800b81a:	18f0      	adds	r0, r6, r3
 800b81c:	edd0 5a00 	vldr	s11, [r0]
 800b820:	edd5 7a00 	vldr	s15, [r5]
 800b824:	ed96 7a00 	vldr	s14, [r6]
 800b828:	edd0 3a01 	vldr	s7, [r0, #4]
 800b82c:	ed96 4a01 	vldr	s8, [r6, #4]
 800b830:	ed95 5a01 	vldr	s10, [r5, #4]
 800b834:	9008      	str	r0, [sp, #32]
 800b836:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b83a:	18c7      	adds	r7, r0, r3
 800b83c:	edd7 4a00 	vldr	s9, [r7]
 800b840:	ed97 3a01 	vldr	s6, [r7, #4]
 800b844:	9701      	str	r7, [sp, #4]
 800b846:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b84a:	462c      	mov	r4, r5
 800b84c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b850:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b854:	ee16 ca90 	vmov	ip, s13
 800b858:	f844 cb08 	str.w	ip, [r4], #8
 800b85c:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b860:	edd6 5a01 	vldr	s11, [r6, #4]
 800b864:	edd7 2a01 	vldr	s5, [r7, #4]
 800b868:	9404      	str	r4, [sp, #16]
 800b86a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b86e:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b872:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b876:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b87a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b87e:	0849      	lsrs	r1, r1, #1
 800b880:	f102 0e08 	add.w	lr, r2, #8
 800b884:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b888:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b88c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b88e:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b892:	f1a1 0902 	sub.w	r9, r1, #2
 800b896:	f8cd e00c 	str.w	lr, [sp, #12]
 800b89a:	4631      	mov	r1, r6
 800b89c:	ee13 ea90 	vmov	lr, s7
 800b8a0:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b8a4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	edc5 5a01 	vstr	s11, [r5, #4]
 800b8ae:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b8b2:	f841 eb08 	str.w	lr, [r1], #8
 800b8b6:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b8ba:	ee16 ea10 	vmov	lr, s12
 800b8be:	ed86 5a01 	vstr	s10, [r6, #4]
 800b8c2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b8c6:	f844 eb08 	str.w	lr, [r4], #8
 800b8ca:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b8ce:	edc0 6a01 	vstr	s13, [r0, #4]
 800b8d2:	9405      	str	r4, [sp, #20]
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	ee17 0a90 	vmov	r0, s15
 800b8da:	9106      	str	r1, [sp, #24]
 800b8dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b8e0:	f102 0110 	add.w	r1, r2, #16
 800b8e4:	46bc      	mov	ip, r7
 800b8e6:	9100      	str	r1, [sp, #0]
 800b8e8:	f847 0b08 	str.w	r0, [r7], #8
 800b8ec:	f102 0118 	add.w	r1, r2, #24
 800b8f0:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b8f4:	9102      	str	r1, [sp, #8]
 800b8f6:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b8fa:	9007      	str	r0, [sp, #28]
 800b8fc:	f000 8134 	beq.w	800bb68 <arm_cfft_radix8by4_f32+0x368>
 800b900:	f102 0920 	add.w	r9, r2, #32
 800b904:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800b908:	9a01      	ldr	r2, [sp, #4]
 800b90a:	f8dd a000 	ldr.w	sl, [sp]
 800b90e:	3b0c      	subs	r3, #12
 800b910:	4683      	mov	fp, r0
 800b912:	4463      	add	r3, ip
 800b914:	f105 0e10 	add.w	lr, r5, #16
 800b918:	f1a4 010c 	sub.w	r1, r4, #12
 800b91c:	f104 0510 	add.w	r5, r4, #16
 800b920:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b924:	f1a2 040c 	sub.w	r4, r2, #12
 800b928:	f106 0010 	add.w	r0, r6, #16
 800b92c:	3210      	adds	r2, #16
 800b92e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b932:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b936:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b93a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b93e:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b942:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b946:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b94a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b94e:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b952:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b956:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b95a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b95e:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b962:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b966:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b96a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b96e:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b972:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b976:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b97a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b97e:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b982:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b986:	ed94 7a02 	vldr	s14, [r4, #8]
 800b98a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b98e:	ed91 ba02 	vldr	s22, [r1, #8]
 800b992:	edd3 9a02 	vldr	s19, [r3, #8]
 800b996:	edd4 2a01 	vldr	s5, [r4, #4]
 800b99a:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b99e:	ed93 5a01 	vldr	s10, [r3, #4]
 800b9a2:	edd1 0a01 	vldr	s1, [r1, #4]
 800b9a6:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b9aa:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b9ae:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b9b2:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b9b6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b9ba:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b9be:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b9c2:	ed91 7a01 	vldr	s14, [r1, #4]
 800b9c6:	edd3 8a01 	vldr	s17, [r3, #4]
 800b9ca:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b9ce:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b9d2:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b9d6:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b9da:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b9de:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b9e2:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b9e6:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b9ea:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b9ee:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b9f2:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b9f6:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b9fa:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b9fe:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ba02:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ba06:	ee63 ca87 	vmul.f32	s25, s7, s14
 800ba0a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ba0e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ba12:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ba16:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ba1a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ba1e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ba22:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ba26:	ee34 4a67 	vsub.f32	s8, s8, s15
 800ba2a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800ba2e:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ba32:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ba36:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ba3a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ba3e:	edc1 8a01 	vstr	s17, [r1, #4]
 800ba42:	ed81 aa02 	vstr	s20, [r1, #8]
 800ba46:	ed59 3a04 	vldr	s7, [r9, #-16]
 800ba4a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ba4e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ba52:	ed59 6a03 	vldr	s13, [r9, #-12]
 800ba56:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ba5a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ba5e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ba62:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ba66:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ba6a:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ba6e:	ee24 4a26 	vmul.f32	s8, s8, s13
 800ba72:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ba76:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ba7a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ba7e:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ba82:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ba86:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800ba8a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800ba8e:	ee75 6a60 	vsub.f32	s13, s10, s1
 800ba92:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800ba96:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ba9a:	ed45 3a02 	vstr	s7, [r5, #-8]
 800ba9e:	ed05 6a01 	vstr	s12, [r5, #-4]
 800baa2:	ed84 7a01 	vstr	s14, [r4, #4]
 800baa6:	ed84 4a02 	vstr	s8, [r4, #8]
 800baaa:	ee35 6a81 	vadd.f32	s12, s11, s2
 800baae:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800bab2:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800bab6:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800baba:	ee33 3a62 	vsub.f32	s6, s6, s5
 800babe:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800bac2:	ee67 2a26 	vmul.f32	s5, s14, s13
 800bac6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800baca:	ee26 5a25 	vmul.f32	s10, s12, s11
 800bace:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bad2:	ee26 6a26 	vmul.f32	s12, s12, s13
 800bad6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bada:	ee63 6a26 	vmul.f32	s13, s6, s13
 800bade:	ee23 3a25 	vmul.f32	s6, s6, s11
 800bae2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bae6:	ee75 5a24 	vadd.f32	s11, s10, s9
 800baea:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800baee:	ee36 7a87 	vadd.f32	s14, s13, s14
 800baf2:	f1bb 0b01 	subs.w	fp, fp, #1
 800baf6:	ed42 5a02 	vstr	s11, [r2, #-8]
 800bafa:	ed42 7a01 	vstr	s15, [r2, #-4]
 800bafe:	f10e 0e08 	add.w	lr, lr, #8
 800bb02:	ed83 3a02 	vstr	s6, [r3, #8]
 800bb06:	ed83 7a01 	vstr	s14, [r3, #4]
 800bb0a:	f1ac 0c08 	sub.w	ip, ip, #8
 800bb0e:	f10a 0a08 	add.w	sl, sl, #8
 800bb12:	f100 0008 	add.w	r0, r0, #8
 800bb16:	f1a1 0108 	sub.w	r1, r1, #8
 800bb1a:	f109 0910 	add.w	r9, r9, #16
 800bb1e:	f105 0508 	add.w	r5, r5, #8
 800bb22:	f1a4 0408 	sub.w	r4, r4, #8
 800bb26:	f108 0818 	add.w	r8, r8, #24
 800bb2a:	f102 0208 	add.w	r2, r2, #8
 800bb2e:	f1a3 0308 	sub.w	r3, r3, #8
 800bb32:	f47f aefc 	bne.w	800b92e <arm_cfft_radix8by4_f32+0x12e>
 800bb36:	9907      	ldr	r1, [sp, #28]
 800bb38:	9800      	ldr	r0, [sp, #0]
 800bb3a:	00cb      	lsls	r3, r1, #3
 800bb3c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800bb40:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800bb44:	9100      	str	r1, [sp, #0]
 800bb46:	9904      	ldr	r1, [sp, #16]
 800bb48:	4419      	add	r1, r3
 800bb4a:	9104      	str	r1, [sp, #16]
 800bb4c:	9903      	ldr	r1, [sp, #12]
 800bb4e:	4419      	add	r1, r3
 800bb50:	9103      	str	r1, [sp, #12]
 800bb52:	9906      	ldr	r1, [sp, #24]
 800bb54:	4419      	add	r1, r3
 800bb56:	9106      	str	r1, [sp, #24]
 800bb58:	9905      	ldr	r1, [sp, #20]
 800bb5a:	441f      	add	r7, r3
 800bb5c:	4419      	add	r1, r3
 800bb5e:	9b02      	ldr	r3, [sp, #8]
 800bb60:	9105      	str	r1, [sp, #20]
 800bb62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb66:	9302      	str	r3, [sp, #8]
 800bb68:	9904      	ldr	r1, [sp, #16]
 800bb6a:	9805      	ldr	r0, [sp, #20]
 800bb6c:	ed91 4a00 	vldr	s8, [r1]
 800bb70:	edd0 6a00 	vldr	s13, [r0]
 800bb74:	9b06      	ldr	r3, [sp, #24]
 800bb76:	ed97 3a00 	vldr	s6, [r7]
 800bb7a:	edd3 7a00 	vldr	s15, [r3]
 800bb7e:	edd0 4a01 	vldr	s9, [r0, #4]
 800bb82:	edd1 3a01 	vldr	s7, [r1, #4]
 800bb86:	ed97 2a01 	vldr	s4, [r7, #4]
 800bb8a:	ed93 7a01 	vldr	s14, [r3, #4]
 800bb8e:	9a03      	ldr	r2, [sp, #12]
 800bb90:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800bb94:	ee34 6a26 	vadd.f32	s12, s8, s13
 800bb98:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800bb9c:	ee37 5a86 	vadd.f32	s10, s15, s12
 800bba0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800bba4:	ee35 5a03 	vadd.f32	s10, s10, s6
 800bba8:	ee74 6a66 	vsub.f32	s13, s8, s13
 800bbac:	ed81 5a00 	vstr	s10, [r1]
 800bbb0:	ed93 5a01 	vldr	s10, [r3, #4]
 800bbb4:	edd7 4a01 	vldr	s9, [r7, #4]
 800bbb8:	ee35 5a85 	vadd.f32	s10, s11, s10
 800bbbc:	ee37 4a26 	vadd.f32	s8, s14, s13
 800bbc0:	ee35 5a24 	vadd.f32	s10, s10, s9
 800bbc4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800bbc8:	ed81 5a01 	vstr	s10, [r1, #4]
 800bbcc:	edd2 1a00 	vldr	s3, [r2]
 800bbd0:	edd2 2a01 	vldr	s5, [r2, #4]
 800bbd4:	ee34 5a83 	vadd.f32	s10, s9, s6
 800bbd8:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bbdc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bbe0:	ee64 4a21 	vmul.f32	s9, s8, s3
 800bbe4:	ee24 4a22 	vmul.f32	s8, s8, s5
 800bbe8:	ee65 2a22 	vmul.f32	s5, s10, s5
 800bbec:	ee25 5a21 	vmul.f32	s10, s10, s3
 800bbf0:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800bbf4:	ee35 5a44 	vsub.f32	s10, s10, s8
 800bbf8:	edc3 2a00 	vstr	s5, [r3]
 800bbfc:	ed83 5a01 	vstr	s10, [r3, #4]
 800bc00:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800bc04:	9b00      	ldr	r3, [sp, #0]
 800bc06:	ee36 6a43 	vsub.f32	s12, s12, s6
 800bc0a:	ed93 4a01 	vldr	s8, [r3, #4]
 800bc0e:	ed93 5a00 	vldr	s10, [r3]
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800bc18:	ee66 4a05 	vmul.f32	s9, s12, s10
 800bc1c:	ee25 5a85 	vmul.f32	s10, s11, s10
 800bc20:	ee26 6a04 	vmul.f32	s12, s12, s8
 800bc24:	ee65 5a84 	vmul.f32	s11, s11, s8
 800bc28:	ee35 6a46 	vsub.f32	s12, s10, s12
 800bc2c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800bc30:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bc34:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bc38:	ed80 6a01 	vstr	s12, [r0, #4]
 800bc3c:	edc0 5a00 	vstr	s11, [r0]
 800bc40:	edd3 5a01 	vldr	s11, [r3, #4]
 800bc44:	edd3 6a00 	vldr	s13, [r3]
 800bc48:	ee37 7a02 	vadd.f32	s14, s14, s4
 800bc4c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800bc50:	ee27 6a26 	vmul.f32	s12, s14, s13
 800bc54:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bc58:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bc5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bc60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bc64:	ee76 7a27 	vadd.f32	s15, s12, s15
 800bc68:	ed87 7a01 	vstr	s14, [r7, #4]
 800bc6c:	edc7 7a00 	vstr	s15, [r7]
 800bc70:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800bc74:	4621      	mov	r1, r4
 800bc76:	686a      	ldr	r2, [r5, #4]
 800bc78:	2304      	movs	r3, #4
 800bc7a:	f000 fb3f 	bl	800c2fc <arm_radix8_butterfly_f32>
 800bc7e:	4630      	mov	r0, r6
 800bc80:	4621      	mov	r1, r4
 800bc82:	686a      	ldr	r2, [r5, #4]
 800bc84:	2304      	movs	r3, #4
 800bc86:	f000 fb39 	bl	800c2fc <arm_radix8_butterfly_f32>
 800bc8a:	9808      	ldr	r0, [sp, #32]
 800bc8c:	686a      	ldr	r2, [r5, #4]
 800bc8e:	4621      	mov	r1, r4
 800bc90:	2304      	movs	r3, #4
 800bc92:	f000 fb33 	bl	800c2fc <arm_radix8_butterfly_f32>
 800bc96:	686a      	ldr	r2, [r5, #4]
 800bc98:	9801      	ldr	r0, [sp, #4]
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	b00d      	add	sp, #52	@ 0x34
 800bca0:	ecbd 8b0a 	vpop	{d8-d12}
 800bca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	f000 bb28 	b.w	800c2fc <arm_radix8_butterfly_f32>

0800bcac <arm_cfft_f32>:
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	2a01      	cmp	r2, #1
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	4617      	mov	r7, r2
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	4698      	mov	r8, r3
 800bcba:	8805      	ldrh	r5, [r0, #0]
 800bcbc:	d056      	beq.n	800bd6c <arm_cfft_f32+0xc0>
 800bcbe:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800bcc2:	d063      	beq.n	800bd8c <arm_cfft_f32+0xe0>
 800bcc4:	d916      	bls.n	800bcf4 <arm_cfft_f32+0x48>
 800bcc6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800bcca:	d01a      	beq.n	800bd02 <arm_cfft_f32+0x56>
 800bccc:	d947      	bls.n	800bd5e <arm_cfft_f32+0xb2>
 800bcce:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800bcd2:	d05b      	beq.n	800bd8c <arm_cfft_f32+0xe0>
 800bcd4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800bcd8:	d105      	bne.n	800bce6 <arm_cfft_f32+0x3a>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	6872      	ldr	r2, [r6, #4]
 800bcde:	4629      	mov	r1, r5
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 fb0b 	bl	800c2fc <arm_radix8_butterfly_f32>
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	d111      	bne.n	800bd10 <arm_cfft_f32+0x64>
 800bcec:	2f01      	cmp	r7, #1
 800bcee:	d016      	beq.n	800bd1e <arm_cfft_f32+0x72>
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf4:	2d20      	cmp	r5, #32
 800bcf6:	d049      	beq.n	800bd8c <arm_cfft_f32+0xe0>
 800bcf8:	d935      	bls.n	800bd66 <arm_cfft_f32+0xba>
 800bcfa:	2d40      	cmp	r5, #64	@ 0x40
 800bcfc:	d0ed      	beq.n	800bcda <arm_cfft_f32+0x2e>
 800bcfe:	2d80      	cmp	r5, #128	@ 0x80
 800bd00:	d1f1      	bne.n	800bce6 <arm_cfft_f32+0x3a>
 800bd02:	4621      	mov	r1, r4
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff fcab 	bl	800b660 <arm_cfft_radix8by2_f32>
 800bd0a:	f1b8 0f00 	cmp.w	r8, #0
 800bd0e:	d0ed      	beq.n	800bcec <arm_cfft_f32+0x40>
 800bd10:	68b2      	ldr	r2, [r6, #8]
 800bd12:	89b1      	ldrh	r1, [r6, #12]
 800bd14:	4620      	mov	r0, r4
 800bd16:	f000 f841 	bl	800bd9c <arm_bitreversal_32>
 800bd1a:	2f01      	cmp	r7, #1
 800bd1c:	d1e8      	bne.n	800bcf0 <arm_cfft_f32+0x44>
 800bd1e:	ee07 5a90 	vmov	s15, r5
 800bd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	d0de      	beq.n	800bcf0 <arm_cfft_f32+0x44>
 800bd32:	f104 0108 	add.w	r1, r4, #8
 800bd36:	2300      	movs	r3, #0
 800bd38:	3301      	adds	r3, #1
 800bd3a:	429d      	cmp	r5, r3
 800bd3c:	f101 0108 	add.w	r1, r1, #8
 800bd40:	ed11 7a04 	vldr	s14, [r1, #-16]
 800bd44:	ed51 7a03 	vldr	s15, [r1, #-12]
 800bd48:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bd4c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bd50:	ed01 7a04 	vstr	s14, [r1, #-16]
 800bd54:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bd58:	d1ee      	bne.n	800bd38 <arm_cfft_f32+0x8c>
 800bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800bd62:	d0ba      	beq.n	800bcda <arm_cfft_f32+0x2e>
 800bd64:	e7bf      	b.n	800bce6 <arm_cfft_f32+0x3a>
 800bd66:	2d10      	cmp	r5, #16
 800bd68:	d0cb      	beq.n	800bd02 <arm_cfft_f32+0x56>
 800bd6a:	e7bc      	b.n	800bce6 <arm_cfft_f32+0x3a>
 800bd6c:	b19d      	cbz	r5, 800bd96 <arm_cfft_f32+0xea>
 800bd6e:	f101 030c 	add.w	r3, r1, #12
 800bd72:	2200      	movs	r2, #0
 800bd74:	ed53 7a02 	vldr	s15, [r3, #-8]
 800bd78:	3201      	adds	r2, #1
 800bd7a:	eef1 7a67 	vneg.f32	s15, s15
 800bd7e:	4295      	cmp	r5, r2
 800bd80:	ed43 7a02 	vstr	s15, [r3, #-8]
 800bd84:	f103 0308 	add.w	r3, r3, #8
 800bd88:	d1f4      	bne.n	800bd74 <arm_cfft_f32+0xc8>
 800bd8a:	e798      	b.n	800bcbe <arm_cfft_f32+0x12>
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7ff fd36 	bl	800b800 <arm_cfft_radix8by4_f32>
 800bd94:	e7a7      	b.n	800bce6 <arm_cfft_f32+0x3a>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d0aa      	beq.n	800bcf0 <arm_cfft_f32+0x44>
 800bd9a:	e7b9      	b.n	800bd10 <arm_cfft_f32+0x64>

0800bd9c <arm_bitreversal_32>:
 800bd9c:	b1e9      	cbz	r1, 800bdda <arm_bitreversal_32+0x3e>
 800bd9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bda0:	2500      	movs	r5, #0
 800bda2:	f102 0e02 	add.w	lr, r2, #2
 800bda6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800bdaa:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800bdae:	08a4      	lsrs	r4, r4, #2
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800bdb6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800bdba:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800bdbe:	00a6      	lsls	r6, r4, #2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	1d34      	adds	r4, r6, #4
 800bdca:	3502      	adds	r5, #2
 800bdcc:	58c6      	ldr	r6, [r0, r3]
 800bdce:	5907      	ldr	r7, [r0, r4]
 800bdd0:	50c7      	str	r7, [r0, r3]
 800bdd2:	428d      	cmp	r5, r1
 800bdd4:	5106      	str	r6, [r0, r4]
 800bdd6:	d3e6      	bcc.n	800bda6 <arm_bitreversal_32+0xa>
 800bdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdda:	4770      	bx	lr

0800bddc <arm_fir_init_f32>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	9c04      	ldr	r4, [sp, #16]
 800bde0:	6082      	str	r2, [r0, #8]
 800bde2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800bde6:	3c01      	subs	r4, #1
 800bde8:	440c      	add	r4, r1
 800bdea:	8001      	strh	r1, [r0, #0]
 800bdec:	4605      	mov	r5, r0
 800bdee:	00a2      	lsls	r2, r4, #2
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	f000 fd62 	bl	800c8bc <memset>
 800bdf8:	6068      	str	r0, [r5, #4]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}

0800bdfc <arm_fir_f32>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	ed2d 8b10 	vpush	{d8-d15}
 800be04:	b08b      	sub	sp, #44	@ 0x2c
 800be06:	f8b0 8000 	ldrh.w	r8, [r0]
 800be0a:	9003      	str	r0, [sp, #12]
 800be0c:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800be10:	461e      	mov	r6, r3
 800be12:	9304      	str	r3, [sp, #16]
 800be14:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800be18:	3b01      	subs	r3, #1
 800be1a:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800be1e:	08f3      	lsrs	r3, r6, #3
 800be20:	9002      	str	r0, [sp, #8]
 800be22:	9500      	str	r5, [sp, #0]
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	f000 81f1 	beq.w	800c20c <arm_fir_f32+0x410>
 800be2a:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800be2e:	f100 0620 	add.w	r6, r0, #32
 800be32:	9405      	str	r4, [sp, #20]
 800be34:	0164      	lsls	r4, r4, #5
 800be36:	4420      	add	r0, r4
 800be38:	f008 0a07 	and.w	sl, r8, #7
 800be3c:	9607      	str	r6, [sp, #28]
 800be3e:	9006      	str	r0, [sp, #24]
 800be40:	469c      	mov	ip, r3
 800be42:	4650      	mov	r0, sl
 800be44:	4623      	mov	r3, r4
 800be46:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800be4a:	f8cd 8020 	str.w	r8, [sp, #32]
 800be4e:	1937      	adds	r7, r6, r4
 800be50:	f109 0b1c 	add.w	fp, r9, #28
 800be54:	f8dd e014 	ldr.w	lr, [sp, #20]
 800be58:	9209      	str	r2, [sp, #36]	@ 0x24
 800be5a:	f8cd 9014 	str.w	r9, [sp, #20]
 800be5e:	f101 0620 	add.w	r6, r1, #32
 800be62:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800be66:	9106      	str	r1, [sp, #24]
 800be68:	3520      	adds	r5, #32
 800be6a:	f102 0420 	add.w	r4, r2, #32
 800be6e:	4698      	mov	r8, r3
 800be70:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800be74:	f845 3c20 	str.w	r3, [r5, #-32]
 800be78:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800be7c:	f845 3c1c 	str.w	r3, [r5, #-28]
 800be80:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800be84:	f845 3c18 	str.w	r3, [r5, #-24]
 800be88:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800be8c:	f845 3c14 	str.w	r3, [r5, #-20]
 800be90:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800be94:	f845 3c10 	str.w	r3, [r5, #-16]
 800be98:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800be9c:	f845 3c0c 	str.w	r3, [r5, #-12]
 800bea0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800bea4:	f845 3c08 	str.w	r3, [r5, #-8]
 800bea8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800beac:	f845 3c04 	str.w	r3, [r5, #-4]
 800beb0:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800beb4:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800beb8:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800bebc:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800bec0:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800bec4:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800bec8:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800becc:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800c2a4 <arm_fir_f32+0x4a8>
 800bed0:	465a      	mov	r2, fp
 800bed2:	f1be 0f00 	cmp.w	lr, #0
 800bed6:	f000 81fe 	beq.w	800c2d6 <arm_fir_f32+0x4da>
 800beda:	f10b 0120 	add.w	r1, fp, #32
 800bede:	eef0 ba66 	vmov.f32	s23, s13
 800bee2:	eeb0 6a66 	vmov.f32	s12, s13
 800bee6:	eeb0 9a66 	vmov.f32	s18, s13
 800beea:	eef0 9a66 	vmov.f32	s19, s13
 800beee:	eeb0 aa66 	vmov.f32	s20, s13
 800bef2:	eef0 aa66 	vmov.f32	s21, s13
 800bef6:	eeb0 ba66 	vmov.f32	s22, s13
 800befa:	460a      	mov	r2, r1
 800befc:	4653      	mov	r3, sl
 800befe:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800bf02:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800bf06:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800bf0a:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800bf0e:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800bf12:	ed53 ca04 	vldr	s25, [r3, #-16]
 800bf16:	ed53 2a03 	vldr	s5, [r3, #-12]
 800bf1a:	ed13 4a02 	vldr	s8, [r3, #-8]
 800bf1e:	ed13 5a01 	vldr	s10, [r3, #-4]
 800bf22:	ee67 fa02 	vmul.f32	s31, s14, s4
 800bf26:	ee27 da21 	vmul.f32	s26, s14, s3
 800bf2a:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800bf2e:	ee27 ca01 	vmul.f32	s24, s14, s2
 800bf32:	ee27 3a20 	vmul.f32	s6, s14, s1
 800bf36:	ee67 3a00 	vmul.f32	s7, s14, s0
 800bf3a:	ee67 5a08 	vmul.f32	s11, s14, s16
 800bf3e:	ee27 fa28 	vmul.f32	s30, s14, s17
 800bf42:	ee67 7a24 	vmul.f32	s15, s14, s9
 800bf46:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800bf4a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800bf4e:	ee6e faa1 	vmul.f32	s31, s29, s3
 800bf52:	ee2e da81 	vmul.f32	s26, s29, s2
 800bf56:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800bf5a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800bf5e:	ee73 9a29 	vadd.f32	s19, s6, s19
 800bf62:	ee2e caa0 	vmul.f32	s24, s29, s1
 800bf66:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800bf6a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800bf6e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800bf72:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800bf76:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800bf7a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800bf7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf82:	ee24 faae 	vmul.f32	s30, s9, s29
 800bf86:	ee6e ea82 	vmul.f32	s29, s29, s4
 800bf8a:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800bf8e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800bf92:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800bf96:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800bf9a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800bf9e:	ee2e da20 	vmul.f32	s26, s28, s1
 800bfa2:	ee2e ca00 	vmul.f32	s24, s28, s0
 800bfa6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800bfaa:	ee33 9a89 	vadd.f32	s18, s7, s18
 800bfae:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800bfb2:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800bfb6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800bfba:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800bfbe:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800bfc2:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800bfc6:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800bfca:	ee2e ea21 	vmul.f32	s28, s28, s3
 800bfce:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800bfd2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800bfd6:	ed52 0a04 	vldr	s1, [r2, #-16]
 800bfda:	ee2d da80 	vmul.f32	s26, s27, s0
 800bfde:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800bfe2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800bfe6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800bfea:	ee2d ca88 	vmul.f32	s24, s27, s16
 800bfee:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800bff2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800bff6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800bffa:	ee64 3aad 	vmul.f32	s7, s9, s27
 800bffe:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800c002:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c006:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800c00a:	ee21 faad 	vmul.f32	s30, s3, s27
 800c00e:	ee6d da81 	vmul.f32	s27, s27, s2
 800c012:	ee6c fa80 	vmul.f32	s31, s25, s0
 800c016:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800c01a:	ed12 0a03 	vldr	s0, [r2, #-12]
 800c01e:	ee3d da2a 	vadd.f32	s26, s26, s21
 800c022:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c026:	ee6c aa88 	vmul.f32	s21, s25, s16
 800c02a:	ee2c caa8 	vmul.f32	s24, s25, s17
 800c02e:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c032:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c036:	ee24 3aac 	vmul.f32	s6, s9, s25
 800c03a:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800c03e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c042:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c046:	ee61 5aac 	vmul.f32	s11, s3, s25
 800c04a:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800c04e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800c052:	ee6c caa0 	vmul.f32	s25, s25, s1
 800c056:	ee62 ea88 	vmul.f32	s29, s5, s16
 800c05a:	ee3a da8d 	vadd.f32	s26, s21, s26
 800c05e:	ed12 8a02 	vldr	s16, [r2, #-8]
 800c062:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800c066:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c06a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c06e:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c072:	ee24 caa2 	vmul.f32	s24, s9, s5
 800c076:	ee22 3a22 	vmul.f32	s6, s4, s5
 800c07a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c07e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c082:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800c086:	ee61 5a22 	vmul.f32	s11, s2, s5
 800c08a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c08e:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800c092:	ee20 faa2 	vmul.f32	s30, s1, s5
 800c096:	ee62 2a80 	vmul.f32	s5, s5, s0
 800c09a:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800c09e:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800c0a2:	ee24 ba28 	vmul.f32	s22, s8, s17
 800c0a6:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800c0aa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c0ae:	ee24 da84 	vmul.f32	s26, s9, s8
 800c0b2:	ee22 ca04 	vmul.f32	s24, s4, s8
 800c0b6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c0ba:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c0be:	ee21 3a84 	vmul.f32	s6, s3, s8
 800c0c2:	ee61 3a04 	vmul.f32	s7, s2, s8
 800c0c6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c0ca:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c0ce:	ee60 5a84 	vmul.f32	s11, s1, s8
 800c0d2:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c0d6:	ee64 6a08 	vmul.f32	s13, s8, s16
 800c0da:	ed52 8a01 	vldr	s17, [r2, #-4]
 800c0de:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c0e2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c0e6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c0ea:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800c0ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c0f2:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800c0f6:	ee64 4a85 	vmul.f32	s9, s9, s10
 800c0fa:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c0fe:	ee22 4a05 	vmul.f32	s8, s4, s10
 800c102:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c106:	ee61 2a85 	vmul.f32	s5, s3, s10
 800c10a:	ee21 3a05 	vmul.f32	s6, s2, s10
 800c10e:	ee60 3a85 	vmul.f32	s7, s1, s10
 800c112:	ee60 5a05 	vmul.f32	s11, s0, s10
 800c116:	ee68 ba05 	vmul.f32	s23, s16, s10
 800c11a:	ee65 7a28 	vmul.f32	s15, s10, s17
 800c11e:	3320      	adds	r3, #32
 800c120:	429f      	cmp	r7, r3
 800c122:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800c126:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800c12a:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800c12e:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c132:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c136:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c13a:	ee7b ba87 	vadd.f32	s23, s23, s14
 800c13e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c142:	f102 0220 	add.w	r2, r2, #32
 800c146:	f47f aeda 	bne.w	800befe <arm_fir_f32+0x102>
 800c14a:	eb0b 0208 	add.w	r2, fp, r8
 800c14e:	46cb      	mov	fp, r9
 800c150:	b3a0      	cbz	r0, 800c1bc <arm_fir_f32+0x3c0>
 800c152:	4603      	mov	r3, r0
 800c154:	ecfb 7a01 	vldmia	fp!, {s15}
 800c158:	ecf2 5a01 	vldmia	r2!, {s11}
 800c15c:	ee27 2a82 	vmul.f32	s4, s15, s4
 800c160:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800c164:	ee27 3a81 	vmul.f32	s6, s15, s2
 800c168:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800c16c:	ee27 4a80 	vmul.f32	s8, s15, s0
 800c170:	ee67 4a88 	vmul.f32	s9, s15, s16
 800c174:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800c178:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c17c:	3b01      	subs	r3, #1
 800c17e:	ee3b ba02 	vadd.f32	s22, s22, s4
 800c182:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800c186:	eeb0 2a61 	vmov.f32	s4, s3
 800c18a:	ee3a aa03 	vadd.f32	s20, s20, s6
 800c18e:	eef0 1a41 	vmov.f32	s3, s2
 800c192:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800c196:	eeb0 1a60 	vmov.f32	s2, s1
 800c19a:	ee39 9a04 	vadd.f32	s18, s18, s8
 800c19e:	eef0 0a40 	vmov.f32	s1, s0
 800c1a2:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c1a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c1aa:	ee7b ba85 	vadd.f32	s23, s23, s10
 800c1ae:	eeb0 8a68 	vmov.f32	s16, s17
 800c1b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c1b6:	eef0 8a65 	vmov.f32	s17, s11
 800c1ba:	d1cb      	bne.n	800c154 <arm_fir_f32+0x358>
 800c1bc:	f1bc 0c01 	subs.w	ip, ip, #1
 800c1c0:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800c1c4:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800c1c8:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800c1cc:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800c1d0:	ed04 9a04 	vstr	s18, [r4, #-16]
 800c1d4:	ed04 6a03 	vstr	s12, [r4, #-12]
 800c1d8:	ed44 ba02 	vstr	s23, [r4, #-8]
 800c1dc:	ed44 6a01 	vstr	s13, [r4, #-4]
 800c1e0:	f106 0620 	add.w	r6, r6, #32
 800c1e4:	f105 0520 	add.w	r5, r5, #32
 800c1e8:	f104 0420 	add.w	r4, r4, #32
 800c1ec:	468b      	mov	fp, r1
 800c1ee:	f47f ae3f 	bne.w	800be70 <arm_fir_f32+0x74>
 800c1f2:	9b01      	ldr	r3, [sp, #4]
 800c1f4:	9800      	ldr	r0, [sp, #0]
 800c1f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1fc:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800c200:	015b      	lsls	r3, r3, #5
 800c202:	4418      	add	r0, r3
 800c204:	4419      	add	r1, r3
 800c206:	441a      	add	r2, r3
 800c208:	4499      	add	r9, r3
 800c20a:	9000      	str	r0, [sp, #0]
 800c20c:	9b04      	ldr	r3, [sp, #16]
 800c20e:	f013 0707 	ands.w	r7, r3, #7
 800c212:	d020      	beq.n	800c256 <arm_fir_f32+0x45a>
 800c214:	00bf      	lsls	r7, r7, #2
 800c216:	9e00      	ldr	r6, [sp, #0]
 800c218:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c21c:	eb01 0c07 	add.w	ip, r1, r7
 800c220:	464d      	mov	r5, r9
 800c222:	f851 3b04 	ldr.w	r3, [r1], #4
 800c226:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800c2a4 <arm_fir_f32+0x4a8>
 800c22a:	f846 3b04 	str.w	r3, [r6], #4
 800c22e:	4674      	mov	r4, lr
 800c230:	4643      	mov	r3, r8
 800c232:	4628      	mov	r0, r5
 800c234:	ecf0 7a01 	vldmia	r0!, {s15}
 800c238:	ecf4 6a01 	vldmia	r4!, {s13}
 800c23c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c240:	3b01      	subs	r3, #1
 800c242:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c246:	d1f5      	bne.n	800c234 <arm_fir_f32+0x438>
 800c248:	4561      	cmp	r1, ip
 800c24a:	eca2 7a01 	vstmia	r2!, {s14}
 800c24e:	f105 0504 	add.w	r5, r5, #4
 800c252:	d1e6      	bne.n	800c222 <arm_fir_f32+0x426>
 800c254:	44b9      	add	r9, r7
 800c256:	f108 38ff 	add.w	r8, r8, #4294967295
 800c25a:	9b03      	ldr	r3, [sp, #12]
 800c25c:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800c260:	685d      	ldr	r5, [r3, #4]
 800c262:	d021      	beq.n	800c2a8 <arm_fir_f32+0x4ac>
 800c264:	f109 0210 	add.w	r2, r9, #16
 800c268:	f105 0310 	add.w	r3, r5, #16
 800c26c:	4621      	mov	r1, r4
 800c26e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800c272:	f843 0c10 	str.w	r0, [r3, #-16]
 800c276:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c27a:	f843 0c0c 	str.w	r0, [r3, #-12]
 800c27e:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800c282:	f843 0c08 	str.w	r0, [r3, #-8]
 800c286:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c28a:	f843 0c04 	str.w	r0, [r3, #-4]
 800c28e:	3901      	subs	r1, #1
 800c290:	f102 0210 	add.w	r2, r2, #16
 800c294:	f103 0310 	add.w	r3, r3, #16
 800c298:	d1e9      	bne.n	800c26e <arm_fir_f32+0x472>
 800c29a:	0124      	lsls	r4, r4, #4
 800c29c:	44a1      	add	r9, r4
 800c29e:	4425      	add	r5, r4
 800c2a0:	e002      	b.n	800c2a8 <arm_fir_f32+0x4ac>
 800c2a2:	bf00      	nop
 800c2a4:	00000000 	.word	0x00000000
 800c2a8:	f018 0803 	ands.w	r8, r8, #3
 800c2ac:	d00e      	beq.n	800c2cc <arm_fir_f32+0x4d0>
 800c2ae:	f8d9 3000 	ldr.w	r3, [r9]
 800c2b2:	602b      	str	r3, [r5, #0]
 800c2b4:	f1b8 0801 	subs.w	r8, r8, #1
 800c2b8:	d008      	beq.n	800c2cc <arm_fir_f32+0x4d0>
 800c2ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c2be:	606b      	str	r3, [r5, #4]
 800c2c0:	f1b8 0f01 	cmp.w	r8, #1
 800c2c4:	bf1c      	itt	ne
 800c2c6:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800c2ca:	60ab      	strne	r3, [r5, #8]
 800c2cc:	b00b      	add	sp, #44	@ 0x2c
 800c2ce:	ecbd 8b10 	vpop	{d8-d15}
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	eef0 ba66 	vmov.f32	s23, s13
 800c2da:	eeb0 6a66 	vmov.f32	s12, s13
 800c2de:	eeb0 9a66 	vmov.f32	s18, s13
 800c2e2:	eef0 9a66 	vmov.f32	s19, s13
 800c2e6:	eeb0 aa66 	vmov.f32	s20, s13
 800c2ea:	eef0 aa66 	vmov.f32	s21, s13
 800c2ee:	eeb0 ba66 	vmov.f32	s22, s13
 800c2f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c2f6:	f102 0120 	add.w	r1, r2, #32
 800c2fa:	e729      	b.n	800c150 <arm_fir_f32+0x354>

0800c2fc <arm_radix8_butterfly_f32>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	ed2d 8b10 	vpush	{d8-d15}
 800c304:	b095      	sub	sp, #84	@ 0x54
 800c306:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800c30a:	4603      	mov	r3, r0
 800c30c:	3304      	adds	r3, #4
 800c30e:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800c5f4 <arm_radix8_butterfly_f32+0x2f8>
 800c312:	9012      	str	r0, [sp, #72]	@ 0x48
 800c314:	468b      	mov	fp, r1
 800c316:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c318:	4689      	mov	r9, r1
 800c31a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800c31e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c320:	960f      	str	r6, [sp, #60]	@ 0x3c
 800c322:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800c326:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800c32a:	eb03 0508 	add.w	r5, r3, r8
 800c32e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800c332:	eb05 040e 	add.w	r4, r5, lr
 800c336:	0137      	lsls	r7, r6, #4
 800c338:	eba6 030a 	sub.w	r3, r6, sl
 800c33c:	eb04 000e 	add.w	r0, r4, lr
 800c340:	44b2      	add	sl, r6
 800c342:	1d3a      	adds	r2, r7, #4
 800c344:	9702      	str	r7, [sp, #8]
 800c346:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800c34a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800c34e:	ebae 0c06 	sub.w	ip, lr, r6
 800c352:	9703      	str	r7, [sp, #12]
 800c354:	eb03 0708 	add.w	r7, r3, r8
 800c358:	9701      	str	r7, [sp, #4]
 800c35a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800c35e:	9706      	str	r7, [sp, #24]
 800c360:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c362:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c366:	f10e 0104 	add.w	r1, lr, #4
 800c36a:	4439      	add	r1, r7
 800c36c:	443a      	add	r2, r7
 800c36e:	0137      	lsls	r7, r6, #4
 800c370:	00f6      	lsls	r6, r6, #3
 800c372:	9704      	str	r7, [sp, #16]
 800c374:	9605      	str	r6, [sp, #20]
 800c376:	9f01      	ldr	r7, [sp, #4]
 800c378:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c37a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800c37e:	f04f 0c00 	mov.w	ip, #0
 800c382:	edd4 6a00 	vldr	s13, [r4]
 800c386:	edd7 1a00 	vldr	s3, [r7]
 800c38a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800c38e:	edd5 5a00 	vldr	s11, [r5]
 800c392:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c396:	ed90 6a00 	vldr	s12, [r0]
 800c39a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c39e:	ed93 3a00 	vldr	s6, [r3]
 800c3a2:	ee39 0a86 	vadd.f32	s0, s19, s12
 800c3a6:	ee33 2a21 	vadd.f32	s4, s6, s3
 800c3aa:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800c3ae:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800c3b2:	ee35 7a02 	vadd.f32	s14, s10, s4
 800c3b6:	ee34 4a80 	vadd.f32	s8, s9, s0
 800c3ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3be:	ee74 6a07 	vadd.f32	s13, s8, s14
 800c3c2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800c3c6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800c3ca:	ed85 4a00 	vstr	s8, [r5]
 800c3ce:	edd1 6a00 	vldr	s13, [r1]
 800c3d2:	ed94 9a01 	vldr	s18, [r4, #4]
 800c3d6:	edd3 2a01 	vldr	s5, [r3, #4]
 800c3da:	edd7 8a01 	vldr	s17, [r7, #4]
 800c3de:	edd6 0a00 	vldr	s1, [r6]
 800c3e2:	edd5 3a01 	vldr	s7, [r5, #4]
 800c3e6:	ed90 8a01 	vldr	s16, [r0, #4]
 800c3ea:	ed92 7a00 	vldr	s14, [r2]
 800c3ee:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c3f2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800c3f6:	ee72 aae8 	vsub.f32	s21, s5, s17
 800c3fa:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800c3fe:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800c402:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c406:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800c40a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800c40e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800c412:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800c416:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800c41a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800c41e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800c422:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c426:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800c42a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800c42e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800c432:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800c436:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c43a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800c43e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c442:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800c446:	ee33 2a20 	vadd.f32	s4, s6, s1
 800c44a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800c44e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c452:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800c456:	ee77 0a01 	vadd.f32	s1, s14, s2
 800c45a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800c45e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800c462:	ee73 1a84 	vadd.f32	s3, s7, s8
 800c466:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c46a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800c46e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c472:	ee32 8a00 	vadd.f32	s16, s4, s0
 800c476:	ee33 1a45 	vsub.f32	s2, s6, s10
 800c47a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800c47e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c482:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800c486:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800c48a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800c48e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800c492:	ee75 4a87 	vadd.f32	s9, s11, s14
 800c496:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800c49a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c49e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c4a2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800c4a6:	44dc      	add	ip, fp
 800c4a8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c4ac:	45e1      	cmp	r9, ip
 800c4ae:	ed86 8a00 	vstr	s16, [r6]
 800c4b2:	ed85 2a01 	vstr	s4, [r5, #4]
 800c4b6:	4456      	add	r6, sl
 800c4b8:	ed02 0a01 	vstr	s0, [r2, #-4]
 800c4bc:	4455      	add	r5, sl
 800c4be:	edc0 6a00 	vstr	s13, [r0]
 800c4c2:	ed82 1a00 	vstr	s2, [r2]
 800c4c6:	ed80 5a01 	vstr	s10, [r0, #4]
 800c4ca:	4452      	add	r2, sl
 800c4cc:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c4d0:	4450      	add	r0, sl
 800c4d2:	edc7 2a00 	vstr	s5, [r7]
 800c4d6:	edc4 4a00 	vstr	s9, [r4]
 800c4da:	ed83 7a00 	vstr	s14, [r3]
 800c4de:	edc1 5a00 	vstr	s11, [r1]
 800c4e2:	edc7 3a01 	vstr	s7, [r7, #4]
 800c4e6:	4451      	add	r1, sl
 800c4e8:	ed84 6a01 	vstr	s12, [r4, #4]
 800c4ec:	4457      	add	r7, sl
 800c4ee:	edc3 7a01 	vstr	s15, [r3, #4]
 800c4f2:	4454      	add	r4, sl
 800c4f4:	4453      	add	r3, sl
 800c4f6:	f63f af44 	bhi.w	800c382 <arm_radix8_butterfly_f32+0x86>
 800c4fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4fc:	2b07      	cmp	r3, #7
 800c4fe:	f240 81b7 	bls.w	800c870 <arm_radix8_butterfly_f32+0x574>
 800c502:	9b06      	ldr	r3, [sp, #24]
 800c504:	9903      	ldr	r1, [sp, #12]
 800c506:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c508:	9e05      	ldr	r6, [sp, #20]
 800c50a:	9a04      	ldr	r2, [sp, #16]
 800c50c:	f103 0c08 	add.w	ip, r3, #8
 800c510:	9b02      	ldr	r3, [sp, #8]
 800c512:	3108      	adds	r1, #8
 800c514:	f108 0808 	add.w	r8, r8, #8
 800c518:	1841      	adds	r1, r0, r1
 800c51a:	3608      	adds	r6, #8
 800c51c:	330c      	adds	r3, #12
 800c51e:	4604      	mov	r4, r0
 800c520:	4444      	add	r4, r8
 800c522:	18c3      	adds	r3, r0, r3
 800c524:	9109      	str	r1, [sp, #36]	@ 0x24
 800c526:	1981      	adds	r1, r0, r6
 800c528:	f10e 0e08 	add.w	lr, lr, #8
 800c52c:	3208      	adds	r2, #8
 800c52e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c530:	9107      	str	r1, [sp, #28]
 800c532:	4604      	mov	r4, r0
 800c534:	4601      	mov	r1, r0
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	f100 030c 	add.w	r3, r0, #12
 800c53c:	4474      	add	r4, lr
 800c53e:	f04f 0801 	mov.w	r8, #1
 800c542:	1882      	adds	r2, r0, r2
 800c544:	4461      	add	r1, ip
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	464b      	mov	r3, r9
 800c54a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c54c:	46c1      	mov	r9, r8
 800c54e:	9208      	str	r2, [sp, #32]
 800c550:	46d8      	mov	r8, fp
 800c552:	9106      	str	r1, [sp, #24]
 800c554:	f04f 0e00 	mov.w	lr, #0
 800c558:	469b      	mov	fp, r3
 800c55a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c55c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c55e:	449e      	add	lr, r3
 800c560:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800c564:	441a      	add	r2, r3
 800c566:	920e      	str	r2, [sp, #56]	@ 0x38
 800c568:	441a      	add	r2, r3
 800c56a:	18d4      	adds	r4, r2, r3
 800c56c:	18e5      	adds	r5, r4, r3
 800c56e:	18ee      	adds	r6, r5, r3
 800c570:	18f7      	adds	r7, r6, r3
 800c572:	eb07 0c03 	add.w	ip, r7, r3
 800c576:	920d      	str	r2, [sp, #52]	@ 0x34
 800c578:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800c57c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800c580:	910c      	str	r1, [sp, #48]	@ 0x30
 800c582:	4419      	add	r1, r3
 800c584:	9103      	str	r1, [sp, #12]
 800c586:	4419      	add	r1, r3
 800c588:	18ca      	adds	r2, r1, r3
 800c58a:	9202      	str	r2, [sp, #8]
 800c58c:	441a      	add	r2, r3
 800c58e:	18d0      	adds	r0, r2, r3
 800c590:	ed92 ea01 	vldr	s28, [r2, #4]
 800c594:	9a02      	ldr	r2, [sp, #8]
 800c596:	edd4 7a00 	vldr	s15, [r4]
 800c59a:	edd2 da01 	vldr	s27, [r2, #4]
 800c59e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c5a0:	ed91 da01 	vldr	s26, [r1, #4]
 800c5a4:	ed92 ca01 	vldr	s24, [r2, #4]
 800c5a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c5aa:	9903      	ldr	r1, [sp, #12]
 800c5ac:	edcd 7a03 	vstr	s15, [sp, #12]
 800c5b0:	edd2 7a00 	vldr	s15, [r2]
 800c5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5b6:	edcd 7a02 	vstr	s15, [sp, #8]
 800c5ba:	edd2 7a00 	vldr	s15, [r2]
 800c5be:	edd0 ea01 	vldr	s29, [r0, #4]
 800c5c2:	edd1 ca01 	vldr	s25, [r1, #4]
 800c5c6:	eddc ba00 	vldr	s23, [ip]
 800c5ca:	edd7 aa00 	vldr	s21, [r7]
 800c5ce:	ed96 aa00 	vldr	s20, [r6]
 800c5d2:	edd5 9a00 	vldr	s19, [r5]
 800c5d6:	edcd 7a01 	vstr	s15, [sp, #4]
 800c5da:	4403      	add	r3, r0
 800c5dc:	ed93 fa01 	vldr	s30, [r3, #4]
 800c5e0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800c5e4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800c5e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800c5f0:	46cc      	mov	ip, r9
 800c5f2:	e001      	b.n	800c5f8 <arm_radix8_butterfly_f32+0x2fc>
 800c5f4:	3f3504f3 	.word	0x3f3504f3
 800c5f8:	ed91 6a00 	vldr	s12, [r1]
 800c5fc:	ed93 5a00 	vldr	s10, [r3]
 800c600:	edd0 fa00 	vldr	s31, [r0]
 800c604:	edd4 7a00 	vldr	s15, [r4]
 800c608:	ed95 7a00 	vldr	s14, [r5]
 800c60c:	ed56 3a01 	vldr	s7, [r6, #-4]
 800c610:	ed17 3a01 	vldr	s6, [r7, #-4]
 800c614:	ed92 2a00 	vldr	s4, [r2]
 800c618:	ed96 0a00 	vldr	s0, [r6]
 800c61c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c620:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c624:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800c628:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c62c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c630:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c634:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c638:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c63c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c640:	ed06 6a01 	vstr	s12, [r6, #-4]
 800c644:	edd4 8a01 	vldr	s17, [r4, #4]
 800c648:	ed92 9a01 	vldr	s18, [r2, #4]
 800c64c:	edd7 0a00 	vldr	s1, [r7]
 800c650:	edd1 2a01 	vldr	s5, [r1, #4]
 800c654:	ed95 7a01 	vldr	s14, [r5, #4]
 800c658:	ed93 6a01 	vldr	s12, [r3, #4]
 800c65c:	edd0 5a01 	vldr	s11, [r0, #4]
 800c660:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c664:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800c668:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c66c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800c670:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c674:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c678:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c67c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c680:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c684:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c688:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c68c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800c690:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c694:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800c698:	ee32 1a08 	vadd.f32	s2, s4, s16
 800c69c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800c6a0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c6a4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c6a8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c6ac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c6b0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c6b4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c6b8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800c6bc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800c6c0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c6c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c6c8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800c6cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c6d0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c6d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c6d8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800c6dc:	ee73 8a09 	vadd.f32	s17, s6, s18
 800c6e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 800c6e4:	ee33 9a49 	vsub.f32	s18, s6, s18
 800c6e8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800c6ec:	ee35 3a85 	vadd.f32	s6, s11, s10
 800c6f0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c6f4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800c6f8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c6fc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800c700:	ee30 7a68 	vsub.f32	s14, s0, s17
 800c704:	ee35 8a03 	vadd.f32	s16, s10, s6
 800c708:	ee38 0a80 	vadd.f32	s0, s17, s0
 800c70c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800c710:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800c714:	ed9d 2a01 	vldr	s4, [sp, #4]
 800c718:	eddd 1a02 	vldr	s3, [sp, #8]
 800c71c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800c720:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800c724:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800c728:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800c72c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c730:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800c734:	ee76 5a49 	vsub.f32	s11, s12, s18
 800c738:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800c73c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800c740:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800c744:	ee21 4a84 	vmul.f32	s8, s3, s8
 800c748:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800c74c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800c750:	ee22 2a08 	vmul.f32	s4, s4, s16
 800c754:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c758:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800c75c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800c760:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800c764:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800c768:	ee74 0a60 	vsub.f32	s1, s8, s1
 800c76c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c770:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800c774:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800c778:	ee72 1a21 	vadd.f32	s3, s4, s3
 800c77c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800c780:	ee38 2a89 	vadd.f32	s4, s17, s18
 800c784:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800c788:	ee38 8a04 	vadd.f32	s16, s16, s8
 800c78c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800c790:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800c794:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800c798:	eddd 5a03 	vldr	s11, [sp, #12]
 800c79c:	edc6 fa00 	vstr	s31, [r6]
 800c7a0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800c7a4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c7a8:	ee30 0a45 	vsub.f32	s0, s0, s10
 800c7ac:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800c7b0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800c7b4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800c7b8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800c7bc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c7c0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c7c4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800c7c8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800c7cc:	ee78 8a85 	vadd.f32	s17, s17, s10
 800c7d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c7d4:	44c4      	add	ip, r8
 800c7d6:	45e3      	cmp	fp, ip
 800c7d8:	edc3 3a00 	vstr	s7, [r3]
 800c7dc:	edc3 6a01 	vstr	s13, [r3, #4]
 800c7e0:	4456      	add	r6, sl
 800c7e2:	ed07 1a01 	vstr	s2, [r7, #-4]
 800c7e6:	edc7 0a00 	vstr	s1, [r7]
 800c7ea:	4453      	add	r3, sl
 800c7ec:	ed80 2a00 	vstr	s4, [r0]
 800c7f0:	edc0 2a01 	vstr	s5, [r0, #4]
 800c7f4:	4457      	add	r7, sl
 800c7f6:	edc2 1a00 	vstr	s3, [r2]
 800c7fa:	ed82 7a01 	vstr	s14, [r2, #4]
 800c7fe:	4450      	add	r0, sl
 800c800:	ed85 8a00 	vstr	s16, [r5]
 800c804:	ed85 0a01 	vstr	s0, [r5, #4]
 800c808:	4452      	add	r2, sl
 800c80a:	edc1 4a00 	vstr	s9, [r1]
 800c80e:	4455      	add	r5, sl
 800c810:	ed81 3a01 	vstr	s6, [r1, #4]
 800c814:	edc4 8a00 	vstr	s17, [r4]
 800c818:	ed84 6a01 	vstr	s12, [r4, #4]
 800c81c:	4451      	add	r1, sl
 800c81e:	4454      	add	r4, sl
 800c820:	f63f aeea 	bhi.w	800c5f8 <arm_radix8_butterfly_f32+0x2fc>
 800c824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c826:	3308      	adds	r3, #8
 800c828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c82c:	3308      	adds	r3, #8
 800c82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c832:	3308      	adds	r3, #8
 800c834:	9309      	str	r3, [sp, #36]	@ 0x24
 800c836:	9b08      	ldr	r3, [sp, #32]
 800c838:	3308      	adds	r3, #8
 800c83a:	9308      	str	r3, [sp, #32]
 800c83c:	9b07      	ldr	r3, [sp, #28]
 800c83e:	3308      	adds	r3, #8
 800c840:	9307      	str	r3, [sp, #28]
 800c842:	9b06      	ldr	r3, [sp, #24]
 800c844:	3308      	adds	r3, #8
 800c846:	9306      	str	r3, [sp, #24]
 800c848:	9b05      	ldr	r3, [sp, #20]
 800c84a:	3308      	adds	r3, #8
 800c84c:	9305      	str	r3, [sp, #20]
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	3308      	adds	r3, #8
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c856:	f109 0901 	add.w	r9, r9, #1
 800c85a:	454b      	cmp	r3, r9
 800c85c:	f47f ae7d 	bne.w	800c55a <arm_radix8_butterfly_f32+0x25e>
 800c860:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c862:	00db      	lsls	r3, r3, #3
 800c864:	b29b      	uxth	r3, r3
 800c866:	46d9      	mov	r9, fp
 800c868:	9310      	str	r3, [sp, #64]	@ 0x40
 800c86a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800c86e:	e554      	b.n	800c31a <arm_radix8_butterfly_f32+0x1e>
 800c870:	b015      	add	sp, #84	@ 0x54
 800c872:	ecbd 8b10 	vpop	{d8-d15}
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87a:	bf00      	nop

0800c87c <siprintf>:
 800c87c:	b40e      	push	{r1, r2, r3}
 800c87e:	b500      	push	{lr}
 800c880:	b09c      	sub	sp, #112	@ 0x70
 800c882:	ab1d      	add	r3, sp, #116	@ 0x74
 800c884:	9002      	str	r0, [sp, #8]
 800c886:	9006      	str	r0, [sp, #24]
 800c888:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c88c:	4809      	ldr	r0, [pc, #36]	@ (800c8b4 <siprintf+0x38>)
 800c88e:	9107      	str	r1, [sp, #28]
 800c890:	9104      	str	r1, [sp, #16]
 800c892:	4909      	ldr	r1, [pc, #36]	@ (800c8b8 <siprintf+0x3c>)
 800c894:	f853 2b04 	ldr.w	r2, [r3], #4
 800c898:	9105      	str	r1, [sp, #20]
 800c89a:	6800      	ldr	r0, [r0, #0]
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	a902      	add	r1, sp, #8
 800c8a0:	f000 f994 	bl	800cbcc <_svfiprintf_r>
 800c8a4:	9b02      	ldr	r3, [sp, #8]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]
 800c8aa:	b01c      	add	sp, #112	@ 0x70
 800c8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8b0:	b003      	add	sp, #12
 800c8b2:	4770      	bx	lr
 800c8b4:	20000038 	.word	0x20000038
 800c8b8:	ffff0208 	.word	0xffff0208

0800c8bc <memset>:
 800c8bc:	4402      	add	r2, r0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d100      	bne.n	800c8c6 <memset+0xa>
 800c8c4:	4770      	bx	lr
 800c8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ca:	e7f9      	b.n	800c8c0 <memset+0x4>

0800c8cc <__errno>:
 800c8cc:	4b01      	ldr	r3, [pc, #4]	@ (800c8d4 <__errno+0x8>)
 800c8ce:	6818      	ldr	r0, [r3, #0]
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	20000038 	.word	0x20000038

0800c8d8 <__libc_init_array>:
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	4d0d      	ldr	r5, [pc, #52]	@ (800c910 <__libc_init_array+0x38>)
 800c8dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c914 <__libc_init_array+0x3c>)
 800c8de:	1b64      	subs	r4, r4, r5
 800c8e0:	10a4      	asrs	r4, r4, #2
 800c8e2:	2600      	movs	r6, #0
 800c8e4:	42a6      	cmp	r6, r4
 800c8e6:	d109      	bne.n	800c8fc <__libc_init_array+0x24>
 800c8e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c918 <__libc_init_array+0x40>)
 800c8ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c91c <__libc_init_array+0x44>)
 800c8ec:	f000 fc88 	bl	800d200 <_init>
 800c8f0:	1b64      	subs	r4, r4, r5
 800c8f2:	10a4      	asrs	r4, r4, #2
 800c8f4:	2600      	movs	r6, #0
 800c8f6:	42a6      	cmp	r6, r4
 800c8f8:	d105      	bne.n	800c906 <__libc_init_array+0x2e>
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c900:	4798      	blx	r3
 800c902:	3601      	adds	r6, #1
 800c904:	e7ee      	b.n	800c8e4 <__libc_init_array+0xc>
 800c906:	f855 3b04 	ldr.w	r3, [r5], #4
 800c90a:	4798      	blx	r3
 800c90c:	3601      	adds	r6, #1
 800c90e:	e7f2      	b.n	800c8f6 <__libc_init_array+0x1e>
 800c910:	0802082c 	.word	0x0802082c
 800c914:	0802082c 	.word	0x0802082c
 800c918:	0802082c 	.word	0x0802082c
 800c91c:	08020830 	.word	0x08020830

0800c920 <__retarget_lock_acquire_recursive>:
 800c920:	4770      	bx	lr

0800c922 <__retarget_lock_release_recursive>:
 800c922:	4770      	bx	lr

0800c924 <_free_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4605      	mov	r5, r0
 800c928:	2900      	cmp	r1, #0
 800c92a:	d041      	beq.n	800c9b0 <_free_r+0x8c>
 800c92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c930:	1f0c      	subs	r4, r1, #4
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfb8      	it	lt
 800c936:	18e4      	addlt	r4, r4, r3
 800c938:	f000 f8e0 	bl	800cafc <__malloc_lock>
 800c93c:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b4 <_free_r+0x90>)
 800c93e:	6813      	ldr	r3, [r2, #0]
 800c940:	b933      	cbnz	r3, 800c950 <_free_r+0x2c>
 800c942:	6063      	str	r3, [r4, #4]
 800c944:	6014      	str	r4, [r2, #0]
 800c946:	4628      	mov	r0, r5
 800c948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c94c:	f000 b8dc 	b.w	800cb08 <__malloc_unlock>
 800c950:	42a3      	cmp	r3, r4
 800c952:	d908      	bls.n	800c966 <_free_r+0x42>
 800c954:	6820      	ldr	r0, [r4, #0]
 800c956:	1821      	adds	r1, r4, r0
 800c958:	428b      	cmp	r3, r1
 800c95a:	bf01      	itttt	eq
 800c95c:	6819      	ldreq	r1, [r3, #0]
 800c95e:	685b      	ldreq	r3, [r3, #4]
 800c960:	1809      	addeq	r1, r1, r0
 800c962:	6021      	streq	r1, [r4, #0]
 800c964:	e7ed      	b.n	800c942 <_free_r+0x1e>
 800c966:	461a      	mov	r2, r3
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	b10b      	cbz	r3, 800c970 <_free_r+0x4c>
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	d9fa      	bls.n	800c966 <_free_r+0x42>
 800c970:	6811      	ldr	r1, [r2, #0]
 800c972:	1850      	adds	r0, r2, r1
 800c974:	42a0      	cmp	r0, r4
 800c976:	d10b      	bne.n	800c990 <_free_r+0x6c>
 800c978:	6820      	ldr	r0, [r4, #0]
 800c97a:	4401      	add	r1, r0
 800c97c:	1850      	adds	r0, r2, r1
 800c97e:	4283      	cmp	r3, r0
 800c980:	6011      	str	r1, [r2, #0]
 800c982:	d1e0      	bne.n	800c946 <_free_r+0x22>
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	6053      	str	r3, [r2, #4]
 800c98a:	4408      	add	r0, r1
 800c98c:	6010      	str	r0, [r2, #0]
 800c98e:	e7da      	b.n	800c946 <_free_r+0x22>
 800c990:	d902      	bls.n	800c998 <_free_r+0x74>
 800c992:	230c      	movs	r3, #12
 800c994:	602b      	str	r3, [r5, #0]
 800c996:	e7d6      	b.n	800c946 <_free_r+0x22>
 800c998:	6820      	ldr	r0, [r4, #0]
 800c99a:	1821      	adds	r1, r4, r0
 800c99c:	428b      	cmp	r3, r1
 800c99e:	bf04      	itt	eq
 800c9a0:	6819      	ldreq	r1, [r3, #0]
 800c9a2:	685b      	ldreq	r3, [r3, #4]
 800c9a4:	6063      	str	r3, [r4, #4]
 800c9a6:	bf04      	itt	eq
 800c9a8:	1809      	addeq	r1, r1, r0
 800c9aa:	6021      	streq	r1, [r4, #0]
 800c9ac:	6054      	str	r4, [r2, #4]
 800c9ae:	e7ca      	b.n	800c946 <_free_r+0x22>
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop
 800c9b4:	2000fb88 	.word	0x2000fb88

0800c9b8 <sbrk_aligned>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c9f8 <sbrk_aligned+0x40>)
 800c9bc:	460c      	mov	r4, r1
 800c9be:	6831      	ldr	r1, [r6, #0]
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	b911      	cbnz	r1, 800c9ca <sbrk_aligned+0x12>
 800c9c4:	f000 fba6 	bl	800d114 <_sbrk_r>
 800c9c8:	6030      	str	r0, [r6, #0]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f000 fba1 	bl	800d114 <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d103      	bne.n	800c9de <sbrk_aligned+0x26>
 800c9d6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9da:	4620      	mov	r0, r4
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d0f8      	beq.n	800c9da <sbrk_aligned+0x22>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f000 fb92 	bl	800d114 <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d1f2      	bne.n	800c9da <sbrk_aligned+0x22>
 800c9f4:	e7ef      	b.n	800c9d6 <sbrk_aligned+0x1e>
 800c9f6:	bf00      	nop
 800c9f8:	2000fb84 	.word	0x2000fb84

0800c9fc <_malloc_r>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4606      	mov	r6, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d904      	bls.n	800ca22 <_malloc_r+0x26>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	6033      	str	r3, [r6, #0]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caf8 <_malloc_r+0xfc>
 800ca26:	f000 f869 	bl	800cafc <__malloc_lock>
 800ca2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca2e:	461c      	mov	r4, r3
 800ca30:	bb44      	cbnz	r4, 800ca84 <_malloc_r+0x88>
 800ca32:	4629      	mov	r1, r5
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ffbf 	bl	800c9b8 <sbrk_aligned>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	d158      	bne.n	800caf2 <_malloc_r+0xf6>
 800ca40:	f8d8 4000 	ldr.w	r4, [r8]
 800ca44:	4627      	mov	r7, r4
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	d143      	bne.n	800cad2 <_malloc_r+0xd6>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	d04b      	beq.n	800cae6 <_malloc_r+0xea>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	4639      	mov	r1, r7
 800ca52:	4630      	mov	r0, r6
 800ca54:	eb04 0903 	add.w	r9, r4, r3
 800ca58:	f000 fb5c 	bl	800d114 <_sbrk_r>
 800ca5c:	4581      	cmp	r9, r0
 800ca5e:	d142      	bne.n	800cae6 <_malloc_r+0xea>
 800ca60:	6821      	ldr	r1, [r4, #0]
 800ca62:	1a6d      	subs	r5, r5, r1
 800ca64:	4629      	mov	r1, r5
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ffa6 	bl	800c9b8 <sbrk_aligned>
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d03a      	beq.n	800cae6 <_malloc_r+0xea>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	442b      	add	r3, r5
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	bb62      	cbnz	r2, 800cad8 <_malloc_r+0xdc>
 800ca7e:	f8c8 7000 	str.w	r7, [r8]
 800ca82:	e00f      	b.n	800caa4 <_malloc_r+0xa8>
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	1b52      	subs	r2, r2, r5
 800ca88:	d420      	bmi.n	800cacc <_malloc_r+0xd0>
 800ca8a:	2a0b      	cmp	r2, #11
 800ca8c:	d917      	bls.n	800cabe <_malloc_r+0xc2>
 800ca8e:	1961      	adds	r1, r4, r5
 800ca90:	42a3      	cmp	r3, r4
 800ca92:	6025      	str	r5, [r4, #0]
 800ca94:	bf18      	it	ne
 800ca96:	6059      	strne	r1, [r3, #4]
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	bf08      	it	eq
 800ca9c:	f8c8 1000 	streq.w	r1, [r8]
 800caa0:	5162      	str	r2, [r4, r5]
 800caa2:	604b      	str	r3, [r1, #4]
 800caa4:	4630      	mov	r0, r6
 800caa6:	f000 f82f 	bl	800cb08 <__malloc_unlock>
 800caaa:	f104 000b 	add.w	r0, r4, #11
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	f020 0007 	bic.w	r0, r0, #7
 800cab4:	1ac2      	subs	r2, r0, r3
 800cab6:	bf1c      	itt	ne
 800cab8:	1a1b      	subne	r3, r3, r0
 800caba:	50a3      	strne	r3, [r4, r2]
 800cabc:	e7af      	b.n	800ca1e <_malloc_r+0x22>
 800cabe:	6862      	ldr	r2, [r4, #4]
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	bf0c      	ite	eq
 800cac4:	f8c8 2000 	streq.w	r2, [r8]
 800cac8:	605a      	strne	r2, [r3, #4]
 800caca:	e7eb      	b.n	800caa4 <_malloc_r+0xa8>
 800cacc:	4623      	mov	r3, r4
 800cace:	6864      	ldr	r4, [r4, #4]
 800cad0:	e7ae      	b.n	800ca30 <_malloc_r+0x34>
 800cad2:	463c      	mov	r4, r7
 800cad4:	687f      	ldr	r7, [r7, #4]
 800cad6:	e7b6      	b.n	800ca46 <_malloc_r+0x4a>
 800cad8:	461a      	mov	r2, r3
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d1fb      	bne.n	800cad8 <_malloc_r+0xdc>
 800cae0:	2300      	movs	r3, #0
 800cae2:	6053      	str	r3, [r2, #4]
 800cae4:	e7de      	b.n	800caa4 <_malloc_r+0xa8>
 800cae6:	230c      	movs	r3, #12
 800cae8:	6033      	str	r3, [r6, #0]
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f80c 	bl	800cb08 <__malloc_unlock>
 800caf0:	e794      	b.n	800ca1c <_malloc_r+0x20>
 800caf2:	6005      	str	r5, [r0, #0]
 800caf4:	e7d6      	b.n	800caa4 <_malloc_r+0xa8>
 800caf6:	bf00      	nop
 800caf8:	2000fb88 	.word	0x2000fb88

0800cafc <__malloc_lock>:
 800cafc:	4801      	ldr	r0, [pc, #4]	@ (800cb04 <__malloc_lock+0x8>)
 800cafe:	f7ff bf0f 	b.w	800c920 <__retarget_lock_acquire_recursive>
 800cb02:	bf00      	nop
 800cb04:	2000fb80 	.word	0x2000fb80

0800cb08 <__malloc_unlock>:
 800cb08:	4801      	ldr	r0, [pc, #4]	@ (800cb10 <__malloc_unlock+0x8>)
 800cb0a:	f7ff bf0a 	b.w	800c922 <__retarget_lock_release_recursive>
 800cb0e:	bf00      	nop
 800cb10:	2000fb80 	.word	0x2000fb80

0800cb14 <__ssputs_r>:
 800cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	688e      	ldr	r6, [r1, #8]
 800cb1a:	461f      	mov	r7, r3
 800cb1c:	42be      	cmp	r6, r7
 800cb1e:	680b      	ldr	r3, [r1, #0]
 800cb20:	4682      	mov	sl, r0
 800cb22:	460c      	mov	r4, r1
 800cb24:	4690      	mov	r8, r2
 800cb26:	d82d      	bhi.n	800cb84 <__ssputs_r+0x70>
 800cb28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb30:	d026      	beq.n	800cb80 <__ssputs_r+0x6c>
 800cb32:	6965      	ldr	r5, [r4, #20]
 800cb34:	6909      	ldr	r1, [r1, #16]
 800cb36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb3a:	eba3 0901 	sub.w	r9, r3, r1
 800cb3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb42:	1c7b      	adds	r3, r7, #1
 800cb44:	444b      	add	r3, r9
 800cb46:	106d      	asrs	r5, r5, #1
 800cb48:	429d      	cmp	r5, r3
 800cb4a:	bf38      	it	cc
 800cb4c:	461d      	movcc	r5, r3
 800cb4e:	0553      	lsls	r3, r2, #21
 800cb50:	d527      	bpl.n	800cba2 <__ssputs_r+0x8e>
 800cb52:	4629      	mov	r1, r5
 800cb54:	f7ff ff52 	bl	800c9fc <_malloc_r>
 800cb58:	4606      	mov	r6, r0
 800cb5a:	b360      	cbz	r0, 800cbb6 <__ssputs_r+0xa2>
 800cb5c:	6921      	ldr	r1, [r4, #16]
 800cb5e:	464a      	mov	r2, r9
 800cb60:	f000 fae8 	bl	800d134 <memcpy>
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb6e:	81a3      	strh	r3, [r4, #12]
 800cb70:	6126      	str	r6, [r4, #16]
 800cb72:	6165      	str	r5, [r4, #20]
 800cb74:	444e      	add	r6, r9
 800cb76:	eba5 0509 	sub.w	r5, r5, r9
 800cb7a:	6026      	str	r6, [r4, #0]
 800cb7c:	60a5      	str	r5, [r4, #8]
 800cb7e:	463e      	mov	r6, r7
 800cb80:	42be      	cmp	r6, r7
 800cb82:	d900      	bls.n	800cb86 <__ssputs_r+0x72>
 800cb84:	463e      	mov	r6, r7
 800cb86:	6820      	ldr	r0, [r4, #0]
 800cb88:	4632      	mov	r2, r6
 800cb8a:	4641      	mov	r1, r8
 800cb8c:	f000 faa8 	bl	800d0e0 <memmove>
 800cb90:	68a3      	ldr	r3, [r4, #8]
 800cb92:	1b9b      	subs	r3, r3, r6
 800cb94:	60a3      	str	r3, [r4, #8]
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	4433      	add	r3, r6
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba2:	462a      	mov	r2, r5
 800cba4:	f000 fad4 	bl	800d150 <_realloc_r>
 800cba8:	4606      	mov	r6, r0
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d1e0      	bne.n	800cb70 <__ssputs_r+0x5c>
 800cbae:	6921      	ldr	r1, [r4, #16]
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	f7ff feb7 	bl	800c924 <_free_r>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	f8ca 3000 	str.w	r3, [sl]
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc2:	81a3      	strh	r3, [r4, #12]
 800cbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc8:	e7e9      	b.n	800cb9e <__ssputs_r+0x8a>
	...

0800cbcc <_svfiprintf_r>:
 800cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd0:	4698      	mov	r8, r3
 800cbd2:	898b      	ldrh	r3, [r1, #12]
 800cbd4:	061b      	lsls	r3, r3, #24
 800cbd6:	b09d      	sub	sp, #116	@ 0x74
 800cbd8:	4607      	mov	r7, r0
 800cbda:	460d      	mov	r5, r1
 800cbdc:	4614      	mov	r4, r2
 800cbde:	d510      	bpl.n	800cc02 <_svfiprintf_r+0x36>
 800cbe0:	690b      	ldr	r3, [r1, #16]
 800cbe2:	b973      	cbnz	r3, 800cc02 <_svfiprintf_r+0x36>
 800cbe4:	2140      	movs	r1, #64	@ 0x40
 800cbe6:	f7ff ff09 	bl	800c9fc <_malloc_r>
 800cbea:	6028      	str	r0, [r5, #0]
 800cbec:	6128      	str	r0, [r5, #16]
 800cbee:	b930      	cbnz	r0, 800cbfe <_svfiprintf_r+0x32>
 800cbf0:	230c      	movs	r3, #12
 800cbf2:	603b      	str	r3, [r7, #0]
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	b01d      	add	sp, #116	@ 0x74
 800cbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfe:	2340      	movs	r3, #64	@ 0x40
 800cc00:	616b      	str	r3, [r5, #20]
 800cc02:	2300      	movs	r3, #0
 800cc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc06:	2320      	movs	r3, #32
 800cc08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc10:	2330      	movs	r3, #48	@ 0x30
 800cc12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cdb0 <_svfiprintf_r+0x1e4>
 800cc16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc1a:	f04f 0901 	mov.w	r9, #1
 800cc1e:	4623      	mov	r3, r4
 800cc20:	469a      	mov	sl, r3
 800cc22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc26:	b10a      	cbz	r2, 800cc2c <_svfiprintf_r+0x60>
 800cc28:	2a25      	cmp	r2, #37	@ 0x25
 800cc2a:	d1f9      	bne.n	800cc20 <_svfiprintf_r+0x54>
 800cc2c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc30:	d00b      	beq.n	800cc4a <_svfiprintf_r+0x7e>
 800cc32:	465b      	mov	r3, fp
 800cc34:	4622      	mov	r2, r4
 800cc36:	4629      	mov	r1, r5
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff ff6b 	bl	800cb14 <__ssputs_r>
 800cc3e:	3001      	adds	r0, #1
 800cc40:	f000 80a7 	beq.w	800cd92 <_svfiprintf_r+0x1c6>
 800cc44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc46:	445a      	add	r2, fp
 800cc48:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc4a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f000 809f 	beq.w	800cd92 <_svfiprintf_r+0x1c6>
 800cc54:	2300      	movs	r3, #0
 800cc56:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc5e:	f10a 0a01 	add.w	sl, sl, #1
 800cc62:	9304      	str	r3, [sp, #16]
 800cc64:	9307      	str	r3, [sp, #28]
 800cc66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc6c:	4654      	mov	r4, sl
 800cc6e:	2205      	movs	r2, #5
 800cc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc74:	484e      	ldr	r0, [pc, #312]	@ (800cdb0 <_svfiprintf_r+0x1e4>)
 800cc76:	f7f3 fabb 	bl	80001f0 <memchr>
 800cc7a:	9a04      	ldr	r2, [sp, #16]
 800cc7c:	b9d8      	cbnz	r0, 800ccb6 <_svfiprintf_r+0xea>
 800cc7e:	06d0      	lsls	r0, r2, #27
 800cc80:	bf44      	itt	mi
 800cc82:	2320      	movmi	r3, #32
 800cc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc88:	0711      	lsls	r1, r2, #28
 800cc8a:	bf44      	itt	mi
 800cc8c:	232b      	movmi	r3, #43	@ 0x2b
 800cc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc92:	f89a 3000 	ldrb.w	r3, [sl]
 800cc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc98:	d015      	beq.n	800ccc6 <_svfiprintf_r+0xfa>
 800cc9a:	9a07      	ldr	r2, [sp, #28]
 800cc9c:	4654      	mov	r4, sl
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f04f 0c0a 	mov.w	ip, #10
 800cca4:	4621      	mov	r1, r4
 800cca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccaa:	3b30      	subs	r3, #48	@ 0x30
 800ccac:	2b09      	cmp	r3, #9
 800ccae:	d94b      	bls.n	800cd48 <_svfiprintf_r+0x17c>
 800ccb0:	b1b0      	cbz	r0, 800cce0 <_svfiprintf_r+0x114>
 800ccb2:	9207      	str	r2, [sp, #28]
 800ccb4:	e014      	b.n	800cce0 <_svfiprintf_r+0x114>
 800ccb6:	eba0 0308 	sub.w	r3, r0, r8
 800ccba:	fa09 f303 	lsl.w	r3, r9, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	9304      	str	r3, [sp, #16]
 800ccc2:	46a2      	mov	sl, r4
 800ccc4:	e7d2      	b.n	800cc6c <_svfiprintf_r+0xa0>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	1d19      	adds	r1, r3, #4
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	9103      	str	r1, [sp, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	bfbb      	ittet	lt
 800ccd2:	425b      	neglt	r3, r3
 800ccd4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccd8:	9307      	strge	r3, [sp, #28]
 800ccda:	9307      	strlt	r3, [sp, #28]
 800ccdc:	bfb8      	it	lt
 800ccde:	9204      	strlt	r2, [sp, #16]
 800cce0:	7823      	ldrb	r3, [r4, #0]
 800cce2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cce4:	d10a      	bne.n	800ccfc <_svfiprintf_r+0x130>
 800cce6:	7863      	ldrb	r3, [r4, #1]
 800cce8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccea:	d132      	bne.n	800cd52 <_svfiprintf_r+0x186>
 800ccec:	9b03      	ldr	r3, [sp, #12]
 800ccee:	1d1a      	adds	r2, r3, #4
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	9203      	str	r2, [sp, #12]
 800ccf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccf8:	3402      	adds	r4, #2
 800ccfa:	9305      	str	r3, [sp, #20]
 800ccfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cdc0 <_svfiprintf_r+0x1f4>
 800cd00:	7821      	ldrb	r1, [r4, #0]
 800cd02:	2203      	movs	r2, #3
 800cd04:	4650      	mov	r0, sl
 800cd06:	f7f3 fa73 	bl	80001f0 <memchr>
 800cd0a:	b138      	cbz	r0, 800cd1c <_svfiprintf_r+0x150>
 800cd0c:	9b04      	ldr	r3, [sp, #16]
 800cd0e:	eba0 000a 	sub.w	r0, r0, sl
 800cd12:	2240      	movs	r2, #64	@ 0x40
 800cd14:	4082      	lsls	r2, r0
 800cd16:	4313      	orrs	r3, r2
 800cd18:	3401      	adds	r4, #1
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd20:	4824      	ldr	r0, [pc, #144]	@ (800cdb4 <_svfiprintf_r+0x1e8>)
 800cd22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd26:	2206      	movs	r2, #6
 800cd28:	f7f3 fa62 	bl	80001f0 <memchr>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d036      	beq.n	800cd9e <_svfiprintf_r+0x1d2>
 800cd30:	4b21      	ldr	r3, [pc, #132]	@ (800cdb8 <_svfiprintf_r+0x1ec>)
 800cd32:	bb1b      	cbnz	r3, 800cd7c <_svfiprintf_r+0x1b0>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	3307      	adds	r3, #7
 800cd38:	f023 0307 	bic.w	r3, r3, #7
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd42:	4433      	add	r3, r6
 800cd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd46:	e76a      	b.n	800cc1e <_svfiprintf_r+0x52>
 800cd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	2001      	movs	r0, #1
 800cd50:	e7a8      	b.n	800cca4 <_svfiprintf_r+0xd8>
 800cd52:	2300      	movs	r3, #0
 800cd54:	3401      	adds	r4, #1
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	f04f 0c0a 	mov.w	ip, #10
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd64:	3a30      	subs	r2, #48	@ 0x30
 800cd66:	2a09      	cmp	r2, #9
 800cd68:	d903      	bls.n	800cd72 <_svfiprintf_r+0x1a6>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0c6      	beq.n	800ccfc <_svfiprintf_r+0x130>
 800cd6e:	9105      	str	r1, [sp, #20]
 800cd70:	e7c4      	b.n	800ccfc <_svfiprintf_r+0x130>
 800cd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd76:	4604      	mov	r4, r0
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e7f0      	b.n	800cd5e <_svfiprintf_r+0x192>
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4b0e      	ldr	r3, [pc, #56]	@ (800cdbc <_svfiprintf_r+0x1f0>)
 800cd84:	a904      	add	r1, sp, #16
 800cd86:	4638      	mov	r0, r7
 800cd88:	f3af 8000 	nop.w
 800cd8c:	1c42      	adds	r2, r0, #1
 800cd8e:	4606      	mov	r6, r0
 800cd90:	d1d6      	bne.n	800cd40 <_svfiprintf_r+0x174>
 800cd92:	89ab      	ldrh	r3, [r5, #12]
 800cd94:	065b      	lsls	r3, r3, #25
 800cd96:	f53f af2d 	bmi.w	800cbf4 <_svfiprintf_r+0x28>
 800cd9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd9c:	e72c      	b.n	800cbf8 <_svfiprintf_r+0x2c>
 800cd9e:	ab03      	add	r3, sp, #12
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	462a      	mov	r2, r5
 800cda4:	4b05      	ldr	r3, [pc, #20]	@ (800cdbc <_svfiprintf_r+0x1f0>)
 800cda6:	a904      	add	r1, sp, #16
 800cda8:	4638      	mov	r0, r7
 800cdaa:	f000 f879 	bl	800cea0 <_printf_i>
 800cdae:	e7ed      	b.n	800cd8c <_svfiprintf_r+0x1c0>
 800cdb0:	080207f0 	.word	0x080207f0
 800cdb4:	080207fa 	.word	0x080207fa
 800cdb8:	00000000 	.word	0x00000000
 800cdbc:	0800cb15 	.word	0x0800cb15
 800cdc0:	080207f6 	.word	0x080207f6

0800cdc4 <_printf_common>:
 800cdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc8:	4616      	mov	r6, r2
 800cdca:	4698      	mov	r8, r3
 800cdcc:	688a      	ldr	r2, [r1, #8]
 800cdce:	690b      	ldr	r3, [r1, #16]
 800cdd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	bfb8      	it	lt
 800cdd8:	4613      	movlt	r3, r2
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cde0:	4607      	mov	r7, r0
 800cde2:	460c      	mov	r4, r1
 800cde4:	b10a      	cbz	r2, 800cdea <_printf_common+0x26>
 800cde6:	3301      	adds	r3, #1
 800cde8:	6033      	str	r3, [r6, #0]
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	0699      	lsls	r1, r3, #26
 800cdee:	bf42      	ittt	mi
 800cdf0:	6833      	ldrmi	r3, [r6, #0]
 800cdf2:	3302      	addmi	r3, #2
 800cdf4:	6033      	strmi	r3, [r6, #0]
 800cdf6:	6825      	ldr	r5, [r4, #0]
 800cdf8:	f015 0506 	ands.w	r5, r5, #6
 800cdfc:	d106      	bne.n	800ce0c <_printf_common+0x48>
 800cdfe:	f104 0a19 	add.w	sl, r4, #25
 800ce02:	68e3      	ldr	r3, [r4, #12]
 800ce04:	6832      	ldr	r2, [r6, #0]
 800ce06:	1a9b      	subs	r3, r3, r2
 800ce08:	42ab      	cmp	r3, r5
 800ce0a:	dc26      	bgt.n	800ce5a <_printf_common+0x96>
 800ce0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	3b00      	subs	r3, #0
 800ce14:	bf18      	it	ne
 800ce16:	2301      	movne	r3, #1
 800ce18:	0692      	lsls	r2, r2, #26
 800ce1a:	d42b      	bmi.n	800ce74 <_printf_common+0xb0>
 800ce1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce20:	4641      	mov	r1, r8
 800ce22:	4638      	mov	r0, r7
 800ce24:	47c8      	blx	r9
 800ce26:	3001      	adds	r0, #1
 800ce28:	d01e      	beq.n	800ce68 <_printf_common+0xa4>
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	6922      	ldr	r2, [r4, #16]
 800ce2e:	f003 0306 	and.w	r3, r3, #6
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	bf02      	ittt	eq
 800ce36:	68e5      	ldreq	r5, [r4, #12]
 800ce38:	6833      	ldreq	r3, [r6, #0]
 800ce3a:	1aed      	subeq	r5, r5, r3
 800ce3c:	68a3      	ldr	r3, [r4, #8]
 800ce3e:	bf0c      	ite	eq
 800ce40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce44:	2500      	movne	r5, #0
 800ce46:	4293      	cmp	r3, r2
 800ce48:	bfc4      	itt	gt
 800ce4a:	1a9b      	subgt	r3, r3, r2
 800ce4c:	18ed      	addgt	r5, r5, r3
 800ce4e:	2600      	movs	r6, #0
 800ce50:	341a      	adds	r4, #26
 800ce52:	42b5      	cmp	r5, r6
 800ce54:	d11a      	bne.n	800ce8c <_printf_common+0xc8>
 800ce56:	2000      	movs	r0, #0
 800ce58:	e008      	b.n	800ce6c <_printf_common+0xa8>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	4652      	mov	r2, sl
 800ce5e:	4641      	mov	r1, r8
 800ce60:	4638      	mov	r0, r7
 800ce62:	47c8      	blx	r9
 800ce64:	3001      	adds	r0, #1
 800ce66:	d103      	bne.n	800ce70 <_printf_common+0xac>
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce70:	3501      	adds	r5, #1
 800ce72:	e7c6      	b.n	800ce02 <_printf_common+0x3e>
 800ce74:	18e1      	adds	r1, r4, r3
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	2030      	movs	r0, #48	@ 0x30
 800ce7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce7e:	4422      	add	r2, r4
 800ce80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce88:	3302      	adds	r3, #2
 800ce8a:	e7c7      	b.n	800ce1c <_printf_common+0x58>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	4622      	mov	r2, r4
 800ce90:	4641      	mov	r1, r8
 800ce92:	4638      	mov	r0, r7
 800ce94:	47c8      	blx	r9
 800ce96:	3001      	adds	r0, #1
 800ce98:	d0e6      	beq.n	800ce68 <_printf_common+0xa4>
 800ce9a:	3601      	adds	r6, #1
 800ce9c:	e7d9      	b.n	800ce52 <_printf_common+0x8e>
	...

0800cea0 <_printf_i>:
 800cea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cea4:	7e0f      	ldrb	r7, [r1, #24]
 800cea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cea8:	2f78      	cmp	r7, #120	@ 0x78
 800ceaa:	4691      	mov	r9, r2
 800ceac:	4680      	mov	r8, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	469a      	mov	sl, r3
 800ceb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ceb6:	d807      	bhi.n	800cec8 <_printf_i+0x28>
 800ceb8:	2f62      	cmp	r7, #98	@ 0x62
 800ceba:	d80a      	bhi.n	800ced2 <_printf_i+0x32>
 800cebc:	2f00      	cmp	r7, #0
 800cebe:	f000 80d2 	beq.w	800d066 <_printf_i+0x1c6>
 800cec2:	2f58      	cmp	r7, #88	@ 0x58
 800cec4:	f000 80b9 	beq.w	800d03a <_printf_i+0x19a>
 800cec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ced0:	e03a      	b.n	800cf48 <_printf_i+0xa8>
 800ced2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ced6:	2b15      	cmp	r3, #21
 800ced8:	d8f6      	bhi.n	800cec8 <_printf_i+0x28>
 800ceda:	a101      	add	r1, pc, #4	@ (adr r1, 800cee0 <_printf_i+0x40>)
 800cedc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cee0:	0800cf39 	.word	0x0800cf39
 800cee4:	0800cf4d 	.word	0x0800cf4d
 800cee8:	0800cec9 	.word	0x0800cec9
 800ceec:	0800cec9 	.word	0x0800cec9
 800cef0:	0800cec9 	.word	0x0800cec9
 800cef4:	0800cec9 	.word	0x0800cec9
 800cef8:	0800cf4d 	.word	0x0800cf4d
 800cefc:	0800cec9 	.word	0x0800cec9
 800cf00:	0800cec9 	.word	0x0800cec9
 800cf04:	0800cec9 	.word	0x0800cec9
 800cf08:	0800cec9 	.word	0x0800cec9
 800cf0c:	0800d04d 	.word	0x0800d04d
 800cf10:	0800cf77 	.word	0x0800cf77
 800cf14:	0800d007 	.word	0x0800d007
 800cf18:	0800cec9 	.word	0x0800cec9
 800cf1c:	0800cec9 	.word	0x0800cec9
 800cf20:	0800d06f 	.word	0x0800d06f
 800cf24:	0800cec9 	.word	0x0800cec9
 800cf28:	0800cf77 	.word	0x0800cf77
 800cf2c:	0800cec9 	.word	0x0800cec9
 800cf30:	0800cec9 	.word	0x0800cec9
 800cf34:	0800d00f 	.word	0x0800d00f
 800cf38:	6833      	ldr	r3, [r6, #0]
 800cf3a:	1d1a      	adds	r2, r3, #4
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6032      	str	r2, [r6, #0]
 800cf40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e09d      	b.n	800d088 <_printf_i+0x1e8>
 800cf4c:	6833      	ldr	r3, [r6, #0]
 800cf4e:	6820      	ldr	r0, [r4, #0]
 800cf50:	1d19      	adds	r1, r3, #4
 800cf52:	6031      	str	r1, [r6, #0]
 800cf54:	0606      	lsls	r6, r0, #24
 800cf56:	d501      	bpl.n	800cf5c <_printf_i+0xbc>
 800cf58:	681d      	ldr	r5, [r3, #0]
 800cf5a:	e003      	b.n	800cf64 <_printf_i+0xc4>
 800cf5c:	0645      	lsls	r5, r0, #25
 800cf5e:	d5fb      	bpl.n	800cf58 <_printf_i+0xb8>
 800cf60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf64:	2d00      	cmp	r5, #0
 800cf66:	da03      	bge.n	800cf70 <_printf_i+0xd0>
 800cf68:	232d      	movs	r3, #45	@ 0x2d
 800cf6a:	426d      	negs	r5, r5
 800cf6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf70:	4859      	ldr	r0, [pc, #356]	@ (800d0d8 <_printf_i+0x238>)
 800cf72:	230a      	movs	r3, #10
 800cf74:	e011      	b.n	800cf9a <_printf_i+0xfa>
 800cf76:	6821      	ldr	r1, [r4, #0]
 800cf78:	6833      	ldr	r3, [r6, #0]
 800cf7a:	0608      	lsls	r0, r1, #24
 800cf7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf80:	d402      	bmi.n	800cf88 <_printf_i+0xe8>
 800cf82:	0649      	lsls	r1, r1, #25
 800cf84:	bf48      	it	mi
 800cf86:	b2ad      	uxthmi	r5, r5
 800cf88:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf8a:	4853      	ldr	r0, [pc, #332]	@ (800d0d8 <_printf_i+0x238>)
 800cf8c:	6033      	str	r3, [r6, #0]
 800cf8e:	bf14      	ite	ne
 800cf90:	230a      	movne	r3, #10
 800cf92:	2308      	moveq	r3, #8
 800cf94:	2100      	movs	r1, #0
 800cf96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf9a:	6866      	ldr	r6, [r4, #4]
 800cf9c:	60a6      	str	r6, [r4, #8]
 800cf9e:	2e00      	cmp	r6, #0
 800cfa0:	bfa2      	ittt	ge
 800cfa2:	6821      	ldrge	r1, [r4, #0]
 800cfa4:	f021 0104 	bicge.w	r1, r1, #4
 800cfa8:	6021      	strge	r1, [r4, #0]
 800cfaa:	b90d      	cbnz	r5, 800cfb0 <_printf_i+0x110>
 800cfac:	2e00      	cmp	r6, #0
 800cfae:	d04b      	beq.n	800d048 <_printf_i+0x1a8>
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfb6:	fb03 5711 	mls	r7, r3, r1, r5
 800cfba:	5dc7      	ldrb	r7, [r0, r7]
 800cfbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfc0:	462f      	mov	r7, r5
 800cfc2:	42bb      	cmp	r3, r7
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	d9f4      	bls.n	800cfb2 <_printf_i+0x112>
 800cfc8:	2b08      	cmp	r3, #8
 800cfca:	d10b      	bne.n	800cfe4 <_printf_i+0x144>
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	07df      	lsls	r7, r3, #31
 800cfd0:	d508      	bpl.n	800cfe4 <_printf_i+0x144>
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	6861      	ldr	r1, [r4, #4]
 800cfd6:	4299      	cmp	r1, r3
 800cfd8:	bfde      	ittt	le
 800cfda:	2330      	movle	r3, #48	@ 0x30
 800cfdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfe4:	1b92      	subs	r2, r2, r6
 800cfe6:	6122      	str	r2, [r4, #16]
 800cfe8:	f8cd a000 	str.w	sl, [sp]
 800cfec:	464b      	mov	r3, r9
 800cfee:	aa03      	add	r2, sp, #12
 800cff0:	4621      	mov	r1, r4
 800cff2:	4640      	mov	r0, r8
 800cff4:	f7ff fee6 	bl	800cdc4 <_printf_common>
 800cff8:	3001      	adds	r0, #1
 800cffa:	d14a      	bne.n	800d092 <_printf_i+0x1f2>
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295
 800d000:	b004      	add	sp, #16
 800d002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	f043 0320 	orr.w	r3, r3, #32
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	4833      	ldr	r0, [pc, #204]	@ (800d0dc <_printf_i+0x23c>)
 800d010:	2778      	movs	r7, #120	@ 0x78
 800d012:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	6831      	ldr	r1, [r6, #0]
 800d01a:	061f      	lsls	r7, r3, #24
 800d01c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d020:	d402      	bmi.n	800d028 <_printf_i+0x188>
 800d022:	065f      	lsls	r7, r3, #25
 800d024:	bf48      	it	mi
 800d026:	b2ad      	uxthmi	r5, r5
 800d028:	6031      	str	r1, [r6, #0]
 800d02a:	07d9      	lsls	r1, r3, #31
 800d02c:	bf44      	itt	mi
 800d02e:	f043 0320 	orrmi.w	r3, r3, #32
 800d032:	6023      	strmi	r3, [r4, #0]
 800d034:	b11d      	cbz	r5, 800d03e <_printf_i+0x19e>
 800d036:	2310      	movs	r3, #16
 800d038:	e7ac      	b.n	800cf94 <_printf_i+0xf4>
 800d03a:	4827      	ldr	r0, [pc, #156]	@ (800d0d8 <_printf_i+0x238>)
 800d03c:	e7e9      	b.n	800d012 <_printf_i+0x172>
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	f023 0320 	bic.w	r3, r3, #32
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	e7f6      	b.n	800d036 <_printf_i+0x196>
 800d048:	4616      	mov	r6, r2
 800d04a:	e7bd      	b.n	800cfc8 <_printf_i+0x128>
 800d04c:	6833      	ldr	r3, [r6, #0]
 800d04e:	6825      	ldr	r5, [r4, #0]
 800d050:	6961      	ldr	r1, [r4, #20]
 800d052:	1d18      	adds	r0, r3, #4
 800d054:	6030      	str	r0, [r6, #0]
 800d056:	062e      	lsls	r6, r5, #24
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	d501      	bpl.n	800d060 <_printf_i+0x1c0>
 800d05c:	6019      	str	r1, [r3, #0]
 800d05e:	e002      	b.n	800d066 <_printf_i+0x1c6>
 800d060:	0668      	lsls	r0, r5, #25
 800d062:	d5fb      	bpl.n	800d05c <_printf_i+0x1bc>
 800d064:	8019      	strh	r1, [r3, #0]
 800d066:	2300      	movs	r3, #0
 800d068:	6123      	str	r3, [r4, #16]
 800d06a:	4616      	mov	r6, r2
 800d06c:	e7bc      	b.n	800cfe8 <_printf_i+0x148>
 800d06e:	6833      	ldr	r3, [r6, #0]
 800d070:	1d1a      	adds	r2, r3, #4
 800d072:	6032      	str	r2, [r6, #0]
 800d074:	681e      	ldr	r6, [r3, #0]
 800d076:	6862      	ldr	r2, [r4, #4]
 800d078:	2100      	movs	r1, #0
 800d07a:	4630      	mov	r0, r6
 800d07c:	f7f3 f8b8 	bl	80001f0 <memchr>
 800d080:	b108      	cbz	r0, 800d086 <_printf_i+0x1e6>
 800d082:	1b80      	subs	r0, r0, r6
 800d084:	6060      	str	r0, [r4, #4]
 800d086:	6863      	ldr	r3, [r4, #4]
 800d088:	6123      	str	r3, [r4, #16]
 800d08a:	2300      	movs	r3, #0
 800d08c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d090:	e7aa      	b.n	800cfe8 <_printf_i+0x148>
 800d092:	6923      	ldr	r3, [r4, #16]
 800d094:	4632      	mov	r2, r6
 800d096:	4649      	mov	r1, r9
 800d098:	4640      	mov	r0, r8
 800d09a:	47d0      	blx	sl
 800d09c:	3001      	adds	r0, #1
 800d09e:	d0ad      	beq.n	800cffc <_printf_i+0x15c>
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	079b      	lsls	r3, r3, #30
 800d0a4:	d413      	bmi.n	800d0ce <_printf_i+0x22e>
 800d0a6:	68e0      	ldr	r0, [r4, #12]
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	4298      	cmp	r0, r3
 800d0ac:	bfb8      	it	lt
 800d0ae:	4618      	movlt	r0, r3
 800d0b0:	e7a6      	b.n	800d000 <_printf_i+0x160>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	47d0      	blx	sl
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d09d      	beq.n	800cffc <_printf_i+0x15c>
 800d0c0:	3501      	adds	r5, #1
 800d0c2:	68e3      	ldr	r3, [r4, #12]
 800d0c4:	9903      	ldr	r1, [sp, #12]
 800d0c6:	1a5b      	subs	r3, r3, r1
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	dcf2      	bgt.n	800d0b2 <_printf_i+0x212>
 800d0cc:	e7eb      	b.n	800d0a6 <_printf_i+0x206>
 800d0ce:	2500      	movs	r5, #0
 800d0d0:	f104 0619 	add.w	r6, r4, #25
 800d0d4:	e7f5      	b.n	800d0c2 <_printf_i+0x222>
 800d0d6:	bf00      	nop
 800d0d8:	08020801 	.word	0x08020801
 800d0dc:	08020812 	.word	0x08020812

0800d0e0 <memmove>:
 800d0e0:	4288      	cmp	r0, r1
 800d0e2:	b510      	push	{r4, lr}
 800d0e4:	eb01 0402 	add.w	r4, r1, r2
 800d0e8:	d902      	bls.n	800d0f0 <memmove+0x10>
 800d0ea:	4284      	cmp	r4, r0
 800d0ec:	4623      	mov	r3, r4
 800d0ee:	d807      	bhi.n	800d100 <memmove+0x20>
 800d0f0:	1e43      	subs	r3, r0, #1
 800d0f2:	42a1      	cmp	r1, r4
 800d0f4:	d008      	beq.n	800d108 <memmove+0x28>
 800d0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0fe:	e7f8      	b.n	800d0f2 <memmove+0x12>
 800d100:	4402      	add	r2, r0
 800d102:	4601      	mov	r1, r0
 800d104:	428a      	cmp	r2, r1
 800d106:	d100      	bne.n	800d10a <memmove+0x2a>
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d10e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d112:	e7f7      	b.n	800d104 <memmove+0x24>

0800d114 <_sbrk_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4d06      	ldr	r5, [pc, #24]	@ (800d130 <_sbrk_r+0x1c>)
 800d118:	2300      	movs	r3, #0
 800d11a:	4604      	mov	r4, r0
 800d11c:	4608      	mov	r0, r1
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	f7f5 fd16 	bl	8002b50 <_sbrk>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_sbrk_r+0x1a>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_sbrk_r+0x1a>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	2000fb7c 	.word	0x2000fb7c

0800d134 <memcpy>:
 800d134:	440a      	add	r2, r1
 800d136:	4291      	cmp	r1, r2
 800d138:	f100 33ff 	add.w	r3, r0, #4294967295
 800d13c:	d100      	bne.n	800d140 <memcpy+0xc>
 800d13e:	4770      	bx	lr
 800d140:	b510      	push	{r4, lr}
 800d142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d14a:	4291      	cmp	r1, r2
 800d14c:	d1f9      	bne.n	800d142 <memcpy+0xe>
 800d14e:	bd10      	pop	{r4, pc}

0800d150 <_realloc_r>:
 800d150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d154:	4680      	mov	r8, r0
 800d156:	4615      	mov	r5, r2
 800d158:	460c      	mov	r4, r1
 800d15a:	b921      	cbnz	r1, 800d166 <_realloc_r+0x16>
 800d15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d160:	4611      	mov	r1, r2
 800d162:	f7ff bc4b 	b.w	800c9fc <_malloc_r>
 800d166:	b92a      	cbnz	r2, 800d174 <_realloc_r+0x24>
 800d168:	f7ff fbdc 	bl	800c924 <_free_r>
 800d16c:	2400      	movs	r4, #0
 800d16e:	4620      	mov	r0, r4
 800d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d174:	f000 f81a 	bl	800d1ac <_malloc_usable_size_r>
 800d178:	4285      	cmp	r5, r0
 800d17a:	4606      	mov	r6, r0
 800d17c:	d802      	bhi.n	800d184 <_realloc_r+0x34>
 800d17e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d182:	d8f4      	bhi.n	800d16e <_realloc_r+0x1e>
 800d184:	4629      	mov	r1, r5
 800d186:	4640      	mov	r0, r8
 800d188:	f7ff fc38 	bl	800c9fc <_malloc_r>
 800d18c:	4607      	mov	r7, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	d0ec      	beq.n	800d16c <_realloc_r+0x1c>
 800d192:	42b5      	cmp	r5, r6
 800d194:	462a      	mov	r2, r5
 800d196:	4621      	mov	r1, r4
 800d198:	bf28      	it	cs
 800d19a:	4632      	movcs	r2, r6
 800d19c:	f7ff ffca 	bl	800d134 <memcpy>
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	f7ff fbbe 	bl	800c924 <_free_r>
 800d1a8:	463c      	mov	r4, r7
 800d1aa:	e7e0      	b.n	800d16e <_realloc_r+0x1e>

0800d1ac <_malloc_usable_size_r>:
 800d1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b0:	1f18      	subs	r0, r3, #4
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	bfbc      	itt	lt
 800d1b6:	580b      	ldrlt	r3, [r1, r0]
 800d1b8:	18c0      	addlt	r0, r0, r3
 800d1ba:	4770      	bx	lr

0800d1bc <sqrtf>:
 800d1bc:	b508      	push	{r3, lr}
 800d1be:	ed2d 8b02 	vpush	{d8}
 800d1c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d1c6:	f000 f817 	bl	800d1f8 <__ieee754_sqrtf>
 800d1ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d2:	d60c      	bvs.n	800d1ee <sqrtf+0x32>
 800d1d4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d1f4 <sqrtf+0x38>
 800d1d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	d505      	bpl.n	800d1ee <sqrtf+0x32>
 800d1e2:	f7ff fb73 	bl	800c8cc <__errno>
 800d1e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d1ea:	2321      	movs	r3, #33	@ 0x21
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	ecbd 8b02 	vpop	{d8}
 800d1f2:	bd08      	pop	{r3, pc}
 800d1f4:	00000000 	.word	0x00000000

0800d1f8 <__ieee754_sqrtf>:
 800d1f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d1fc:	4770      	bx	lr
	...

0800d200 <_init>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	bf00      	nop
 800d204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d206:	bc08      	pop	{r3}
 800d208:	469e      	mov	lr, r3
 800d20a:	4770      	bx	lr

0800d20c <_fini>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr
